/* main.cpp
   Generated by gSOAP 2.8.114 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/
/*
   Stand-alone server auto-test code:
   Takes request from standard input or over TCP/IP socket and returns
response to standard output or socket

   Compile:
   cc main.c soapServer.c soapC.c stdsoap2.c

   Command line usage with redirect over stdin/out:
     Note: 12288 = SOAP_XML_INDENT | SOAP_XML_STRICT (see codes in stdsoap2.h)
   Command line usage to start server at port 8080:
*/
#include "main.h"



int main(int argc, char **argv)
{
	// std::cout << "sha1: " << sha1("sha1") << std::endl;
	
	getIdProfiles();
	getIdSourceVideo();
	getIdEncoderVideo();
	getUserPassword();
	// struct soap *soap = soap_new();
    
	struct soap *soap = soap_new1(SOAP_XML_INDENT | SOAP_XML_STRICT);


	soap_register_plugin(soap, soap_wsse);
	soap_wsse_set_security_token_handler(soap, security_token_handler);
	soap_wsse_add_Security(soap);

	// soap_wsse_add_Timestamp(soap, "Time", 10);
	// soap_wsse_add_UsernameTokenDigest(soap, "Auth", "admin", "elcom_123");
	// soap_wsse_add_UsernameTokenText(soap, "Id", "tuyet", NULL);
	onvifPort = atoi(argv[1]);
	// std::cout << "port: " << port << std::endl;
	// ipAddress = getIpAddress();
	if (soap_valid_socket(soap_bind(soap, NULL, onvifPort, 100)))
	{	
		// soap_wsdd_listen(soap, 1); // listen for messages for 1 ms
		while (soap_valid_socket(soap_accept(soap)))
		{	

			if(soap_serve(soap))
			{
				soap_print_fault(soap, stderr);
				soap_wsse_add_Security(soap);
			}


			soap_destroy(soap);
			soap_end(soap);
		}
	}
	soap_destroy(soap);
	soap_end(soap);
	soap_free(soap);
	return 0;
}

const void *security_token_handler(struct soap *soap, int *alg, const char *keyname, const unsigned char *keyid, int keyidlen, int *keylen)
{
  // Get the user name from UsernameToken in message
//   const char *uid = soap_wsse_get_Username(soap);
  switch (*alg)
  {
    case SOAP_SMD_VRFY_DSA_SHA1:
    case SOAP_SMD_VRFY_DSA_SHA256:
    case SOAP_SMD_VRFY_RSA_SHA1:
    case SOAP_SMD_VRFY_RSA_SHA224:
    case SOAP_SMD_VRFY_RSA_SHA256:
    case SOAP_SMD_VRFY_RSA_SHA384:
    case SOAP_SMD_VRFY_RSA_SHA512:
    case SOAP_SMD_VRFY_ECDSA_SHA1:
    case SOAP_SMD_VRFY_ECDSA_SHA224:
    case SOAP_SMD_VRFY_ECDSA_SHA256:
    case SOAP_SMD_VRFY_ECDSA_SHA384:
    case SOAP_SMD_VRFY_ECDSA_SHA512:
    //   if (uid)
    //   {
    //     // Lookup uid to retrieve the X509 certificate to verify the signature
    //     const X509 *cert = ...; 
    //     return (const void*)cert;
    //   }
    //   return NULL; // no certificate: fail
    case SOAP_SMD_HMAC_SHA1:
    case SOAP_SMD_HMAC_SHA224:
    case SOAP_SMD_HMAC_SHA256:
    case SOAP_SMD_HMAC_SHA384:
    case SOAP_SMD_HMAC_SHA512:
    //   if (uid)
    //   {
    //     // Lookup uid to retrieve the HMAC SHA key to verify the signature
    //     const void *key = ...; 
    //     *alg = ...;
    //     *keylen = ...;
    //     return key;
    //   }
    //   return NULL; // no certificate: fail
    case SOAP_MEC_ENV_DEC_DES_CBC:
    case SOAP_MEC_ENV_DEC_AES128_CBC:
    case SOAP_MEC_ENV_DEC_AES192_CBC:
    case SOAP_MEC_ENV_DEC_AES256_CBC:
    case SOAP_MEC_ENV_DEC_AES512_CBC: // reserved for future use
    case SOAP_MEC_ENV_DEC_AES128_GCM: // GCM requires OpenSSL 1.0.2 or higher
    case SOAP_MEC_ENV_DEC_AES192_GCM: // GCM requires OpenSSL 1.0.2 or higher
    case SOAP_MEC_ENV_DEC_AES256_GCM: // GCM requires OpenSSL 1.0.2 or higher
    case SOAP_MEC_ENV_DEC_AES512_GCM: // GCM requires OpenSSL 1.0.2 or higher
    //   if (keyname)
    //   {
    //     //    certificate is present in the SecurityTokenReference/KeyIdentifier
    //     //    when ValueType is http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3
    //     // 2. keyname is set to the string concatenation
    //     //     "{X509IssuerName}#{X509SerialNumber}" of the X509IssuerName
    //     //     and X509SerialNumber present in X509Data/X509IssuerSerial
    //     // 3. keyname is set to X509Data/X509SubjectName
    //     return ...;
    //   }
    //   else if (keyid)
    //   {
    //     // 1. keyid and keyidlen are set to the data in
    //     //    SecurityTokenReference/KeyIdentifier when the ValueType is
    //     //    http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier
    //     return ...;
    //   }
    //   break;
    case SOAP_MEC_DEC_DES_CBC:
    case SOAP_MEC_DEC_AES128_CBC:
    case SOAP_MEC_DEC_AES192_CBC:
    case SOAP_MEC_DEC_AES256_CBC:
    case SOAP_MEC_DEC_AES512_CBC: // reserved for future use
    case SOAP_MEC_DEC_AES128_GCM: // GCM requires OpenSSL 1.0.2 or higher
    case SOAP_MEC_DEC_AES192_GCM: // GCM requires OpenSSL 1.0.2 or higher
    case SOAP_MEC_DEC_AES256_GCM: // GCM requires OpenSSL 1.0.2 or higher`
    case SOAP_MEC_DEC_AES512_GCM: // GCM requires OpenSSL 1.0.2 or higher
    //   if (keyname)
    //   {
    //     // use the keyname to get the shared secret key associated for decryption
    //     *keylen = ... // length of the shared secret key
    //     return ...;
    //   }
    //   break;
	std::cout << "SOAP_MEC_DEC_AES512_GCM" <<std::endl;
  }
  return NULL; // fail
}


int soap_verify(struct soap *soap)
{
	// return SOAP_OK;
	const char *username = soap_wsse_get_Username(soap);
	// if (soap == NULL || soap->header == NULL || soap->header->wsse__Security == NULL)
	// {
	// 	printf ("no authentication,refuse it!\n");
	// 	return SOAP_FAULT;
	// }

	if (!username)
	{
		std::cout << "no username: " << soap->error << std::endl;
		soap_wsse_delete_Security(soap); // remove old security headers before returning!
		return soap->error; // no username: return FailedAuthentication (from soap_wsse_get_Username)
	}
	else
	{
		// std::cout << "username: " << username << std::endl;
		for(unsigned int i = 0; i < usernameOnvif.size(); i++)
		{
			if(!strcmp(username, usernameOnvif[i].c_str()))
			{
				if(soap_wsse_verify_Timestamp(soap))
				{
					std::cout << "wrong Timestamp: " << soap->error << std::endl;
					soap_wsse_delete_Security(soap);
					return soap->error;
				}
				if(soap_wsse_verify_Password(soap, passwordOnvif[i].c_str()))
				{
					std::cout << "wrong pass: " << soap->error << std::endl;
					soap_wsse_delete_Security(soap);
					return soap->error;
				}
				std::cout << "success pass" << std::endl;
				soap_wsse_delete_Security(soap);
				return SOAP_OK;
			}
			// else
			// {
			// 	soap_wsse_delete_Security(soap);
			// 	std::cout << "wrong name: " << soap->error <<std::endl;
			// 	// return SOAP_USER_ERROR;SOAP_FAULT
			// 	return SOAP_FAULT;
			// }
		}
		soap_wsse_delete_Security(soap);
		std::cout << "wrong name: " << soap->error <<std::endl;
		return SOAP_FAULT;
	}
}


void getIdProfiles()
{
	std::string dataResponse;
	if (auto res = httplib::Client(scheme_host_port).Get("/dvr/v1.0/GetProfiles")) {
		dataResponse = res->body;
	} else {
		std::cout << "http err: " << res.error() << std::endl;
	}

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetProfilesResponse"]["Profiles"].isNull())
	{
		ProfileId.clear();
		Json::Value arrayProfiles = root_dataResponse["GetProfilesResponse"]["Profiles"];
		for(unsigned int i = 0; i < arrayProfiles.size(); i++)
		{
			ProfileId.push_back(arrayProfiles[i]["token"].asString());
			std::cout << "Profiles ID " << i << " : " << arrayProfiles[i]["token"].asString() << std::endl;
		}
	}
}

void getIdSourceVideo()
{

	std::string dataResponse;
	if (auto res = httplib::Client(scheme_host_port).Get("/dvr/v1.0/GetVideoSources")) {
		dataResponse = res->body;
	} else {
		std::cout << "http err: " << res.error() << std::endl;
	}

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoSourcesResponse"]["VideoSources"].isNull())
	{
		SourceId.clear();
		SourceId_Id.clear();
		Json::Value arrayVideoSources = root_dataResponse["GetVideoSourcesResponse"]["VideoSources"];
		for(unsigned int i = 0; i < arrayVideoSources.size(); i++)
		{
			SourceId.push_back(arrayVideoSources[i]["token"].asString());
			SourceId_Id.push_back(arrayVideoSources[i]["token"].asString() + ExpandSourceId);
			std::cout << "VideoSources ID " << i << " : " << arrayVideoSources[i]["token"].asString() << std::endl;
			std::cout << "VideoSources ID - ID " << i << " : " << arrayVideoSources[i]["token"].asString() + ExpandSourceId << std::endl;
		}
	}

}

void getIdEncoderVideo()
{
	std::string dataResponse;
	if (auto res = httplib::Client(scheme_host_port).Get("/dvr/v1.0/GetVideoEncoderConfigurations")) {
		dataResponse = res->body;
	} else {
		std::cout << "http err: " << res.error() << std::endl;
	}

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"].isNull())
	{
		EncoderId.clear();
		Json::Value arrayConfigurations = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"];
		for(unsigned int i = 0; i < arrayConfigurations.size(); i++)
		{
			EncoderId.push_back(arrayConfigurations[i]["token"].asString());
			std::cout << "VideoEncoder ID " << i << " : " << arrayConfigurations[i]["token"].asString() << std::endl;
		}
	}

}

void getUserPassword()
{
	std::string dataResponse = R"({
					"GetUsersResponse": {
						"User": [
							{
								"Username": "admin",
								"Password": "elcom_123",
								"UserLevel": "Administrator"
							},

							{
								"Username": "ngoc",
								"Password": "ngoc_123",
								"UserLevel": "Administrator"
							},
							{
								"Username": "tuyet",
								"Password": "tuyet_123",
								"UserLevel": "Administrator"
							}
						]
					}
				})";

	Json::Value root_dataResponse;
	Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	Json::Value root_GetUsersResponse = root_dataResponse["GetUsersResponse"];
	Json::Value arrayUser = root_GetUsersResponse["User"];
	for (unsigned int i=0; i<arrayUser.size(); i++)
	{
		std::string Username = arrayUser[i]["Username"].asString();
		std::string Password = arrayUser[i]["Password"].asString();
		std::string UserLevel = arrayUser[i]["UserLevel"].asString();
		if(UserLevel == "Administrator")
		{
			usernameOnvif.push_back(Username);
			passwordOnvif.push_back(Password);
		}
	}
}

/** Auto-test server operation SOAP_ENV__Fault */
int SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	(void)soap; /* appease -Wall -Werror */
	std::cout << "SOAP_ENV__Fault" << std::endl;
	return SOAP_OK;
}




//-------------------------------------------------------------------------------------------------------------------------









// /** Auto-test server operation __wsdd__Hello */
// int __wsdd__Hello(struct soap *soap, struct wsdd__HelloType *wsdd__Hello)
// {
// 	(void)soap; /* appease -Wall -Werror */
// 	std::cout << "__wsdd__Hello" << std::endl;
// 	return SOAP_OK;
// }


// /** Auto-test server operation __wsdd__Bye */
// int __wsdd__Bye(struct soap *soap, struct wsdd__ByeType *wsdd__Bye)
// {
// 	(void)soap; /* appease -Wall -Werror */
// 	std::cout << "__wsdd__Bye" << std::endl;
// 	return SOAP_OK;
// }


// /** Auto-test server operation __wsdd__Probe */
// int __wsdd__Probe(struct soap *soap, struct wsdd__ProbeType *wsdd__Probe)
// {
// 	(void)soap; /* appease -Wall -Werror */
// 	std::cout << "__wsdd__Probe" << std::endl;
// 	return SOAP_OK;
// }


// /** Auto-test server operation __wsdd__ProbeMatches */
// int __wsdd__ProbeMatches(struct soap *soap, struct wsdd__ProbeMatchesType *wsdd__ProbeMatches)
// {
// 	(void)soap; /* appease -Wall -Werror */
// 	std::cout << "__wsdd__ProbeMatches" << std::endl;
// 	return SOAP_OK;
// }


// /** Auto-test server operation __wsdd__Resolve */
// int __wsdd__Resolve(struct soap *soap, struct wsdd__ResolveType *wsdd__Resolve)
// {
// 	(void)soap; /* appease -Wall -Werror */
// 	std::cout << "__wsdd__Resolve" << std::endl;
// 	return SOAP_OK;
// }


// /** Auto-test server operation __wsdd__ResolveMatches */
// int __wsdd__ResolveMatches(struct soap *soap, struct wsdd__ResolveMatchesType *wsdd__ResolveMatches)
// {
// 	(void)soap; /* appease -Wall -Werror */
// 	std::cout << "__wsdd__ResolveMatches" << std::endl;
// 	return SOAP_OK;
// }




void wsdd_event_Hello(struct soap *soap, unsigned int InstanceId, const char *SequenceId, unsigned int MessageNumber, const char *MessageID, const char *RelatesTo, const char *EndpointReference, const char *Types, const char *Scopes, const char *MatchBy, const char *XAddrs, unsigned int MetadataVersion)
{ 
	std::cout << "__wsdd__Resolve" << std::endl;
}

void wsdd_event_Bye(struct soap *soap, unsigned int InstanceId, const char *SequenceId, unsigned int MessageNumber, const char *MessageID, const char *RelatesTo, const char *EndpointReference, const char *Types, const char *Scopes, const char *MatchBy, const char *XAddrs, unsigned int *MetadataVersion)
{ }

soap_wsdd_mode wsdd_event_Probe(struct soap *soap, const char *MessageID, const char *ReplyTo, const char *Types, const char *Scopes, const char *MatchBy, struct wsdd__ProbeMatchesType *ProbeMatches)
{
	std::cout << "__wsdd__Resolve" << std::endl;
  return SOAP_WSDD_ADHOC;
}

void wsdd_event_ProbeMatches(struct soap *soap, unsigned int InstanceId, const char *SequenceId, unsigned int MessageNumber, const char *MessageID, const char *RelatesTo, struct wsdd__ProbeMatchesType *ProbeMatches)
{ 
	std::cout << "__wsdd__Resolve" << std::endl;
}

soap_wsdd_mode wsdd_event_Resolve(struct soap *soap, const char *MessageID, const char *ReplyTo, const char *EndpointReference, struct wsdd__ResolveMatchType *match)
{
	std::cout << "__wsdd__Resolve" << std::endl;
  return SOAP_WSDD_ADHOC;
}

void wsdd_event_ResolveMatches(struct soap *soap, unsigned int InstanceId, const char * SequenceId, unsigned int MessageNumber, const char *MessageID, const char *RelatesTo, struct wsdd__ResolveMatchType *match)
{ 
	std::cout << "__wsdd__Resolve" << std::endl;
}
























//---------------------------------------------------------------------------------------------------------

/** Auto-test server operation __tas__GetServiceCapabilities */
int __tas__GetServiceCapabilities(struct soap *soap, _tas__GetServiceCapabilities *tas__GetServiceCapabilities, _tas__GetServiceCapabilitiesResponse &tas__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tas__GetServiceCapabilities" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__CreateRSAKeyPair */
int __tas__CreateRSAKeyPair(struct soap *soap, _tas__CreateRSAKeyPair *tas__CreateRSAKeyPair, _tas__CreateRSAKeyPairResponse &tas__CreateRSAKeyPairResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__UploadKeyPairInPKCS8 */
int __tas__UploadKeyPairInPKCS8(struct soap *soap, _tas__UploadKeyPairInPKCS8 *tas__UploadKeyPairInPKCS8, _tas__UploadKeyPairInPKCS8Response &tas__UploadKeyPairInPKCS8Response)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__UploadCertificateWithPrivateKeyInPKCS12 */
int __tas__UploadCertificateWithPrivateKeyInPKCS12(struct soap *soap, _tas__UploadCertificateWithPrivateKeyInPKCS12 *tas__UploadCertificateWithPrivateKeyInPKCS12, _tas__UploadCertificateWithPrivateKeyInPKCS12Response &tas__UploadCertificateWithPrivateKeyInPKCS12Response)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetKeyStatus */
int __tas__GetKeyStatus(struct soap *soap, _tas__GetKeyStatus *tas__GetKeyStatus, _tas__GetKeyStatusResponse &tas__GetKeyStatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetPrivateKeyStatus */
int __tas__GetPrivateKeyStatus(struct soap *soap, _tas__GetPrivateKeyStatus *tas__GetPrivateKeyStatus, _tas__GetPrivateKeyStatusResponse &tas__GetPrivateKeyStatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllKeys */
int __tas__GetAllKeys(struct soap *soap, _tas__GetAllKeys *tas__GetAllKeys, _tas__GetAllKeysResponse &tas__GetAllKeysResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteKey */
int __tas__DeleteKey(struct soap *soap, _tas__DeleteKey *tas__DeleteKey, _tas__DeleteKeyResponse &tas__DeleteKeyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__CreatePKCS10CSR */
int __tas__CreatePKCS10CSR(struct soap *soap, _tas__CreatePKCS10CSR *tas__CreatePKCS10CSR, _tas__CreatePKCS10CSRResponse &tas__CreatePKCS10CSRResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__CreateSelfSignedCertificate */
int __tas__CreateSelfSignedCertificate(struct soap *soap, _tas__CreateSelfSignedCertificate *tas__CreateSelfSignedCertificate, _tas__CreateSelfSignedCertificateResponse &tas__CreateSelfSignedCertificateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__UploadCertificate */
int __tas__UploadCertificate(struct soap *soap, _tas__UploadCertificate *tas__UploadCertificate, _tas__UploadCertificateResponse &tas__UploadCertificateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetCertificate */
int __tas__GetCertificate(struct soap *soap, _tas__GetCertificate *tas__GetCertificate, _tas__GetCertificateResponse &tas__GetCertificateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllCertificates */
int __tas__GetAllCertificates(struct soap *soap, _tas__GetAllCertificates *tas__GetAllCertificates, _tas__GetAllCertificatesResponse &tas__GetAllCertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteCertificate */
int __tas__DeleteCertificate(struct soap *soap, _tas__DeleteCertificate *tas__DeleteCertificate, _tas__DeleteCertificateResponse &tas__DeleteCertificateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__CreateCertificationPath */
int __tas__CreateCertificationPath(struct soap *soap, _tas__CreateCertificationPath *tas__CreateCertificationPath, _tas__CreateCertificationPathResponse &tas__CreateCertificationPathResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetCertificationPath */
int __tas__GetCertificationPath(struct soap *soap, _tas__GetCertificationPath *tas__GetCertificationPath, _tas__GetCertificationPathResponse &tas__GetCertificationPathResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllCertificationPaths */
int __tas__GetAllCertificationPaths(struct soap *soap, _tas__GetAllCertificationPaths *tas__GetAllCertificationPaths, _tas__GetAllCertificationPathsResponse &tas__GetAllCertificationPathsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteCertificationPath */
int __tas__DeleteCertificationPath(struct soap *soap, _tas__DeleteCertificationPath *tas__DeleteCertificationPath, _tas__DeleteCertificationPathResponse &tas__DeleteCertificationPathResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__UploadPassphrase */
int __tas__UploadPassphrase(struct soap *soap, _tas__UploadPassphrase *tas__UploadPassphrase, _tas__UploadPassphraseResponse &tas__UploadPassphraseResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllPassphrases */
int __tas__GetAllPassphrases(struct soap *soap, _tas__GetAllPassphrases *tas__GetAllPassphrases, _tas__GetAllPassphrasesResponse &tas__GetAllPassphrasesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeletePassphrase */
int __tas__DeletePassphrase(struct soap *soap, _tas__DeletePassphrase *tas__DeletePassphrase, _tas__DeletePassphraseResponse &tas__DeletePassphraseResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__UploadCRL */
int __tas__UploadCRL(struct soap *soap, _tas__UploadCRL *tas__UploadCRL, _tas__UploadCRLResponse &tas__UploadCRLResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetCRL */
int __tas__GetCRL(struct soap *soap, _tas__GetCRL *tas__GetCRL, _tas__GetCRLResponse &tas__GetCRLResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllCRLs */
int __tas__GetAllCRLs(struct soap *soap, _tas__GetAllCRLs *tas__GetAllCRLs, _tas__GetAllCRLsResponse &tas__GetAllCRLsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteCRL */
int __tas__DeleteCRL(struct soap *soap, _tas__DeleteCRL *tas__DeleteCRL, _tas__DeleteCRLResponse &tas__DeleteCRLResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__CreateCertPathValidationPolicy */
int __tas__CreateCertPathValidationPolicy(struct soap *soap, _tas__CreateCertPathValidationPolicy *tas__CreateCertPathValidationPolicy, _tas__CreateCertPathValidationPolicyResponse &tas__CreateCertPathValidationPolicyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetCertPathValidationPolicy */
int __tas__GetCertPathValidationPolicy(struct soap *soap, _tas__GetCertPathValidationPolicy *tas__GetCertPathValidationPolicy, _tas__GetCertPathValidationPolicyResponse &tas__GetCertPathValidationPolicyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllCertPathValidationPolicies */
int __tas__GetAllCertPathValidationPolicies(struct soap *soap, _tas__GetAllCertPathValidationPolicies *tas__GetAllCertPathValidationPolicies, _tas__GetAllCertPathValidationPoliciesResponse &tas__GetAllCertPathValidationPoliciesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteCertPathValidationPolicy */
int __tas__DeleteCertPathValidationPolicy(struct soap *soap, _tas__DeleteCertPathValidationPolicy *tas__DeleteCertPathValidationPolicy, _tas__DeleteCertPathValidationPolicyResponse &tas__DeleteCertPathValidationPolicyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__AddServerCertificateAssignment */
int __tas__AddServerCertificateAssignment(struct soap *soap, _tas__AddServerCertificateAssignment *tas__AddServerCertificateAssignment, _tas__AddServerCertificateAssignmentResponse &tas__AddServerCertificateAssignmentResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__RemoveServerCertificateAssignment */
int __tas__RemoveServerCertificateAssignment(struct soap *soap, _tas__RemoveServerCertificateAssignment *tas__RemoveServerCertificateAssignment, _tas__RemoveServerCertificateAssignmentResponse &tas__RemoveServerCertificateAssignmentResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__ReplaceServerCertificateAssignment */
int __tas__ReplaceServerCertificateAssignment(struct soap *soap, _tas__ReplaceServerCertificateAssignment *tas__ReplaceServerCertificateAssignment, _tas__ReplaceServerCertificateAssignmentResponse &tas__ReplaceServerCertificateAssignmentResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAssignedServerCertificates */
int __tas__GetAssignedServerCertificates(struct soap *soap, _tas__GetAssignedServerCertificates *tas__GetAssignedServerCertificates, _tas__GetAssignedServerCertificatesResponse &tas__GetAssignedServerCertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__SetEnabledTLSVersions */
int __tas__SetEnabledTLSVersions(struct soap *soap, _tas__SetEnabledTLSVersions *tas__SetEnabledTLSVersions, _tas__SetEnabledTLSVersionsResponse &tas__SetEnabledTLSVersionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetEnabledTLSVersions */
int __tas__GetEnabledTLSVersions(struct soap *soap, _tas__GetEnabledTLSVersions *tas__GetEnabledTLSVersions, _tas__GetEnabledTLSVersionsResponse &tas__GetEnabledTLSVersionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__SetClientAuthenticationRequired */
int __tas__SetClientAuthenticationRequired(struct soap *soap, _tas__SetClientAuthenticationRequired *tas__SetClientAuthenticationRequired, _tas__SetClientAuthenticationRequiredResponse &tas__SetClientAuthenticationRequiredResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetClientAuthenticationRequired */
int __tas__GetClientAuthenticationRequired(struct soap *soap, _tas__GetClientAuthenticationRequired *tas__GetClientAuthenticationRequired, _tas__GetClientAuthenticationRequiredResponse &tas__GetClientAuthenticationRequiredResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__SetCnMapsToUser */
int __tas__SetCnMapsToUser(struct soap *soap, _tas__SetCnMapsToUser *tas__SetCnMapsToUser, _tas__SetCnMapsToUserResponse &tas__SetCnMapsToUserResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetCnMapsToUser */
int __tas__GetCnMapsToUser(struct soap *soap, _tas__GetCnMapsToUser *tas__GetCnMapsToUser, _tas__GetCnMapsToUserResponse &tas__GetCnMapsToUserResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__AddCertPathValidationPolicyAssignment */
int __tas__AddCertPathValidationPolicyAssignment(struct soap *soap, _tas__AddCertPathValidationPolicyAssignment *tas__AddCertPathValidationPolicyAssignment, _tas__AddCertPathValidationPolicyAssignmentResponse &tas__AddCertPathValidationPolicyAssignmentResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__RemoveCertPathValidationPolicyAssignment */
int __tas__RemoveCertPathValidationPolicyAssignment(struct soap *soap, _tas__RemoveCertPathValidationPolicyAssignment *tas__RemoveCertPathValidationPolicyAssignment, _tas__RemoveCertPathValidationPolicyAssignmentResponse &tas__RemoveCertPathValidationPolicyAssignmentResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__ReplaceCertPathValidationPolicyAssignment */
int __tas__ReplaceCertPathValidationPolicyAssignment(struct soap *soap, _tas__ReplaceCertPathValidationPolicyAssignment *tas__ReplaceCertPathValidationPolicyAssignment, _tas__ReplaceCertPathValidationPolicyAssignmentResponse &tas__ReplaceCertPathValidationPolicyAssignmentResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAssignedCertPathValidationPolicies */
int __tas__GetAssignedCertPathValidationPolicies(struct soap *soap, _tas__GetAssignedCertPathValidationPolicies *tas__GetAssignedCertPathValidationPolicies, _tas__GetAssignedCertPathValidationPoliciesResponse &tas__GetAssignedCertPathValidationPoliciesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__AddDot1XConfiguration */
int __tas__AddDot1XConfiguration(struct soap *soap, _tas__AddDot1XConfiguration *tas__AddDot1XConfiguration, _tas__AddDot1XConfigurationResponse &tas__AddDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetAllDot1XConfigurations */
int __tas__GetAllDot1XConfigurations(struct soap *soap, _tas__GetAllDot1XConfigurations *tas__GetAllDot1XConfigurations, _tas__GetAllDot1XConfigurationsResponse &tas__GetAllDot1XConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetDot1XConfiguration */
int __tas__GetDot1XConfiguration(struct soap *soap, _tas__GetDot1XConfiguration *tas__GetDot1XConfiguration, _tas__GetDot1XConfigurationResponse &tas__GetDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tas__GetDot1XConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteDot1XConfiguration */
int __tas__DeleteDot1XConfiguration(struct soap *soap, _tas__DeleteDot1XConfiguration *tas__DeleteDot1XConfiguration, _tas__DeleteDot1XConfigurationResponse &tas__DeleteDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__SetNetworkInterfaceDot1XConfiguration */
int __tas__SetNetworkInterfaceDot1XConfiguration(struct soap *soap, _tas__SetNetworkInterfaceDot1XConfiguration *tas__SetNetworkInterfaceDot1XConfiguration, _tas__SetNetworkInterfaceDot1XConfigurationResponse &tas__SetNetworkInterfaceDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__GetNetworkInterfaceDot1XConfiguration */
int __tas__GetNetworkInterfaceDot1XConfiguration(struct soap *soap, _tas__GetNetworkInterfaceDot1XConfiguration *tas__GetNetworkInterfaceDot1XConfiguration, _tas__GetNetworkInterfaceDot1XConfigurationResponse &tas__GetNetworkInterfaceDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tas__DeleteNetworkInterfaceDot1XConfiguration */
int __tas__DeleteNetworkInterfaceDot1XConfiguration(struct soap *soap, _tas__DeleteNetworkInterfaceDot1XConfiguration *tas__DeleteNetworkInterfaceDot1XConfiguration, _tas__DeleteNetworkInterfaceDot1XConfigurationResponse &tas__DeleteNetworkInterfaceDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tdn__Hello */
int __tdn__Hello(struct soap *soap, struct wsdd__HelloType tdn__Hello, struct wsdd__ResolveType &tdn__HelloResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tdn__Bye */
int __tdn__Bye(struct soap *soap, struct wsdd__ByeType tdn__Bye, struct wsdd__ResolveType &tdn__ByeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tdn__Probe */
int __tdn__Probe(struct soap *soap, struct wsdd__ProbeType tdn__Probe, struct wsdd__ProbeMatchesType &tdn__ProbeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetServices */
int __tds__GetServices(struct soap *soap, _tds__GetServices *tds__GetServices, _tds__GetServicesResponse &tds__GetServicesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetServices" << std::endl;
	std::cout << "__tds__GetServices IncludeCapability: " << tds__GetServices->IncludeCapability << std::endl;

	ServiceContext* ctx = (ServiceContext*)soap->user;
	onvifIpAddress = ctx->getServerIpFromClientIp(htonl(soap->ip));
	onvifIpAddress = "203.171.31.11";
	// std::string scheme_host_port_str = "http://" + ctx->getServerIpFromClientIp(htonl(soap->ip)) + ":" + std::to_string(onvifPort);
	std::cout << "End Point: " << onvifIpAddress << ":" << onvifPort << std::endl;


    //Device Service
    tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	std::string XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/device_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver10/device/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 17;
	tds__GetServicesResponse.Service.back()->Version->Minor = 6;
	tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);
	
    // if( tds__GetServices->IncludeCapability )
    // {
    //     tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);
    //     tds__DeviceServiceCapabilities *capabilities                 = ctx->getDeviceServiceCapabilities(soap);
    //     tds__GetServicesResponse.Service.back()->Capabilities->__any = soap_dom_element(soap, NULL, "tds:Capabilities", capabilities, capabilities->soap_type());
    // }


    tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/media_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver10/media/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 17;
	tds__GetServicesResponse.Service.back()->Version->Minor = 6;
	tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);

	trt__Capabilities *capabilities                              = ctx->getMediaServiceCapabilities(soap);
	soap_dom_element *dom = soap_elt_new(soap, NULL, "trt:Capabilities");
	tds__GetServicesResponse.Service.back()->Capabilities->__any = (char*) dom;
	// tds__GetServicesResponse.Service.back()->Capabilities->__any = soap_elt_new(soap, NULL, "trt:Capabilities");
	soap_elt_node((soap_dom_element*)tds__GetServicesResponse.Service.back()->Capabilities->__any, capabilities, SOAP_TYPE__tds__Service_Capabilities);
	// tds__GetServicesResponse.Service.back()->Capabilities->__any = (char*) soap_dom_element(soap, NULL, "trt:Capabilities", capabilities, capabilities->soap_type());


    // if (tds__GetServices->IncludeCapability)
    // {
    //     tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);
    //     trt__Capabilities *capabilities                              = ctx->getMediaServiceCapabilities(soap);
    //     tds__GetServicesResponse.Service.back()->Capabilities->__any = (char*) soap_dom_element(soap, NULL, "trt:Capabilities", capabilities, capabilities->soap_type());
	// 	tds__GetServicesResponse.Service.back()->Capabilities->__any = soap_dom_element(soap, NULL, "trt:Capabilities", capabilities, SOAP_TYPE__tds__Service_Capabilities);
	// }


	tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/imaging_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver20/imaging/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 16;
	tds__GetServicesResponse.Service.back()->Version->Minor = 9;
	tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);



	tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/events_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver10/events/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 2;
	tds__GetServicesResponse.Service.back()->Version->Minor = 60;
	tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);



	tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/deviceIO_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver10/deviceIO/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 17;
	tds__GetServicesResponse.Service.back()->Version->Minor = 6;
	tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);


	tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/recording_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver10/recording/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 17;
	tds__GetServicesResponse.Service.back()->Version->Minor = 6;
	tds__GetServicesResponse.Service.back()->Capabilities        = soap_new__tds__Service_Capabilities(soap);

	
	tds__GetServicesResponse.Service.push_back(soap_new_tds__Service(soap));
	XAddr = "http://" + onvifIpAddress + ":" + std::to_string(onvifPort) + "/onvif/ptz_service";
    tds__GetServicesResponse.Service.back()->Namespace  = "http://www.onvif.org/ver20/ptz/wsdl";
    tds__GetServicesResponse.Service.back()->XAddr      = XAddr;
    tds__GetServicesResponse.Service.back()->Version    = soap_new_tt__OnvifVersion(soap);
	tds__GetServicesResponse.Service.back()->Version->Major = 17;
	tds__GetServicesResponse.Service.back()->Version->Minor = 6;


	
	
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetServiceCapabilities */
int __tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilities *tds__GetServiceCapabilities, _tds__GetServiceCapabilitiesResponse &tds__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetServiceCapabilities" << std::endl;

	std::string dataResponse = R"({
									"GetServiceCapabilitiesResponse": {
										"Capabilities": {
											"Network": {
												"IPFilter": false,
												"ZeroConfiguration": false,
												"IPVersion6": false,
												"DynDNS": false,
												"Dot11Configuration": false,
												"Dot1XConfigurations": 0,
												"HostnameFromDHCP": false,
												"NTP": 1,
												"DHCPv6": false
											},
											"Security": {
												"TLS1.0": false,
												"TLS1.1": false,
												"TLS1.2": false,
												"OnboardKeyGeneration": false,
												"AccessPolicyConfig": false,
												"DefaultAccessPolicy": true,
												"Dot1X": false,
												"RemoteUserHandling": false,
												"X.509Token": false,
												"SAMLToken": false,
												"KerberosToken": false,
												"UsernameToken": true,
												"HttpDigest": true,
												"RELToken": false,
												"SupportedEAPMethods": 0,
												"MaxUsers": 20,
												"MaxUserNameLength": 16,
												"MaxPasswordLength": 32
											},
											"System": {
												"DiscoveryResolve": false,
												"DiscoveryBye": true,
												"RemoteDiscovery": false,
												"SystemBackup": false,
												"SystemLogging": true,
												"FirmwareUpgrade": true,
												"HttpFirmwareUpgrade": true,
												"HttpSystemBackup": false,
												"HttpSystemLogging": false,
												"HttpSupportInformation": false,
												"StorageConfiguration": false,
												"MaxStorageConfigurations": 0,
												"GeoLocationEntries": 0
											}
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"].isNull())
	{
		tds__GetServiceCapabilitiesResponse.Capabilities = soap_new_tds__DeviceServiceCapabilities(soap);
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"].isNull())
		{
			tds__GetServiceCapabilitiesResponse.Capabilities->Network = soap_new_tds__NetworkCapabilities(soap);
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["IPFilter"].isNull())
			{
				bool *IPFilter = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["IPFilter"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->IPFilter = IPFilter;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["ZeroConfiguration"].isNull())
			{
				bool *ZeroConfiguration = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["ZeroConfiguration"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->ZeroConfiguration = ZeroConfiguration;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["IPVersion6"].isNull())
			{
				bool *IPVersion6 = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["IPVersion6"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->IPVersion6 = IPVersion6;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["DynDNS"].isNull())
			{
				bool *DynDNS = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["DynDNS"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->DynDNS = DynDNS;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["Dot11Configuration"].isNull())
			{
				bool *Dot11Configuration = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["Dot11Configuration"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->Dot11Configuration = Dot11Configuration;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["Dot1XConfigurations"].isNull())
			{
				int *Dot1XConfigurations = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["Dot1XConfigurations"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->Dot1XConfigurations = Dot1XConfigurations;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["HostnameFromDHCP"].isNull())
			{
				bool *HostnameFromDHCP = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["HostnameFromDHCP"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->HostnameFromDHCP = HostnameFromDHCP;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["NTP"].isNull())
			{
				int *NTP = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["NTP"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->NTP = NTP;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["DHCPv6"].isNull())
			{
				bool *DHCPv6 = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Network"]["DHCPv6"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Network->DHCPv6 = DHCPv6;
			}
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"].isNull())
		{
			tds__GetServiceCapabilitiesResponse.Capabilities->Security = soap_new_tds__SecurityCapabilities(soap);
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["TLS1.0"].isNull())
			{
				bool *TLS1_x002e0 = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["TLS1.0"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->TLS1_x002e0 = TLS1_x002e0;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["TLS1.1"].isNull())
			{
				bool *TLS1_x002e1 = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["TLS1.1"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->TLS1_x002e1 = TLS1_x002e1;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["TLS1.2"].isNull())
			{
				bool *TLS1_x002e2 = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["TLS1.2"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->TLS1_x002e2 = TLS1_x002e2;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["OnboardKeyGeneration"].isNull())
			{
				bool *OnboardKeyGeneration = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["OnboardKeyGeneration"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->OnboardKeyGeneration = OnboardKeyGeneration;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["DefaultAccessPolicy"].isNull())
			{
				bool *DefaultAccessPolicy = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["DefaultAccessPolicy"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->DefaultAccessPolicy = DefaultAccessPolicy;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["Dot1X"].isNull())
			{
				bool *Dot1X = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["Dot1X"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->Dot1X = Dot1X;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["RemoteUserHandling"].isNull())
			{
				bool *RemoteUserHandling = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["RemoteUserHandling"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->RemoteUserHandling = RemoteUserHandling;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["X.509Token"].isNull())
			{
				bool *X_x002e509Token = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["X.509Token"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->X_x002e509Token = X_x002e509Token;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["SAMLToken"].isNull())
			{
				bool *SAMLToken = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["SAMLToken"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->SAMLToken = SAMLToken;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["KerberosToken"].isNull())
			{
				bool *KerberosToken = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["KerberosToken"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->KerberosToken = KerberosToken;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["UsernameToken"].isNull())
			{
				bool *UsernameToken = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["UsernameToken"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->UsernameToken = UsernameToken;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["HttpDigest"].isNull())
			{
				bool *HttpDigest = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["HttpDigest"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->HttpDigest = HttpDigest;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["RELToken"].isNull())
			{
				bool *RELToken = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["RELToken"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->RELToken = RELToken;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["SupportedEAPMethods"].isNull())
			{
				std::string *SupportedEAPMethods = new std::string(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["SupportedEAPMethods"].asString());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->SupportedEAPMethods = SupportedEAPMethods;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["MaxUsers"].isNull())
			{
				int *MaxUsers = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["MaxUsers"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->MaxUsers = MaxUsers;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["MaxUserNameLength"].isNull())
			{
				int *MaxUserNameLength = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["MaxUserNameLength"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->MaxUserNameLength = MaxUserNameLength;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["MaxPasswordLength"].isNull())
			{
				int *MaxPasswordLength = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Security"]["MaxPasswordLength"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->Security->MaxPasswordLength = MaxPasswordLength;
			}
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"].isNull())
		{
			tds__GetServiceCapabilitiesResponse.Capabilities->System = soap_new_tds__SystemCapabilities(soap);
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["DiscoveryResolve"].isNull())
			{
				bool *DiscoveryResolve = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["DiscoveryResolve"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->DiscoveryResolve = DiscoveryResolve;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["DiscoveryBye"].isNull())
			{
				bool *DiscoveryBye = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["DiscoveryBye"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->DiscoveryBye = DiscoveryBye;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["RemoteDiscovery"].isNull())
			{
				bool *RemoteDiscovery = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["RemoteDiscovery"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->RemoteDiscovery = RemoteDiscovery;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["SystemBackup"].isNull())
			{
				bool *SystemBackup = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["SystemBackup"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->SystemBackup = SystemBackup;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["SystemLogging"].isNull())
			{
				bool *SystemLogging = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["SystemLogging"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->SystemLogging = SystemLogging;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["FirmwareUpgrade"].isNull())
			{
				bool *FirmwareUpgrade = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["FirmwareUpgrade"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->FirmwareUpgrade = FirmwareUpgrade;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpFirmwareUpgrade"].isNull())
			{
				bool *HttpFirmwareUpgrade = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpFirmwareUpgrade"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->HttpFirmwareUpgrade = HttpFirmwareUpgrade;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpSystemBackup"].isNull())
			{
				bool *HttpSystemBackup = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpSystemBackup"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->HttpSystemBackup = HttpSystemBackup;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpSystemLogging"].isNull())
			{
				bool *HttpSystemLogging = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpSystemLogging"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->HttpSystemLogging = HttpSystemLogging;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpSupportInformation"].isNull())
			{
				bool *HttpSupportInformation = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["HttpSupportInformation"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->HttpSupportInformation = HttpSupportInformation;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["StorageConfiguration"].isNull())
			{
				bool *StorageConfiguration = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["StorageConfiguration"].asBool());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->StorageConfiguration = StorageConfiguration;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["MaxStorageConfigurations"].isNull())
			{
				int *MaxStorageConfigurations = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["MaxStorageConfigurations"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->MaxStorageConfigurations = MaxStorageConfigurations;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["GeoLocationEntries"].isNull())
			{
				int *GeoLocationEntries = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["GeoLocationEntries"].asInt());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->GeoLocationEntries = GeoLocationEntries;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["AutoGeo"].isNull())
			{
				std::string *AutoGeo = new std::string(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["AutoGeo"].asString());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->AutoGeo = AutoGeo;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["StorageTypesSupported"].isNull())
			{
				std::string *StorageTypesSupported = new std::string(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["System"]["StorageTypesSupported"].asString());
				tds__GetServiceCapabilitiesResponse.Capabilities->System->StorageTypesSupported = StorageTypesSupported;
			}
		}
	}



	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDeviceInformation */
int __tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformation *tds__GetDeviceInformation, _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDeviceInformation" << std::endl;
	
	int err = soap_verify(soap);
	if(err != SOAP_OK)
	{
		return err;
	}
	
	
	std::string dataResponse = R"({
									"GetDeviceInformationResponse": {
										"Manufacturer": "Elcom Techwin",
										"Model": "QNO-6010R",
										"FirmwareVersion": "1.04_171227",
										"SerialNumber": "ZGYS70GK400036X",
										"HardwareId": "QNO-6010R"
									}
								})";
    Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);

	Json::Value root_GetDeviceInformationResponse = root_dataResponse["GetDeviceInformationResponse"];
    std::string Manufacturer = root_GetDeviceInformationResponse["Manufacturer"].asString();
	std::string Model = root_GetDeviceInformationResponse["Model"].asString();
	std::string FirmwareVersion = root_GetDeviceInformationResponse["FirmwareVersion"].asString();
	std::string SerialNumber = root_GetDeviceInformationResponse["SerialNumber"].asString();
	std::string HardwareId = root_GetDeviceInformationResponse["HardwareId"].asString();
	
	tds__GetDeviceInformationResponse.Manufacturer = Manufacturer;
	tds__GetDeviceInformationResponse.Model = Model;
	tds__GetDeviceInformationResponse.FirmwareVersion = FirmwareVersion;
	tds__GetDeviceInformationResponse.SerialNumber = SerialNumber;
	tds__GetDeviceInformationResponse.HardwareId = HardwareId;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetSystemDateAndTime */
int __tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTime *tds__SetSystemDateAndTime, _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetSystemDateAndTime" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetSystemDateAndTime */
int __tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTime *tds__GetSystemDateAndTime, _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetSystemDateAndTime" << std::endl;

	std::string dataResponse = R"({
				"GetSystemDateAndTimeResponse": {
					"SystemDateAndTime": {
						"DateTimeType": "Manual",
						"DaylightSavings": false,
						"TimeZone": {
							"TZ": "STWT0STWST,M3.5.0/1,M10.5.0/2:0:0"
						},
						"UTCDateTime": {
							"Time": {
								"Hour": 7,
								"Minute": 27,
								"Second": 45
								},
							"Date": {
								"Year": 2021,
								"Month": 7,
								"Day": 5
								}
							}
						}
					}
				})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	Json::Value root_GetSystemDateAndTimeResponse = root_dataResponse["GetSystemDateAndTimeResponse"];
	Json::Value root_SystemDateAndTime = root_GetSystemDateAndTimeResponse["SystemDateAndTime"];
	std::string DateTimeType = root_SystemDateAndTime["DateTimeType"].asString();
	bool DaylightSavings = root_SystemDateAndTime["DaylightSavings"].asBool();
	Json::Value root_TimeZone = root_SystemDateAndTime["TimeZone"];
	std::string TZ = root_TimeZone["TZ"].asString();
	int Hour, Minute, Second, Year, Month, Day;
	if(!root_SystemDateAndTime["UTCDateTime"].isNull())
	{
		Json::Value root_UTCDateTime = root_SystemDateAndTime["UTCDateTime"];
		Json::Value root_Time = root_UTCDateTime["Time"];
		Hour = root_Time["Hour"].asInt();
		Minute = root_Time["Minute"].asInt();
		Second = root_Time["Second"].asInt();
		Json::Value root_Date = root_UTCDateTime["Date"];
		Year = root_Date["Year"].asInt();
		Month = root_Date["Month"].asInt();
		Day = root_Date["Day"].asInt();
	}
	if(!root_SystemDateAndTime["LocalDateTime"].isNull())
	{
		Json::Value root_LocalDateTime = root_SystemDateAndTime["LocalDateTime"];
		Json::Value root_Time = root_LocalDateTime["Time"];
		Hour = root_Time["Hour"].asInt();
		Minute = root_Time["Minute"].asInt();
		Second = root_Time["Second"].asInt();
		Json::Value root_Date = root_LocalDateTime["Date"];
		Year = root_Date["Year"].asInt();
		Month = root_Date["Month"].asInt();
		Day = root_Date["Day"].asInt();
	}
	
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime = soap_new_tt__SystemDateTime(soap);
	if(DateTimeType == "Manual")
	{
		tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DateTimeType = tt__SetDateTimeType__Manual;
	}
	else if(DateTimeType == "NTP")
	{
		tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DateTimeType = tt__SetDateTimeType__NTP;
	}
	if(DaylightSavings)
	{
		tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DaylightSavings = true;
	}
	else
	{
		tds__GetSystemDateAndTimeResponse.SystemDateAndTime->DaylightSavings = false;
	}
	
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->TimeZone = soap_new_tt__TimeZone(soap); 
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->TimeZone->TZ = TZ;
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime = soap_new_tt__DateTime(soap);
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Time = soap_new_tt__Time(soap);
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Time->Hour = Hour;
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Time->Minute = Minute;
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Time->Second = Second;
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Date = soap_new_tt__Date(soap);
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Date->Year = Year;
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Date->Month = Month;
	tds__GetSystemDateAndTimeResponse.SystemDateAndTime->UTCDateTime->Date->Day = Day;


	return SOAP_OK;
}


/** Auto-test server operation __tds__SetSystemFactoryDefault */
int __tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault, _tds__SetSystemFactoryDefaultResponse &tds__SetSystemFactoryDefaultResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetSystemFactoryDefault" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__UpgradeSystemFirmware */
int __tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware, _tds__UpgradeSystemFirmwareResponse &tds__UpgradeSystemFirmwareResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__UpgradeSystemFirmware" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SystemReboot */
int __tds__SystemReboot(struct soap *soap, _tds__SystemReboot *tds__SystemReboot, _tds__SystemRebootResponse &tds__SystemRebootResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SystemReboot" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__RestoreSystem */
int __tds__RestoreSystem(struct soap *soap, _tds__RestoreSystem *tds__RestoreSystem, _tds__RestoreSystemResponse &tds__RestoreSystemResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__RestoreSystem" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetSystemBackup */
int __tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackup *tds__GetSystemBackup, _tds__GetSystemBackupResponse &tds__GetSystemBackupResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetSystemBackup" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetSystemLog */
int __tds__GetSystemLog(struct soap *soap, _tds__GetSystemLog *tds__GetSystemLog, _tds__GetSystemLogResponse &tds__GetSystemLogResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetSystemLog" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetSystemSupportInformation */
int __tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformation *tds__GetSystemSupportInformation, _tds__GetSystemSupportInformationResponse &tds__GetSystemSupportInformationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetSystemSupportInformation" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetScopes */
int __tds__GetScopes(struct soap *soap, _tds__GetScopes *tds__GetScopes, _tds__GetScopesResponse &tds__GetScopesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetScopes" << std::endl;
	// if(soap_verify(soap) != SOAP_OK)
	// {
	// 	return soap_verify(soap);
	// }
	std::string dataResponse = R"({
							"GetScopesResponse": {
								"Scopes": [
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/type/video_encoder"
								},
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/type/Network_Video_Transmitter"
								},
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/type/audio_encoder"
								},
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/hardware/QNO-6010R"
								},
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/Profile/Streaming"
								},
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/Profile/G"
								},
								{
									"ScopeDef": "Fixed",
									"ScopeItem": "onvif://www.onvif.org/manufacturer/Hanwha%20Techwin"
								},
								{
									"ScopeDef": "Configurable",
									"ScopeItem": "onvif://www.onvif.org/location/city/hanoi"
								},
								{
									"ScopeDef": "Configurable",
									"ScopeItem": "onvif://www.onvif.org/location/city/hanoi"
								},
								{
									"ScopeDef": "Configurable",
									"ScopeItem": "onvif://www.onvif.org/name/QNO-6010R-TEST"
								}
								]
							}
							})";


	Json::Value root_dataResponse;
	Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	Json::Value root_GetScopesResponse = root_dataResponse["GetScopesResponse"];
	Json::Value arrayScopes = root_GetScopesResponse["Scopes"];
	for (unsigned int i=0; i<arrayScopes.size(); i++)
	{
		tds__GetScopesResponse.Scopes.push_back(soap_new_tt__Scope(soap));
		std::string ScopeDef = arrayScopes[i]["ScopeDef"].asString();
		std::string ScopeItem = arrayScopes[i]["ScopeItem"].asString();
		if(ScopeDef == "Fixed")
		{
			tds__GetScopesResponse.Scopes.back()->ScopeDef = tt__ScopeDefinition__Fixed;
		}
		else if(ScopeDef == "Configurable")
		{
			tds__GetScopesResponse.Scopes.back()->ScopeDef = tt__ScopeDefinition__Configurable;
		}
		tds__GetScopesResponse.Scopes.back()->ScopeItem = ScopeItem;
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetScopes */
int __tds__SetScopes(struct soap *soap, _tds__SetScopes *tds__SetScopes, _tds__SetScopesResponse &tds__SetScopesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetScopes" << std::endl;
	for(unsigned int i = 0; i < tds__SetScopes->Scopes.size(); i++)
	{
		std::cout << "__tds__SetScopes Scopes" << tds__SetScopes->Scopes[i] << std::endl;
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__AddScopes */
int __tds__AddScopes(struct soap *soap, _tds__AddScopes *tds__AddScopes, _tds__AddScopesResponse &tds__AddScopesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__AddScopes" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__RemoveScopes */
int __tds__RemoveScopes(struct soap *soap, _tds__RemoveScopes *tds__RemoveScopes, _tds__RemoveScopesResponse &tds__RemoveScopesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__RemoveScopes" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDiscoveryMode */
int __tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryMode *tds__GetDiscoveryMode, _tds__GetDiscoveryModeResponse &tds__GetDiscoveryModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDiscoveryMode" << std::endl;
	std::string dataResponse = R"({
			"GetDiscoveryModeResponse": {
				"DiscoveryMode": "Discoverable"
			}
		})";
	Json::Value root_dataResponse;
	Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	Json::Value root_GetDiscoveryModeResponse = root_dataResponse["GetDiscoveryModeResponse"];
	std::string DeviceDiscoveryMode = root_GetDiscoveryModeResponse["DiscoveryMode"].asString();
	if(DeviceDiscoveryMode == "Discoverable")
	{
		tds__GetDiscoveryModeResponse.DiscoveryMode = tt__DiscoveryMode__Discoverable;
	}
	else if(DeviceDiscoveryMode == "NonDiscoverable")
	{
		tds__GetDiscoveryModeResponse.DiscoveryMode = tt__DiscoveryMode__NonDiscoverable;
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetDiscoveryMode */
int __tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryMode *tds__SetDiscoveryMode, _tds__SetDiscoveryModeResponse &tds__SetDiscoveryModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetDiscoveryMode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetRemoteDiscoveryMode */
int __tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode, _tds__GetRemoteDiscoveryModeResponse &tds__GetRemoteDiscoveryModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetRemoteDiscoveryMode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetRemoteDiscoveryMode */
int __tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode, _tds__SetRemoteDiscoveryModeResponse &tds__SetRemoteDiscoveryModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetRemoteDiscoveryMode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDPAddresses */
int __tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddresses *tds__GetDPAddresses, _tds__GetDPAddressesResponse &tds__GetDPAddressesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDPAddresses" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetEndpointReference */
int __tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReference *tds__GetEndpointReference, _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetEndpointReference" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetRemoteUser */
int __tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUser *tds__GetRemoteUser, _tds__GetRemoteUserResponse &tds__GetRemoteUserResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetRemoteUser" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetRemoteUser */
int __tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUser *tds__SetRemoteUser, _tds__SetRemoteUserResponse &tds__SetRemoteUserResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetRemoteUser" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetUsers */
int __tds__GetUsers(struct soap *soap, _tds__GetUsers *tds__GetUsers, _tds__GetUsersResponse &tds__GetUsersResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetUsers" << std::endl;

	// static int count = 0;
	std::string dataResponse = R"({
					"GetUsersResponse": {
						"User": [
							{
								"Username": "admin",
								"Password": "elcom_123",
								"UserLevel": "Administrator"
							},

							{
								"Username": "ngoc",
								"Password": "ngoc_123",
								"UserLevel": "Administrator"
							},
							{
								"Username": "tuyet",
								"Password": "tuyet_123",
								"UserLevel": "User"
							}
						]
					}
				})";


	Json::Value root_dataResponse;
	Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	Json::Value root_GetUsersResponse = root_dataResponse["GetUsersResponse"];
	Json::Value arrayUser = root_GetUsersResponse["User"];
	for (unsigned int i=0; i<arrayUser.size(); i++)
	{
		tds__GetUsersResponse.User.push_back(soap_new_tt__User(soap));
		std::string Username = arrayUser[i]["Username"].asString();
		std::string UserLevel = arrayUser[i]["UserLevel"].asString();
		tds__GetUsersResponse.User.back()->Username = Username;
		if(UserLevel == "Administrator")
		{
			tds__GetUsersResponse.User.back()->UserLevel = tt__UserLevel__Administrator;
		}
		else if(UserLevel == "Operator")
		{
			tds__GetUsersResponse.User.back()->UserLevel = tt__UserLevel__Operator;
		}
		else if(UserLevel == "User")
		{
			tds__GetUsersResponse.User.back()->UserLevel = tt__UserLevel__User;
		}
		else if(UserLevel == "Anonymous")
		{
			tds__GetUsersResponse.User.back()->UserLevel = tt__UserLevel__Anonymous;
		}
		else if(UserLevel == "Extended")
		{
			tds__GetUsersResponse.User.back()->UserLevel = tt__UserLevel__Extended;
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__CreateUsers */
int __tds__CreateUsers(struct soap *soap, _tds__CreateUsers *tds__CreateUsers, _tds__CreateUsersResponse &tds__CreateUsersResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__CreateUsers" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__DeleteUsers */
int __tds__DeleteUsers(struct soap *soap, _tds__DeleteUsers *tds__DeleteUsers, _tds__DeleteUsersResponse &tds__DeleteUsersResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__DeleteUsers" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetUser */
int __tds__SetUser(struct soap *soap, _tds__SetUser *tds__SetUser, _tds__SetUserResponse &tds__SetUserResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetUser" << std::endl;
	std::cout << "__tds__SetUser Username: " << tds__SetUser->User.back()->Username << std::endl;
	std::cout << "__tds__SetUser Password: " << tds__SetUser->User.back()->Password << std::endl;
	std::cout << "__tds__SetUser UserLevel: " << tds__SetUser->User.back()->UserLevel << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetWsdlUrl */
int __tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrl *tds__GetWsdlUrl, _tds__GetWsdlUrlResponse &tds__GetWsdlUrlResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetWsdlUrl" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetCapabilities */
int __tds__GetCapabilities(struct soap *soap, _tds__GetCapabilities *tds__GetCapabilities, _tds__GetCapabilitiesResponse &tds__GetCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetCapabilities" << std::endl;
	// std::cout << "Request of camera id: " << id_camera << std::endl;

	std::string dataResponse = R"({
			"GetCapabilitiesResponse": {
				"Capabilities": {
					"Device": {
						"XAddr": "http://192.168.51.150/onvif/device_service",
						"Network": {
							"IPFilter": true,
							"ZeroConfiguration": true,
							"IPVersion6": true,
							"DynDNS": true
						},
						"System": {
							"DiscoveryResolve": true,
							"DiscoveryBye": true,
							"RemoteDiscovery": false,
							"SystemBackup": false,
							"SystemLogging": true,
							"FirmwareUpgrade": false,
							"SupportedVersions": {
								"Major": 17,
								"Minor": 6
							}
						},
						"IO": {
							"InputConnectors": 1,
							"RelayOutputs": 1
						},
						"Security": {
							"TLS1.1": true,
							"TLS1.2": false,
							"OnboardKeyGeneration": false,
							"AccessPolicyConfig": false,
							"X.509Token": false,
							"SAMLToken": false,
							"KerberosToken": false,
							"RELToken": false
						}
					},
					"Events": {
						"XAddr": "http://192.168.51.150/onvif/event_service",
						"WSSubscriptionPolicySupport": true,
						"WSPullPointSupport": true,
						"WSPausableSubscriptionManagerInterfaceSupport": false
					},
					"Imaging": {
						"XAddr": "http://192.168.51.150/onvif/imaging_service"
					},
					"Media": {
						"XAddr": "http://192.168.51.150/onvif/media_service",
						"StreamingCapabilities": {
							"RTPMulticast": true,
							"RTP_TCP": true,
							"RTP_RTSP_TCP": true
						},
						"Extension": {
							"ProfileCapabilities": {
								"MaximumNumberOfProfiles": 10
							}
						}
					},
					"Extension": {
						"DeviceIO": {
							"XAddr": "http://192.168.51.150/onvif/deviceio_service",
							"VideoSources": 1,
							"VideoOutputs": 1,
							"AudioSources": 1,
							"AudioOutputs": 1,
							"RelayOutputs": 1
						},
						"Recording": {
							"XAddr": "http://192.168.51.150/onvif/recording_service",
							"ReceiverSource": false,
							"MediaProfileSource": true,
							"DynamicRecordings": false,
							"DynamicTracks": false,
							"MaxStringLength": 0
						},
						"Search": {
							"XAddr": "http://192.168.51.150/onvif/search_service",
							"MetadataSearch": false
						},
						"Replay": {
							"XAddr": "http://192.168.51.150/onvif/replay_service"
						}
					}
				}
			}
		})";



	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);

	if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"].isNull())
	{
		tds__GetCapabilitiesResponse.Capabilities = soap_new_tt__Capabilities(soap);
	}
	std::vector<tt__CapabilityCategory>& categories(tds__GetCapabilities->Category);
	if (categories.empty())
	{
		categories.push_back(tt__CapabilityCategory__All);
	}
	for (tt__CapabilityCategory category : categories)
	{
		if(!tds__GetCapabilitiesResponse.Capabilities->Analytics && (category == tt__CapabilityCategory__All || category == tt__CapabilityCategory__Analytics)){
			if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"].isNull()){
				tds__GetCapabilitiesResponse.Capabilities->Analytics = soap_new_tt__AnalyticsCapabilities(soap);
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"]["XAddr"].isNull())
				{
					std::string AnalyticsXAddr = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"]["XAddr"].asString();
					tds__GetCapabilitiesResponse.Capabilities->Analytics->XAddr = AnalyticsXAddr;
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"]["RuleSupport"].isNull())
				{
					bool AnalyticsRuleSupport = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"]["RuleSupport"].asBool();
					tds__GetCapabilitiesResponse.Capabilities->Analytics->RuleSupport = AnalyticsRuleSupport;
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"]["AnalyticsModuleSupport"].isNull())
				{
					bool AnalyticsModuleSupport = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Analytics"]["AnalyticsModuleSupport"].asBool();
					tds__GetCapabilitiesResponse.Capabilities->Analytics->AnalyticsModuleSupport = AnalyticsModuleSupport;
				}
			}
		}
		if(!tds__GetCapabilitiesResponse.Capabilities->Device && (category == tt__CapabilityCategory__All || category == tt__CapabilityCategory__Device))
		{
			if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"].isNull())
			{
				tds__GetCapabilitiesResponse.Capabilities->Device = soap_new_tt__DeviceCapabilities(soap);
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["XAddr"].isNull())
				{
					tds__GetCapabilitiesResponse.Capabilities->Device = soap_new_tt__DeviceCapabilities(soap);
					std::string DeviceXAddr = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["XAddr"].asString();
					tds__GetCapabilitiesResponse.Capabilities->Device->XAddr = DeviceXAddr;
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"].isNull())
				{
					tds__GetCapabilitiesResponse.Capabilities->Device->Network = soap_new_tt__NetworkCapabilities(soap);
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["IPFilter"].isNull())
					{
						bool *DeviceIPFilter = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["IPFilter"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->Network->IPFilter = DeviceIPFilter;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["ZeroConfiguration"].isNull())
					{
						bool *DeviceZeroConfiguration = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["ZeroConfiguration"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->Network->ZeroConfiguration = DeviceZeroConfiguration;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["IPVersion6"].isNull())
					{
						bool *DeviceIPVersion6 = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["IPVersion6"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->Network->IPVersion6 = DeviceIPVersion6;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["DynDNS"].isNull())
					{
						bool *DeviceDynDNS = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Network"]["DynDNS"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->Network->DynDNS = DeviceDynDNS;
					}
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"].isNull())
				{
					tds__GetCapabilitiesResponse.Capabilities->Device->System = soap_new_tt__SystemCapabilities(soap);
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["DiscoveryResolve"].isNull())
					{
						bool *DeviceDiscoveryResolve = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["DiscoveryResolve"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->System->DiscoveryResolve = DeviceDiscoveryResolve;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["DiscoveryBye"].isNull())
					{
						bool *DeviceDiscoveryBye = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["DiscoveryBye"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->System->DiscoveryBye = DeviceDiscoveryBye;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["RemoteDiscovery"].isNull())
					{
						bool DeviceRemoteDiscovery = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["RemoteDiscovery"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->System->RemoteDiscovery = DeviceRemoteDiscovery;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SystemBackup"].isNull())
					{
						bool *DeviceSystemBackup = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SystemBackup"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->System->SystemBackup = DeviceSystemBackup;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SystemLogging"].isNull())
					{
						bool *DeviceSystemLogging = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SystemLogging"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->System->SystemLogging = DeviceSystemLogging;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["FirmwareUpgrade"].isNull())
					{
						bool *DeviceFirmwareUpgrade = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["FirmwareUpgrade"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->System->FirmwareUpgrade = DeviceFirmwareUpgrade;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SupportedVersions"].isNull())
					{
						tds__GetCapabilitiesResponse.Capabilities->Device->System->SupportedVersions.push_back(soap_new_tt__OnvifVersion(soap));
						int DeviceMajor = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SupportedVersions"]["Major"].asInt();
						int DeviceMinor = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["System"]["SupportedVersions"]["Minor"].asInt();
						tds__GetCapabilitiesResponse.Capabilities->Device->System->SupportedVersions.back()->Major = DeviceMajor;
						tds__GetCapabilitiesResponse.Capabilities->Device->System->SupportedVersions.back()->Minor = DeviceMinor;
					}
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["IO"].isNull())
				{
					tds__GetCapabilitiesResponse.Capabilities->Device->IO = soap_new_tt__IOCapabilities(soap);
					int *DeviceInputConnectors = new int(root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["IO"]["InputConnectors"].asInt());
					int *DeviceRelayOutputs = new int(root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["IO"]["RelayOutputs"].asInt());
					tds__GetCapabilitiesResponse.Capabilities->Device->IO->InputConnectors = DeviceInputConnectors;
					tds__GetCapabilitiesResponse.Capabilities->Device->IO->RelayOutputs = DeviceRelayOutputs;
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["IO"]["Extension"].isNull())
					{
						tds__GetCapabilitiesResponse.Capabilities->Device->IO->Extension = soap_new_tt__IOCapabilitiesExtension(soap);
						bool *DeviceAuxiliary = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["IO"]["Extension"]["Auxiliary"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Device->IO->Extension->Auxiliary = DeviceAuxiliary;
					}
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"].isNull())
				{
					tds__GetCapabilitiesResponse.Capabilities->Device->Security = soap_new_tt__SecurityCapabilities(soap);
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["TLS1.1"].isNull())
					{
						bool DeviceTLS1_1 = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["TLS1.1"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->TLS1_x002e1 = DeviceTLS1_1;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["TLS1.2"].isNull())
					{
						bool DeviceTLS1_2 = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["TLS1.2"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->TLS1_x002e2 = DeviceTLS1_2;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["OnboardKeyGeneration"].isNull())
					{
						bool DeviceOnboardKeyGeneration = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["OnboardKeyGeneration"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->OnboardKeyGeneration = DeviceOnboardKeyGeneration;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["AccessPolicyConfig"].isNull())
					{
						bool DeviceAccessPolicyConfig = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["AccessPolicyConfig"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->AccessPolicyConfig = DeviceAccessPolicyConfig;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["X.509Token"].isNull())
					{
						bool DeviceX_x002e509Token = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["X.509Token"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->X_x002e509Token = DeviceX_x002e509Token;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["SAMLToken"].isNull())
					{
						bool DeviceSAMLToken = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["SAMLToken"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->SAMLToken = DeviceSAMLToken;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["KerberosToken"].isNull())
					{
						bool DeviceKerberosToken = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["KerberosToken"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->KerberosToken = DeviceKerberosToken;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["RELToken"].isNull())
					{
						bool DeviceRELToken = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Device"]["Security"]["RELToken"].asBool();
						tds__GetCapabilitiesResponse.Capabilities->Device->Security->RELToken = DeviceRELToken;
					}
				}
			}
		}
		if(!tds__GetCapabilitiesResponse.Capabilities->Media && (category == tt__CapabilityCategory__All || category == tt__CapabilityCategory__Media)){
			if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"].isNull()){
				tds__GetCapabilitiesResponse.Capabilities->Media = soap_new_tt__MediaCapabilities(soap);
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["XAddr"].isNull())
				{
					std::string MediaXAddr = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["XAddr"].asString();
					tds__GetCapabilitiesResponse.Capabilities->Media->XAddr = MediaXAddr;
				}
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"].isNull())
				{
					tds__GetCapabilitiesResponse.Capabilities->Media->StreamingCapabilities = soap_new_tt__RealTimeStreamingCapabilities(soap);
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"]["RTPMulticast"].isNull())
					{
						bool *MediaRTPMulticast = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"]["RTPMulticast"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Media->StreamingCapabilities->RTPMulticast = MediaRTPMulticast;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"]["RTP_TCP"].isNull())
					{
						bool *MediaRTP_TCP = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"]["RTP_TCP"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Media->StreamingCapabilities->RTP_USCORETCP = MediaRTP_TCP;
					}
					if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"]["RTP_RTSP_TCP"].isNull())
					{
						bool *MediaRTP_RTSP_TCP = new bool (root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Media"]["StreamingCapabilities"]["RTP_RTSP_TCP"].asBool());
						tds__GetCapabilitiesResponse.Capabilities->Media->StreamingCapabilities->RTP_USCORERTSP_USCORETCP = MediaRTP_RTSP_TCP;
					}
				}
			}
		}

		if(!tds__GetCapabilitiesResponse.Capabilities->Imaging && (category == tt__CapabilityCategory__All || category == tt__CapabilityCategory__Imaging))
		{
			if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Imaging"].isNull()){
				tds__GetCapabilitiesResponse.Capabilities->Imaging = soap_new_tt__ImagingCapabilities(soap);
				if(!root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Imaging"]["XAddr"].isNull())
				{
					std::string ImagingXAddr = root_dataResponse["GetCapabilitiesResponse"]["Capabilities"]["Imaging"]["XAddr"].asString();
					tds__GetCapabilitiesResponse.Capabilities->Imaging->XAddr = ImagingXAddr;
				}
			}
		}

	}

	return SOAP_OK;
}


/** Auto-test server operation __tds__SetDPAddresses */
int __tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddresses *tds__SetDPAddresses, _tds__SetDPAddressesResponse &tds__SetDPAddressesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetDPAddresses" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetHostname */
int __tds__GetHostname(struct soap *soap, _tds__GetHostname *tds__GetHostname, _tds__GetHostnameResponse &tds__GetHostnameResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetHostname" << std::endl;

	std::string dataResponse = R"({
									"GetHostnameResponse": {
										"HostnameInformation": {
											"FromDHCP": false,
											"Name": "QNO-6010R"
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	tds__GetHostnameResponse.HostnameInformation = soap_new_tt__HostnameInformation(soap);
	if(!root_dataResponse["GetHostnameResponse"]["HostnameInformation"]["FromDHCP"].isNull())
	{
		bool DevcieFromDHCP = root_dataResponse["GetHostnameResponse"]["HostnameInformation"]["FromDHCP"].asBool();
		tds__GetHostnameResponse.HostnameInformation->FromDHCP = DevcieFromDHCP;
	}
	if(!root_dataResponse["GetHostnameResponse"]["HostnameInformation"]["Name"].isNull())
	{
		std::string *DevcieName = new std::string(root_dataResponse["GetHostnameResponse"]["HostnameInformation"]["Name"].asString());
		tds__GetHostnameResponse.HostnameInformation->Name = DevcieName;
	}

	return SOAP_OK;
}


/** Auto-test server operation __tds__SetHostname */
int __tds__SetHostname(struct soap *soap, _tds__SetHostname *tds__SetHostname, _tds__SetHostnameResponse &tds__SetHostnameResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetHostname" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetHostnameFromDHCP */
int __tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP, _tds__SetHostnameFromDHCPResponse &tds__SetHostnameFromDHCPResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetHostnameFromDHCP" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDNS */
int __tds__GetDNS(struct soap *soap, _tds__GetDNS *tds__GetDNS, _tds__GetDNSResponse &tds__GetDNSResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDNS" << std::endl;
	std::string dataResponse = R"({
									"GetDNSResponse": {
										"DNSInformation": {
											"FromDHCP": false,
											"DNSManual": [
												{
													"Type": "IPv4",
													"IPv4Address": "168.126.63.1"
												},
												{
													"Type": "IPv4",
													"IPv4Address": "168.126.63.2"
												}
											]
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);

	tds__GetDNSResponse.DNSInformation = soap_new_tt__DNSInformation(soap);
	if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["FromDHCP"].isNull())
	{
		tds__GetDNSResponse.DNSInformation->FromDHCP = root_dataResponse["GetDNSResponse"]["DNSInformation"]["FromDHCP"].asBool();
	}
	if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["SearchDomain"].isNull())
	{
		// tds__GetDNSResponse.DNSInformation->SearchDomain = root_dataResponse["GetDNSResponse"]["DNSInformation"]["SearchDomain"].asString();
	}
	if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"].isNull())
	{
		Json::Value arrayDNSFromDHCP = root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"];
		for (unsigned int i=0; i<arrayDNSFromDHCP.size(); i++)
		{
			tds__GetDNSResponse.DNSInformation->DNSFromDHCP.push_back(soap_new_tt__IPAddress(soap));
			if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["Type"].isNull())
			{
				if(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["Type"].asString() == "IPv4")
				{
					tds__GetDNSResponse.DNSInformation->DNSFromDHCP.back()->Type = tt__IPType__IPv4;
				}
				if(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["Type"].asString() == "IPv6")
				{
					tds__GetDNSResponse.DNSInformation->DNSFromDHCP.back()->Type = tt__IPType__IPv6;
				}
			}
			if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["IPv4Address"].isNull())
			{
				std::string *DeviceIPv4Address = new std::string(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["IPv4Address"].asString());
				tds__GetDNSResponse.DNSInformation->DNSFromDHCP.back()->IPv4Address = DeviceIPv4Address;
			}
			if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["IPv6Address"].isNull())
			{
				std::string *DeviceIPv6Address = new std::string(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSFromDHCP"][i]["IPv6Address"].asString());
				tds__GetDNSResponse.DNSInformation->DNSFromDHCP.back()->IPv6Address = DeviceIPv6Address;
			}
		}
	}
	if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"].isNull())
	{
		Json::Value arrayDNSManual = root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"];
		for (unsigned int i=0; i<arrayDNSManual.size(); i++)
		{
			tds__GetDNSResponse.DNSInformation->DNSManual.push_back(soap_new_tt__IPAddress(soap));
			if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["Type"].isNull())
			{
				if(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["Type"].asString() == "IPv4")
				{
					tds__GetDNSResponse.DNSInformation->DNSManual.back()->Type = tt__IPType__IPv4;
				}
				if(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["Type"].asString() == "IPv6")
				{
					tds__GetDNSResponse.DNSInformation->DNSManual.back()->Type = tt__IPType__IPv6;
				}
			}
			if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["IPv4Address"].isNull())
			{
				std::string *DeviceIPv4Address = new std::string(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["IPv4Address"].asString());
				tds__GetDNSResponse.DNSInformation->DNSManual.back()->IPv4Address = DeviceIPv4Address;
			}
			if(!root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["IPv6Address"].isNull())
			{
				std::string *DeviceIPv6Address = new std::string(root_dataResponse["GetDNSResponse"]["DNSInformation"]["DNSManual"][i]["IPv6Address"].asString());
				tds__GetDNSResponse.DNSInformation->DNSManual.back()->IPv6Address = DeviceIPv6Address;
			}
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetDNS */
int __tds__SetDNS(struct soap *soap, _tds__SetDNS *tds__SetDNS, _tds__SetDNSResponse &tds__SetDNSResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetDNS" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetNTP */
int __tds__GetNTP(struct soap *soap, _tds__GetNTP *tds__GetNTP, _tds__GetNTPResponse &tds__GetNTPResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetNTP" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetNTP */
int __tds__SetNTP(struct soap *soap, _tds__SetNTP *tds__SetNTP, _tds__SetNTPResponse &tds__SetNTPResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetNTP" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDynamicDNS */
int __tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNS *tds__GetDynamicDNS, _tds__GetDynamicDNSResponse &tds__GetDynamicDNSResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDynamicDNS" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetDynamicDNS */
int __tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNS *tds__SetDynamicDNS, _tds__SetDynamicDNSResponse &tds__SetDynamicDNSResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetDynamicDNS" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetNetworkInterfaces */
int __tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfaces *tds__GetNetworkInterfaces, _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetNetworkInterfaces" << std::endl;
	std::string dataResponse = R"({
									"GetNetworkInterfacesResponse": {
										"NetworkInterfaces": [{
											"Enabled": true,
											"Info": {
												"HwAddress": "00:09:18:56:73:EB"
											},
											"IPv4": {
												"Enabled": true,
												"Config": {
													"Manual": [{
														"Address": "192.168.168.133",
														"PrefixLength": 24
													}],
													"LinkLocal": {
														"Address": "169.254.8.159",
														"PrefixLength": 16
													},
													"FromDHCP": {
														"Address": "192.168.51.150",
														"PrefixLength": 24
													},
													"DHCP": false
												}
											},
											"IPv6": {
												"Enabled": false,
												"Config": {
													"AcceptRouterAdvert": false,
													"DHCP": "Stateless",
													"Manual": [{
														"Address": "",
														"PrefixLength": 0
													}],
													"LinkLocal": [{
														"Address": "",
														"PrefixLength": 0
													}],
													"FromDHCP": [{
														"Address": "",
														"PrefixLength": 0
													}],
													"FromRA": [{
														"Address": "",
														"PrefixLength": 0
													}]
												}
											}
										}]
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);

	if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"].isNull())
	{
		Json::Value arrayNetworkInterfaces = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"];
		for (unsigned int i=0; i<arrayNetworkInterfaces.size(); i++)
		{
			tds__GetNetworkInterfacesResponse.NetworkInterfaces.push_back(soap_new_tt__NetworkInterface(soap));
			if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["token"].isNull())
			{
				std::string DeviceGetNetworkInterfacestoken = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["token"].asString();
				tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->token = DeviceGetNetworkInterfacestoken;
			}
			if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Enabled"].isNull())
			{
				bool DeviceNetworkInterfacesEnabled = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Enabled"].asBool();
				tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->Enabled = DeviceNetworkInterfacesEnabled;
			}
			if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"].isNull())
			{
				tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->Info = soap_new_tt__NetworkInterfaceInfo(soap);
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"]["Name"].isNull())
				{
					std::string *DeviceNetworkInterfacesName = new std::string(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"]["Name"].asString());
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->Info->Name = DeviceNetworkInterfacesName;
				}
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"]["HwAddress"].isNull())
				{
					std::string DeviceNetworkInterfacesHwAddress = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"]["HwAddress"].asString();
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->Info->HwAddress = DeviceNetworkInterfacesHwAddress;
				}
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"]["MTU"].isNull())
				{
					int *DeviceNetworkInterfacesMTU = new int(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["Info"]["MTU"].asInt());
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->Info->MTU = DeviceNetworkInterfacesMTU;
				}
			}
			if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"].isNull())
			{
				tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4 = soap_new_tt__IPv4NetworkInterface(soap);
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Enabled"].isNull()){
					bool DeviceIPv4Enabled = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Enabled"].asBool();
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Enabled = DeviceIPv4Enabled;
				}
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"].isNull()){
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config = soap_new_tt__IPv4Configuration(soap);
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["Manual"].isNull())
					{
						Json::Value arrayIPv4Manual = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["Manual"];
						for (unsigned int j=0; j<arrayIPv4Manual.size(); j++)
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->Manual.push_back(soap_new_tt__PrefixedIPv4Address(soap));
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["Manual"][j]["Address"].isNull())
							{
								std::string DeviceIPv4Address = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["Manual"][j]["Address"].asString();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->Manual.back()->Address = DeviceIPv4Address;
							}
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["Manual"][j]["PrefixLength"].isNull())
							{
								int DeviceIPv4PrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["Manual"][j]["PrefixLength"].asInt();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->Manual.back()->PrefixLength = DeviceIPv4PrefixLength;
							}
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["LinkLocal"].isNull())
					{
						tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->LinkLocal = soap_new_tt__PrefixedIPv4Address(soap);
						if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["LinkLocal"]["Address"].isNull())
						{
							std::string IPv4LinkLocalAddress = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["LinkLocal"]["Address"].asString();
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->LinkLocal->Address = IPv4LinkLocalAddress;
						}
						if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["LinkLocal"]["PrefixLength"].isNull())
						{
							int IPv4LinkLocalPrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["LinkLocal"]["PrefixLength"].asInt();
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->LinkLocal->PrefixLength = IPv4LinkLocalPrefixLength;
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["FromDHCP"].isNull())
					{
						tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->FromDHCP = soap_new_tt__PrefixedIPv4Address(soap);
						if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["FromDHCP"]["Address"].isNull())
						{
							std::string IPv4FromDHCPAddress = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["FromDHCP"]["Address"].asString();
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->FromDHCP->Address = IPv4FromDHCPAddress;
						}
						if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["FromDHCP"]["PrefixLength"].isNull())
						{
							int IPv4FromDHCPPrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["FromDHCP"]["PrefixLength"].asInt();
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->FromDHCP->PrefixLength = IPv4FromDHCPPrefixLength;
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["DHCP"].isNull())
					{
						bool IPv4DHCP = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv4"]["Config"]["DHCP"].asBool();
						tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv4->Config->DHCP = IPv4DHCP;
					}
				}
			}
			if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"].isNull())
			{
				tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6 = soap_new_tt__IPv6NetworkInterface(soap);
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Enabled"].isNull()){
					bool DeviceIPv6Enabled = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Enabled"].asBool();
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Enabled = DeviceIPv6Enabled;
				}
				if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"].isNull()){
					tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config = soap_new_tt__IPv6Configuration(soap);
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["AcceptRouterAdvert"].isNull())
					{
						bool *IPv6AcceptRouterAdvert = new bool(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["AcceptRouterAdvert"].asBool());
						tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->AcceptRouterAdvert = IPv6AcceptRouterAdvert;
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["DHCP"].isNull())
					{
						if(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["DHCP"].asString() == "Auto")
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->DHCP = tt__IPv6DHCPConfiguration__Auto;
						}
						if(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["DHCP"].asString() == "Stateful")
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->DHCP = tt__IPv6DHCPConfiguration__Stateful;
						}
						if(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["DHCP"].asString() == "Stateless")
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->DHCP = tt__IPv6DHCPConfiguration__Stateless;
						}
						if(root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["DHCP"].asString() == "Off")
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->DHCP = tt__IPv6DHCPConfiguration__Off;
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["Manual"].isNull())
					{
						Json::Value arrayIPv6Manual = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["Manual"];
						for (unsigned int j=0; j<arrayIPv6Manual.size(); j++)
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->Manual.push_back(soap_new_tt__PrefixedIPv6Address(soap));
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["Manual"][j]["Address"].isNull())
							{
								std::string DeviceIPv6Address = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["Manual"][j]["Address"].asString();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->Manual.back()->Address = DeviceIPv6Address;
							}
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["Manual"][j]["PrefixLength"].isNull())
							{
								int DeviceIPv6PrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["Manual"][j]["PrefixLength"].asInt();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->Manual.back()->PrefixLength = DeviceIPv6PrefixLength;
							}
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["LinkLocal"].isNull())
					{
						Json::Value arrayIPv6LinkLocal = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["LinkLocal"];
						for (unsigned int j=0; j<arrayIPv6LinkLocal.size(); j++)
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->LinkLocal.push_back(soap_new_tt__PrefixedIPv6Address(soap));
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["LinkLocal"][j]["Address"].isNull())
							{
								std::string DeviceIPv6Address = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["LinkLocal"][j]["Address"].asString();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->LinkLocal.back()->Address = DeviceIPv6Address;
							}
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["LinkLocal"][j]["PrefixLength"].isNull())
							{
								int DeviceIPv6PrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["LinkLocal"][j]["PrefixLength"].asInt();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->LinkLocal.back()->PrefixLength = DeviceIPv6PrefixLength;
							}
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromDHCP"].isNull())
					{
						Json::Value arrayIPv6FromDHCP = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromDHCP"];
						for (unsigned int j=0; j<arrayIPv6FromDHCP.size(); j++)
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->FromDHCP.push_back(soap_new_tt__PrefixedIPv6Address(soap));
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromDHCP"][j]["Address"].isNull())
							{
								std::string DeviceIPv6Address = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromDHCP"][j]["Address"].asString();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->FromDHCP.back()->Address = DeviceIPv6Address;
							}
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromDHCP"][j]["PrefixLength"].isNull())
							{
								int DeviceIPv6PrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromDHCP"][j]["PrefixLength"].asInt();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->FromDHCP.back()->PrefixLength = DeviceIPv6PrefixLength;
							}
						}
					}
					if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromRA"].isNull())
					{
						Json::Value arrayIPv6FromRA = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromRA"];
						for (unsigned int j=0; j<arrayIPv6FromRA.size(); j++)
						{
							tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->FromRA.push_back(soap_new_tt__PrefixedIPv6Address(soap));
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromRA"][j]["Address"].isNull())
							{
								std::string DeviceIPv6Address = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromRA"][j]["Address"].asString();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->FromRA.back()->Address = DeviceIPv6Address;
							}
							if(!root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromRA"][j]["PrefixLength"].isNull())
							{
								int DeviceIPv6PrefixLength = root_dataResponse["GetNetworkInterfacesResponse"]["NetworkInterfaces"][i]["IPv6"]["Config"]["FromRA"][j]["PrefixLength"].asInt();
								tds__GetNetworkInterfacesResponse.NetworkInterfaces.back()->IPv6->Config->FromRA.back()->PrefixLength = DeviceIPv6PrefixLength;
							}
						}
					}
					

				}
			}
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetNetworkInterfaces */
int __tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfaces *tds__SetNetworkInterfaces, _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetNetworkInterfaces" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetNetworkProtocols */
int __tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocols *tds__GetNetworkProtocols, _tds__GetNetworkProtocolsResponse &tds__GetNetworkProtocolsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetNetworkProtocols" << std::endl;
	std::string dataResponse = R"({
									"GetNetworkProtocolsResponse": {
										"NetworkProtocols": [
											{
												"Name": "HTTP",
												"Enabled": true,
												"Port": 80
											},
											{
												"Name": "HTTPS",
												"Enabled": false,
												"Port": 443
											},
											{
												"Name": "RTSP",
												"Enabled": true,
												"Port": 554
											}
										]
									}
								})";
	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"].isNull())
	{
		Json::Value arrayNetworkProtocols = root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"];
		for(unsigned int i = 0; i <arrayNetworkProtocols.size(); i++)
		{
			tds__GetNetworkProtocolsResponse.NetworkProtocols.push_back(soap_new_tt__NetworkProtocol(soap));
			if(!root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Name"].isNull())
			{
				if(root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Name"].asString() == "HTTP")
				{
					tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Name = tt__NetworkProtocolType__HTTP;
				}
				if(root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Name"].asString() == "HTTPS")
				{
					tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Name = tt__NetworkProtocolType__HTTPS;
				}
				if(root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Name"].asString() == "RTSP")
				{
					tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Name = tt__NetworkProtocolType__RTSP;
				}
			}
			if(!root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Enabled"].isNull())
			{
				bool NetworkProtocolsEnabled = root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Enabled"].asBool();
				tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Enabled = NetworkProtocolsEnabled;
			}
			if(!root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Port"].isNull())
			{
				int NetworkProtocolsPort = root_dataResponse["GetNetworkProtocolsResponse"]["NetworkProtocols"][i]["Port"].asInt();
				tds__GetNetworkProtocolsResponse.NetworkProtocols.back()->Port.push_back(NetworkProtocolsPort);
			}
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetNetworkProtocols */
int __tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocols *tds__SetNetworkProtocols, _tds__SetNetworkProtocolsResponse &tds__SetNetworkProtocolsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetNetworkProtocols" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetNetworkDefaultGateway */
int __tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway, _tds__GetNetworkDefaultGatewayResponse &tds__GetNetworkDefaultGatewayResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetNetworkDefaultGateway" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetNetworkDefaultGateway */
int __tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway, _tds__SetNetworkDefaultGatewayResponse &tds__SetNetworkDefaultGatewayResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetNetworkDefaultGateway" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetZeroConfiguration */
int __tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfiguration *tds__GetZeroConfiguration, _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetZeroConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetZeroConfiguration */
int __tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfiguration *tds__SetZeroConfiguration, _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetZeroConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetIPAddressFilter */
int __tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilter *tds__GetIPAddressFilter, _tds__GetIPAddressFilterResponse &tds__GetIPAddressFilterResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetIPAddressFilter" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetIPAddressFilter */
int __tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilter *tds__SetIPAddressFilter, _tds__SetIPAddressFilterResponse &tds__SetIPAddressFilterResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetIPAddressFilter" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__AddIPAddressFilter */
int __tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilter *tds__AddIPAddressFilter, _tds__AddIPAddressFilterResponse &tds__AddIPAddressFilterResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__AddIPAddressFilter" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__RemoveIPAddressFilter */
int __tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter, _tds__RemoveIPAddressFilterResponse &tds__RemoveIPAddressFilterResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__RemoveIPAddressFilter" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetAccessPolicy */
int __tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicy *tds__GetAccessPolicy, _tds__GetAccessPolicyResponse &tds__GetAccessPolicyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetAccessPolicy" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetAccessPolicy */
int __tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicy *tds__SetAccessPolicy, _tds__SetAccessPolicyResponse &tds__SetAccessPolicyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetAccessPolicy" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__CreateCertificate */
int __tds__CreateCertificate(struct soap *soap, _tds__CreateCertificate *tds__CreateCertificate, _tds__CreateCertificateResponse &tds__CreateCertificateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__CreateCertificate" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetCertificates */
int __tds__GetCertificates(struct soap *soap, _tds__GetCertificates *tds__GetCertificates, _tds__GetCertificatesResponse &tds__GetCertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetCertificates" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetCertificatesStatus */
int __tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatus *tds__GetCertificatesStatus, _tds__GetCertificatesStatusResponse &tds__GetCertificatesStatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetCertificatesStatus" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetCertificatesStatus */
int __tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatus *tds__SetCertificatesStatus, _tds__SetCertificatesStatusResponse &tds__SetCertificatesStatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetCertificatesStatus" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__DeleteCertificates */
int __tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificates *tds__DeleteCertificates, _tds__DeleteCertificatesResponse &tds__DeleteCertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__DeleteCertificates" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetPkcs10Request */
int __tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10Request *tds__GetPkcs10Request, _tds__GetPkcs10RequestResponse &tds__GetPkcs10RequestResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetPkcs10Request" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__LoadCertificates */
int __tds__LoadCertificates(struct soap *soap, _tds__LoadCertificates *tds__LoadCertificates, _tds__LoadCertificatesResponse &tds__LoadCertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__LoadCertificates" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetClientCertificateMode */
int __tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateMode *tds__GetClientCertificateMode, _tds__GetClientCertificateModeResponse &tds__GetClientCertificateModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetClientCertificateMode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetClientCertificateMode */
int __tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateMode *tds__SetClientCertificateMode, _tds__SetClientCertificateModeResponse &tds__SetClientCertificateModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetClientCertificateMode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetRelayOutputs */
int __tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs *tds__GetRelayOutputs, _tds__GetRelayOutputsResponse &tds__GetRelayOutputsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetRelayOutputs" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetRelayOutputSettings */
int __tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettings *tds__SetRelayOutputSettings, _tds__SetRelayOutputSettingsResponse &tds__SetRelayOutputSettingsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetRelayOutputSettings" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetRelayOutputState */
int __tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState *tds__SetRelayOutputState, _tds__SetRelayOutputStateResponse &tds__SetRelayOutputStateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetRelayOutputState" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SendAuxiliaryCommand */
int __tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand, _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetCACertificates */
int __tds__GetCACertificates(struct soap *soap, _tds__GetCACertificates *tds__GetCACertificates, _tds__GetCACertificatesResponse &tds__GetCACertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetCACertificates" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__LoadCertificateWithPrivateKey */
int __tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey, _tds__LoadCertificateWithPrivateKeyResponse &tds__LoadCertificateWithPrivateKeyResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__LoadCertificateWithPrivateKey" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetCertificateInformation */
int __tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformation *tds__GetCertificateInformation, _tds__GetCertificateInformationResponse &tds__GetCertificateInformationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetCertificateInformation" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__LoadCACertificates */
int __tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificates *tds__LoadCACertificates, _tds__LoadCACertificatesResponse &tds__LoadCACertificatesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__LoadCACertificates" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__CreateDot1XConfiguration */
int __tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration, _tds__CreateDot1XConfigurationResponse &tds__CreateDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__CreateDot1XConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetDot1XConfiguration */
int __tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfiguration *tds__SetDot1XConfiguration, _tds__SetDot1XConfigurationResponse &tds__SetDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetDot1XConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDot1XConfiguration */
int __tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfiguration *tds__GetDot1XConfiguration, _tds__GetDot1XConfigurationResponse &tds__GetDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDot1XConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDot1XConfigurations */
int __tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurations *tds__GetDot1XConfigurations, _tds__GetDot1XConfigurationsResponse &tds__GetDot1XConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDot1XConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__DeleteDot1XConfiguration */
int __tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration, _tds__DeleteDot1XConfigurationResponse &tds__DeleteDot1XConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__DeleteDot1XConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDot11Capabilities */
int __tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11Capabilities *tds__GetDot11Capabilities, _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDot11Capabilities" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetDot11Status */
int __tds__GetDot11Status(struct soap *soap, _tds__GetDot11Status *tds__GetDot11Status, _tds__GetDot11StatusResponse &tds__GetDot11StatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetDot11Status" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__ScanAvailableDot11Networks */
int __tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks, _tds__ScanAvailableDot11NetworksResponse &tds__ScanAvailableDot11NetworksResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__ScanAvailableDot11Networks" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetSystemUris */
int __tds__GetSystemUris(struct soap *soap, _tds__GetSystemUris *tds__GetSystemUris, _tds__GetSystemUrisResponse &tds__GetSystemUrisResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetSystemUris" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__StartFirmwareUpgrade */
int __tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade, _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__StartFirmwareUpgrade" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__StartSystemRestore */
int __tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestore *tds__StartSystemRestore, _tds__StartSystemRestoreResponse &tds__StartSystemRestoreResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__StartSystemRestore" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetStorageConfigurations */
int __tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurations *tds__GetStorageConfigurations, _tds__GetStorageConfigurationsResponse &tds__GetStorageConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetStorageConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__CreateStorageConfiguration */
int __tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfiguration *tds__CreateStorageConfiguration, _tds__CreateStorageConfigurationResponse &tds__CreateStorageConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__CreateStorageConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__GetStorageConfiguration */
int __tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfiguration *tds__GetStorageConfiguration, _tds__GetStorageConfigurationResponse &tds__GetStorageConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetStorageConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetStorageConfiguration */
int __tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfiguration *tds__SetStorageConfiguration, _tds__SetStorageConfigurationResponse &tds__SetStorageConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetStorageConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__DeleteStorageConfiguration */
int __tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration, _tds__DeleteStorageConfigurationResponse &tds__DeleteStorageConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__DeleteStorageConfiguration" << std::endl;

	return SOAP_OK;
}


/** Auto-test server operation __tds__GetGeoLocation */
int __tds__GetGeoLocation(struct soap *soap, _tds__GetGeoLocation *tds__GetGeoLocation, _tds__GetGeoLocationResponse &tds__GetGeoLocationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__GetGeoLocation" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__SetGeoLocation */
int __tds__SetGeoLocation(struct soap *soap, _tds__SetGeoLocation *tds__SetGeoLocation, _tds__SetGeoLocationResponse &tds__SetGeoLocationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__SetGeoLocation" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tds__DeleteGeoLocation */
int __tds__DeleteGeoLocation(struct soap *soap, _tds__DeleteGeoLocation *tds__DeleteGeoLocation, _tds__DeleteGeoLocationResponse &tds__DeleteGeoLocationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tds__DeleteGeoLocation" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__PullMessages */
int __tev__PullMessages(struct soap *soap, _tev__PullMessages *tev__PullMessages, _tev__PullMessagesResponse &tev__PullMessagesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Seek */
int __tev__Seek(struct soap *soap, _tev__Seek *tev__Seek, _tev__SeekResponse &tev__SeekResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__SetSynchronizationPoint */
int __tev__SetSynchronizationPoint(struct soap *soap, _tev__SetSynchronizationPoint *tev__SetSynchronizationPoint, _tev__SetSynchronizationPointResponse &tev__SetSynchronizationPointResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tev__SetSynchronizationPoint" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Unsubscribe */
int __tev__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *wsnt__Unsubscribe, _wsnt__UnsubscribeResponse &wsnt__UnsubscribeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__GetServiceCapabilities */
int __tev__GetServiceCapabilities(struct soap *soap, _tev__GetServiceCapabilities *tev__GetServiceCapabilities, _tev__GetServiceCapabilitiesResponse &tev__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tev__GetServiceCapabilities" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__CreatePullPointSubscription */
int __tev__CreatePullPointSubscription(struct soap *soap, _tev__CreatePullPointSubscription *tev__CreatePullPointSubscription, _tev__CreatePullPointSubscriptionResponse &tev__CreatePullPointSubscriptionResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__GetEventProperties */
int __tev__GetEventProperties(struct soap *soap, _tev__GetEventProperties *tev__GetEventProperties, _tev__GetEventPropertiesResponse &tev__GetEventPropertiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__AddEventBroker */
int __tev__AddEventBroker(struct soap *soap, _tev__AddEventBroker *tev__AddEventBroker, _tev__AddEventBrokerResponse &tev__AddEventBrokerResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__DeleteEventBroker */
int __tev__DeleteEventBroker(struct soap *soap, _tev__DeleteEventBroker *tev__DeleteEventBroker, _tev__DeleteEventBrokerResponse &tev__DeleteEventBrokerResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__GetEventBrokers */
int __tev__GetEventBrokers(struct soap *soap, _tev__GetEventBrokers *tev__GetEventBrokers, _tev__GetEventBrokersResponse &tev__GetEventBrokersResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Renew */
int __tev__Renew(struct soap *soap, _wsnt__Renew *wsnt__Renew, _wsnt__RenewResponse &wsnt__RenewResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Unsubscribe_ */
int __tev__Unsubscribe_(struct soap *soap, _wsnt__Unsubscribe *wsnt__Unsubscribe, _wsnt__UnsubscribeResponse &wsnt__UnsubscribeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Subscribe */
int __tev__Subscribe(struct soap *soap, _wsnt__Subscribe *wsnt__Subscribe, _wsnt__SubscribeResponse &wsnt__SubscribeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__GetCurrentMessage */
int __tev__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *wsnt__GetCurrentMessage, _wsnt__GetCurrentMessageResponse &wsnt__GetCurrentMessageResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Notify */
int __tev__Notify(struct soap *soap, _wsnt__Notify *wsnt__Notify)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __tev__GetMessages */
int __tev__GetMessages(struct soap *soap, _wsnt__GetMessages *wsnt__GetMessages, _wsnt__GetMessagesResponse &wsnt__GetMessagesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__DestroyPullPoint */
int __tev__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *wsnt__DestroyPullPoint, _wsnt__DestroyPullPointResponse &wsnt__DestroyPullPointResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Notify_ */
int __tev__Notify_(struct soap *soap, _wsnt__Notify *wsnt__Notify)
{
	(void)soap; /* appease -Wall -Werror */
	return SOAP_OK;
}


/** Auto-test server operation __tev__CreatePullPoint */
int __tev__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *wsnt__CreatePullPoint, _wsnt__CreatePullPointResponse &wsnt__CreatePullPointResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Renew_ */
int __tev__Renew_(struct soap *soap, _wsnt__Renew *wsnt__Renew, _wsnt__RenewResponse &wsnt__RenewResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__Unsubscribe__ */
int __tev__Unsubscribe__(struct soap *soap, _wsnt__Unsubscribe *wsnt__Unsubscribe, _wsnt__UnsubscribeResponse &wsnt__UnsubscribeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__PauseSubscription */
int __tev__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *wsnt__PauseSubscription, _wsnt__PauseSubscriptionResponse &wsnt__PauseSubscriptionResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tev__ResumeSubscription */
int __tev__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *wsnt__ResumeSubscription, _wsnt__ResumeSubscriptionResponse &wsnt__ResumeSubscriptionResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetServiceCapabilities */
int __timg__GetServiceCapabilities(struct soap *soap, _timg__GetServiceCapabilities *timg__GetServiceCapabilities, _timg__GetServiceCapabilitiesResponse &timg__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetServiceCapabilities" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetImagingSettings */
int __timg__GetImagingSettings(struct soap *soap, _timg__GetImagingSettings *timg__GetImagingSettings, _timg__GetImagingSettingsResponse &timg__GetImagingSettingsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetImagingSettings" << std::endl;
	std::cout << "__timg__GetImagingSettings VideoSourceToken: " << timg__GetImagingSettings->VideoSourceToken << std::endl;


	std::string dataResponse;
	httplib::Client cli(scheme_host_port);
	//POST API to get get URI
	for(unsigned int i = 0; i < SourceId.size(); i++)
	{
		if(timg__GetImagingSettings->VideoSourceToken == sha1(SourceId_Id[i])
			|| timg__GetImagingSettings->VideoSourceToken == sha1(SourceId[i]))
		{
			Json::Value dataJson;
			dataJson["VideoSourceToken"] = SourceId[i];

			Json::StyledWriter StyledWriter;
			std::string data = StyledWriter.write(dataJson);
			// std::cout << data;
			auto res = cli.Post("/dvr/v1.0/GetImagingSettings", data, "text/plain");
			dataResponse = res->body;
			std::cout << dataResponse << std::endl;
			break;
		}
	}

	std::string dataResponse1 = R"({
									"GetImagingSettingsResponse": {
										"ImagingSettings": {
											"BacklightCompensation": {
												"Mode": "OFF",
												"Level": 1
											},
											"Brightness": 50,
											"ColorSaturation": 50,
											"Exposure": {
												"Mode": "MANUAL",
												"Iris": 0
											},
											"IrCutFilter": "AUTO",
											"Sharpness": 12,
											"WideDynamicRange": {
												"Mode": "OFF",
												"Level": 1
											},
											"WhiteBalance": {
												"Mode": "AUTO",
												"CrGain": 604,
												"CbGain": 403
											}
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);

	if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"].isNull())
	{
		timg__GetImagingSettingsResponse.ImagingSettings = soap_new_tt__ImagingSettings20(soap);
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["BacklightCompensation"].isNull())
		{
			timg__GetImagingSettingsResponse.ImagingSettings->BacklightCompensation = soap_new_tt__BacklightCompensation20(soap);
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["BacklightCompensation"]["Mode"].isNull())
			{
				if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["BacklightCompensation"]["Mode"].asString() == "ON")
				{
					timg__GetImagingSettingsResponse.ImagingSettings->BacklightCompensation->Mode = tt__BacklightCompensationMode__ON;
				}
				if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["BacklightCompensation"]["Mode"].asString() == "ON")
				{
					timg__GetImagingSettingsResponse.ImagingSettings->BacklightCompensation->Mode = tt__BacklightCompensationMode__OFF;
				}
			}
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["BacklightCompensation"]["Level"].isNull())
			{
				float *BacklightCompensationLevel = new float(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["BacklightCompensation"]["Level"].asFloat());
				timg__GetImagingSettingsResponse.ImagingSettings->BacklightCompensation->Level = BacklightCompensationLevel;
			}
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Brightness"].isNull())
		{
			float *Brightness = new float(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Brightness"].asFloat());
			timg__GetImagingSettingsResponse.ImagingSettings->Brightness = Brightness;
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["ColorSaturation"].isNull())
		{
			float *ColorSaturation = new float(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["ColorSaturation"].asFloat());
			timg__GetImagingSettingsResponse.ImagingSettings->ColorSaturation = ColorSaturation;
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Contrast"].isNull())
		{
			float *Contrast = new float(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Contrast"].asFloat());
			timg__GetImagingSettingsResponse.ImagingSettings->Contrast = Contrast;
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Sharpness"].isNull())
		{
			if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Sharpness"].asString() == "ON")
			{
			}
			if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Sharpness"].asString() == "OFF")
			{
				tt__IrCutFilterMode *b = new tt__IrCutFilterMode(tt__IrCutFilterMode__ON);
				timg__GetImagingSettingsResponse.ImagingSettings->IrCutFilter = b;
			}
			if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Sharpness"].asString() == "AUTO")
			{
				tt__IrCutFilterMode *c = new tt__IrCutFilterMode(tt__IrCutFilterMode__ON);
				timg__GetImagingSettingsResponse.ImagingSettings->IrCutFilter = c;
			}
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Sharpness"].isNull())
		{
			float *Sharpness = new float(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["Sharpness"].asFloat());
			timg__GetImagingSettingsResponse.ImagingSettings->Sharpness = Sharpness;
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WideDynamicRange"].isNull())
		{
			timg__GetImagingSettingsResponse.ImagingSettings->WideDynamicRange = soap_new_tt__WideDynamicRange20(soap);
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WideDynamicRange"]["Mode"].isNull())
			{
				if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WideDynamicRange"]["Mode"].asString() == "ON")
				{
					timg__GetImagingSettingsResponse.ImagingSettings->WideDynamicRange->Mode = tt__WideDynamicMode__ON;
				}
				if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WideDynamicRange"]["Mode"].asString() == "OFF")
				{
					timg__GetImagingSettingsResponse.ImagingSettings->WideDynamicRange->Mode = tt__WideDynamicMode__OFF;
				}
			}
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WideDynamicRange"]["Level"].isNull())
			{
				float *WideDynamicRangeLevel = new float (root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WideDynamicRange"]["Level"].asFloat());
				timg__GetImagingSettingsResponse.ImagingSettings->WideDynamicRange->Level = WideDynamicRangeLevel;
			}
		}
		if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"].isNull())
		{
			timg__GetImagingSettingsResponse.ImagingSettings->WhiteBalance = soap_new_tt__WhiteBalance20(soap);
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["Mode"].isNull())
			{
				if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["Mode"].asString() == "AUTO")
				{
					timg__GetImagingSettingsResponse.ImagingSettings->WhiteBalance->Mode = tt__WhiteBalanceMode__AUTO;
				}
				if(root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["Mode"].asString() == "MANUAL")
				{
					timg__GetImagingSettingsResponse.ImagingSettings->WhiteBalance->Mode = tt__WhiteBalanceMode__MANUAL;
				}
			}
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["CrGain"].isNull())
			{
				float *WhiteBalanceCrGain = new float (root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["CrGain"].asFloat());
				timg__GetImagingSettingsResponse.ImagingSettings->WhiteBalance->CrGain = WhiteBalanceCrGain;
			}
			if(!root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["CbGain"].isNull())
			{
				float *WhiteBalanceCbGain = new float (root_dataResponse["GetImagingSettingsResponse"]["ImagingSettings"]["WhiteBalance"]["CbGain"].asFloat());
				timg__GetImagingSettingsResponse.ImagingSettings->WhiteBalance->CbGain = WhiteBalanceCbGain;
			}
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __timg__SetImagingSettings */
int __timg__SetImagingSettings(struct soap *soap, _timg__SetImagingSettings *timg__SetImagingSettings, _timg__SetImagingSettingsResponse &timg__SetImagingSettingsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__SetImagingSettings" << std::endl;
	std::cout << "__timg__SetImagingSettings VideoSourceToken: " << timg__SetImagingSettings->VideoSourceToken << std::endl;

	Json::Value dataJson;
	for(unsigned int i = 0; i < SourceId_Id.size(); i++)
	{
		if(timg__SetImagingSettings->VideoSourceToken == sha1(SourceId_Id[i]))
		{
			dataJson["VideoSourceToken"] = SourceId[i];
			break;
		}
	}
	if(timg__SetImagingSettings->ImagingSettings->BacklightCompensation != NULL)
	{
		switch (timg__SetImagingSettings->ImagingSettings->BacklightCompensation->Mode)
		{
		case tt__BacklightCompensationMode__OFF:
			dataJson["ImagingSettings"]["BacklightCompensation"]["Mode"] = "OFF";
			break;
		case tt__BacklightCompensationMode__ON:
			dataJson["ImagingSettings"]["BacklightCompensation"]["Mode"] = "ON";
			break;
		default:
			break;
		}
		dataJson["ImagingSettings"]["BacklightCompensation"]["Level"] = timg__SetImagingSettings->ImagingSettings->BacklightCompensation->Level;
	}
	
	if(timg__SetImagingSettings->ImagingSettings->Brightness)
	{
		dataJson["ImagingSettings"]["Brightness"] = *timg__SetImagingSettings->ImagingSettings->Brightness;
	}
	if(timg__SetImagingSettings->ImagingSettings->ColorSaturation)
	{
		dataJson["ImagingSettings"]["ColorSaturation"] = *timg__SetImagingSettings->ImagingSettings->ColorSaturation;
	}
	if(timg__SetImagingSettings->ImagingSettings->Contrast)
	{
		dataJson["ImagingSettings"]["Contrast"] = *timg__SetImagingSettings->ImagingSettings->Contrast;
	}

	if(timg__SetImagingSettings->ImagingSettings->Exposure)
	{
		switch (timg__SetImagingSettings->ImagingSettings->Exposure->Mode)
		{
		case tt__ExposureMode__AUTO:
			dataJson["ImagingSettings"]["Exposure"]["Mode"] = "AUTO";
			break;
		case tt__ExposureMode__MANUAL:
			dataJson["ImagingSettings"]["Exposure"]["Mode"] = "MANUAL";
			break;
		default:
			break;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->Priority)
		{
			switch (*timg__SetImagingSettings->ImagingSettings->Exposure->Priority)
			{
			case tt__ExposurePriority__LowNoise:
				dataJson["ImagingSettings"]["Exposure"]["Priority"] = "LowNoise";
				break;
			case tt__ExposurePriority__FrameRate:
				dataJson["ImagingSettings"]["Exposure"]["Priority"] = "FrameRate";
				break;
			default:
				break;
			}
		}
		// dataJson["ImagingSettings"]["Exposure"]["Window"] = timg__SetImagingSettings->ImagingSettings->Exposure->Window;
		if(timg__SetImagingSettings->ImagingSettings->Exposure->MinExposureTime)
		{
			dataJson["ImagingSettings"]["Exposure"]["MinExposureTime"] = *timg__SetImagingSettings->ImagingSettings->Exposure->MinExposureTime;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->MaxExposureTime)
		{
			dataJson["ImagingSettings"]["Exposure"]["MaxExposureTime"] = *timg__SetImagingSettings->ImagingSettings->Exposure->MaxExposureTime;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->MinGain)
		{
			dataJson["ImagingSettings"]["Exposure"]["MinGain"] = *timg__SetImagingSettings->ImagingSettings->Exposure->MinGain;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->MaxGain)
		{
			dataJson["ImagingSettings"]["Exposure"]["MaxGain"] = *timg__SetImagingSettings->ImagingSettings->Exposure->MaxGain;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->MinIris)
		{
			dataJson["ImagingSettings"]["Exposure"]["MinIris"] = *timg__SetImagingSettings->ImagingSettings->Exposure->MinIris;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->MaxIris)
		{
			dataJson["ImagingSettings"]["Exposure"]["MaxIris"] = *timg__SetImagingSettings->ImagingSettings->Exposure->MaxIris;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->ExposureTime)
		{
			dataJson["ImagingSettings"]["Exposure"]["ExposureTime"] = *timg__SetImagingSettings->ImagingSettings->Exposure->ExposureTime;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->Gain)
		{
			dataJson["ImagingSettings"]["Exposure"]["Gain"] = *timg__SetImagingSettings->ImagingSettings->Exposure->Gain;
		}
		if(timg__SetImagingSettings->ImagingSettings->Exposure->Iris)
		{
			dataJson["ImagingSettings"]["Exposure"]["Iris"] = *timg__SetImagingSettings->ImagingSettings->Exposure->Iris;
		}


	}
	
	
	if(timg__SetImagingSettings->ImagingSettings->Focus)
	{
		dataJson["ImagingSettings"]["Focus"]["AFMode"] = *timg__SetImagingSettings->ImagingSettings->Focus->AFMode;
		switch (timg__SetImagingSettings->ImagingSettings->Focus->AutoFocusMode)
		{
		case tt__AutoFocusMode__AUTO:
			dataJson["ImagingSettings"]["Focus"]["AutoFocusMode"] = "AUTO";
			break;
		case tt__AutoFocusMode__MANUAL:
			dataJson["ImagingSettings"]["Focus"]["MANUALFocusMode"] = "MANUAL";
			break;
		default:
			break;
		}
		dataJson["ImagingSettings"]["Focus"]["DefaultSpeed"] = *timg__SetImagingSettings->ImagingSettings->Focus->DefaultSpeed;
		dataJson["ImagingSettings"]["Focus"]["NearLimit"] = *timg__SetImagingSettings->ImagingSettings->Focus->NearLimit;
		dataJson["ImagingSettings"]["Focus"]["FarLimit"] = *timg__SetImagingSettings->ImagingSettings->Focus->FarLimit;
	}
	
	if(timg__SetImagingSettings->ImagingSettings->IrCutFilter)
	{
		switch (*timg__SetImagingSettings->ImagingSettings->IrCutFilter)
		{
		case tt__IrCutFilterMode__ON:
			dataJson["ImagingSettings"]["IrCutFilter"] = "ON";
			break;
		case tt__IrCutFilterMode__OFF:
			dataJson["ImagingSettings"]["IrCutFilter"] = "OFF";
			break;
		case tt__IrCutFilterMode__AUTO:
			dataJson["ImagingSettings"]["IrCutFilter"] = "AUTO";
			break;
		default:
			break;
		}
	}
	if(timg__SetImagingSettings->ImagingSettings->Sharpness)
	{
		dataJson["ImagingSettings"]["Sharpness"] = *timg__SetImagingSettings->ImagingSettings->Sharpness;
	}
	
	if(timg__SetImagingSettings->ImagingSettings->WideDynamicRange)
	{
		switch (timg__SetImagingSettings->ImagingSettings->WideDynamicRange->Mode)
		{
		case tt__WideDynamicMode__ON:
			dataJson["ImagingSettings"]["WideDynamicRange"]["Mode"] = "ON";
			break;
		case tt__WideDynamicMode__OFF:
			dataJson["ImagingSettings"]["WideDynamicRange"]["Mode"] = "OFF";
			break;
		default:
			break;
		}
		dataJson["ImagingSettings"]["WideDynamicRange"]["Level"] = *timg__SetImagingSettings->ImagingSettings->WideDynamicRange->Level;
		switch (timg__SetImagingSettings->ImagingSettings->WhiteBalance->Mode)
		{
		case tt__WhiteBalanceMode__AUTO:
			dataJson["ImagingSettings"]["WhiteBalance"]["Mode"] = "AUTO";
			break;
		case tt__WhiteBalanceMode__MANUAL:
			dataJson["ImagingSettings"]["WhiteBalance"]["Mode"] = "MANUAL";
			break;
		default:
			break;
		}
	}
	if(timg__SetImagingSettings->ImagingSettings->WhiteBalance)
	{
		dataJson["ImagingSettings"]["WhiteBalance"]["CrGain"] = *timg__SetImagingSettings->ImagingSettings->WhiteBalance->CrGain;
		dataJson["ImagingSettings"]["WhiteBalance"]["CbGain"] = *timg__SetImagingSettings->ImagingSettings->WhiteBalance->CbGain;
	}
	

	httplib::Client cli(scheme_host_port);
	Json::StyledWriter StyledWriter;
	std::string data = StyledWriter.write(dataJson);
	std::cout << data << std::endl;
	auto res = cli.Post("/dvr/v1.0/SetImagingSettings", data, "text/plain");
	// dataResponse = res->body;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetOptions */
int __timg__GetOptions(struct soap *soap, _timg__GetOptions *timg__GetOptions, _timg__GetOptionsResponse &timg__GetOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetOptions" << std::endl;
	std::cout << "__timg__GetOptions VideoSourceToken: " << timg__GetOptions->VideoSourceToken << std::endl;


	std::string dataResponse;
	httplib::Client cli(scheme_host_port);
	//POST API to get get URI
	for(unsigned int i = 0; i < SourceId.size(); i++)
	{
		if(timg__GetOptions->VideoSourceToken  == sha1(SourceId_Id[i]))
		{
			Json::Value dataJson;
			dataJson["VideoSourceToken"] = SourceId[i];

			Json::StyledWriter StyledWriter;
			std::string data = StyledWriter.write(dataJson);
			// std::cout << data;
			auto res = cli.Post("/dvr/v1.0/GetOptions", data, "text/plain");
			dataResponse = res->body;
			std::cout << dataResponse << std::endl;
			break;
		}
	}

	std::string dataResponse1 = R"({
								"GetOptionsResponse": {
									"ImagingOptions": {
										"BacklightCompensation": {
											"Mode": [
												"OFF",
												"ON"
											],
											"Level": {
												"Min": 0,
												"Max": 2
											}
										},
										"Brightness": {
											"Min": 0,
											"Max": 1
										},
										"ColorSaturation": {
											"Min": 1,
											"Max": 100
										},
										"IrCutFilterModes": [
											"ON",
											"OFF",
											"AUTO"
										],
										"Sharpness": {
											"Min": 1,
											"Max": 32
										},
										"WideDynamicRange": {
											"Mode": [
												"OFF",
												"ON"
											],
											"Level": {
												"Min": 0,
												"Max": 2
											}
										},
										"WhiteBalance": {
											"Mode": [
												"AUTO",
												"MANUAL"
											],
											"YrGain": {
												"Min": 1,
												"Max": 2048
											},
											"YbGain": {
												"Min": 1,
												"Max": 2048
											}
										}
									}
								}
							})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"].isNull())
	{
		timg__GetOptionsResponse.ImagingOptions = soap_new_tt__ImagingOptions20(soap);
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->BacklightCompensation = soap_new_tt__BacklightCompensationOptions20(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Mode"].isNull())
			{
				Json::Value arrayMode = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Mode"];
				for(unsigned int i = 0; i < arrayMode.size(); i++)
				{
					if(arrayMode[i] == "ON")
					{
						timg__GetOptionsResponse.ImagingOptions->BacklightCompensation->Mode.push_back(tt__BacklightCompensationMode__ON);
					}
					else if(arrayMode[i] == "OFF")
					{
						timg__GetOptionsResponse.ImagingOptions->BacklightCompensation->Mode.push_back(tt__BacklightCompensationMode__OFF);
					}
				}
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Level"].isNull())
			{
				timg__GetOptionsResponse.ImagingOptions->BacklightCompensation->Level = soap_new_tt__FloatRange(soap);
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Level"]["Min"].isNull())
				{
					float LevelMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Level"]["Min"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->BacklightCompensation->Level->Min = LevelMin;
				}
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Level"]["Max"].isNull())
				{
					float LevelMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["BacklightCompensation"]["Level"]["Max"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->BacklightCompensation->Level->Max = LevelMax;
				}
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Brightness"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->Brightness = soap_new_tt__FloatRange(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Brightness"]["Min"].isNull())
			{
				float BrightnessMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Brightness"]["Min"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->Brightness->Min = BrightnessMin;
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Brightness"]["Max"].isNull())
			{
				float BrightnessMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Brightness"]["Max"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->Brightness->Max = BrightnessMax;
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["ColorSaturation"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->ColorSaturation = soap_new_tt__FloatRange(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["ColorSaturation"]["Min"].isNull())
			{
				float ColorSaturationMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["ColorSaturation"]["Min"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->ColorSaturation->Min = ColorSaturationMin;
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["ColorSaturation"]["Max"].isNull())
			{
				float ColorSaturationMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["ColorSaturation"]["Max"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->ColorSaturation->Max = ColorSaturationMax;
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Contrast"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->Contrast = soap_new_tt__FloatRange(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Contrast"]["Min"].isNull())
			{
				float ContrastMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Contrast"]["Min"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->Contrast->Min = ContrastMin;
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Contrast"]["Max"].isNull())
			{
				float ContrastMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Contrast"]["Max"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->Contrast->Max = ContrastMax;
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["IrCutFilterModes"].isNull())
		{
			Json::Value arrayIrCutFilterModes = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["IrCutFilterModes"];
			for(unsigned int i = 0; i < arrayIrCutFilterModes.size(); i++)
			{
				if(arrayIrCutFilterModes[i] == "ON")
				{
					timg__GetOptionsResponse.ImagingOptions->IrCutFilterModes.push_back(tt__IrCutFilterMode__ON);
				}
				else if(arrayIrCutFilterModes[i] == "OFF")
				{
					timg__GetOptionsResponse.ImagingOptions->IrCutFilterModes.push_back(tt__IrCutFilterMode__OFF);
				}
				else if(arrayIrCutFilterModes[i] == "AUTO")
				{
					timg__GetOptionsResponse.ImagingOptions->IrCutFilterModes.push_back(tt__IrCutFilterMode__AUTO);
				}
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Sharpness"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->Sharpness = soap_new_tt__FloatRange(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Sharpness"]["Min"].isNull())
			{
				float SharpnessMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Sharpness"]["Min"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->Sharpness->Min = SharpnessMin;
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Sharpness"]["Max"].isNull())
			{
				float SharpnessMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["Sharpness"]["Max"].asFloat();
				timg__GetOptionsResponse.ImagingOptions->Sharpness->Max = SharpnessMax;
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->WideDynamicRange = soap_new_tt__WideDynamicRangeOptions20(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Mode"].isNull())
			{
				Json::Value arrayMode = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Mode"];
				for(unsigned int i = 0; i < arrayMode.size(); i++)
				{
					if(arrayMode[i] == "ON")
					{
						timg__GetOptionsResponse.ImagingOptions->WideDynamicRange->Mode.push_back(tt__WideDynamicMode__ON);
					}
					else if(arrayMode[i] == "OFF")
					{
						timg__GetOptionsResponse.ImagingOptions->WideDynamicRange->Mode.push_back(tt__WideDynamicMode__OFF);
					}
				}
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Level"].isNull())
			{
				timg__GetOptionsResponse.ImagingOptions->WideDynamicRange->Level = soap_new_tt__FloatRange(soap);
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Level"]["Min"].isNull())
				{
					float LevelMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Level"]["Min"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->WideDynamicRange->Level->Min = LevelMin;
				}
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Level"]["Max"].isNull())
				{
					float LevelMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WideDynamicRange"]["Level"]["Max"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->WideDynamicRange->Level->Max = LevelMax;
				}
			}
		}
		if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"].isNull())
		{
			timg__GetOptionsResponse.ImagingOptions->WhiteBalance = soap_new_tt__WhiteBalanceOptions20(soap);
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["Mode"].isNull())
			{
				Json::Value arrayMode = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["Mode"];
				for(unsigned int i = 0; i < arrayMode.size(); i++)
				{
					if(arrayMode[i] == "AUTO")
					{
						timg__GetOptionsResponse.ImagingOptions->WhiteBalance->Mode.push_back(tt__WhiteBalanceMode__AUTO);
					}
					else if(arrayMode[i] == "MANUAL")
					{
						timg__GetOptionsResponse.ImagingOptions->WhiteBalance->Mode.push_back(tt__WhiteBalanceMode__MANUAL);
					}
				}
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YrGain"].isNull())
			{
				timg__GetOptionsResponse.ImagingOptions->WhiteBalance->YrGain = soap_new_tt__FloatRange(soap);
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YrGain"]["Min"].isNull())
				{
					float YrGainMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YrGain"]["Min"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->WhiteBalance->YrGain->Min = YrGainMin;
				}
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YrGain"]["Max"].isNull())
				{
					float YrGainMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YrGain"]["Max"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->WhiteBalance->YrGain->Max = YrGainMax;
				}
			}
			if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YbGain"].isNull())
			{
				timg__GetOptionsResponse.ImagingOptions->WhiteBalance->YbGain = soap_new_tt__FloatRange(soap);
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YbGain"]["Min"].isNull())
				{
					float YbGainMin = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YbGain"]["Min"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->WhiteBalance->YbGain->Min = YbGainMin;
				}
				if(!root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YbGain"]["Max"].isNull())
				{
					float YbGainMax = root_dataResponse["GetOptionsResponse"]["ImagingOptions"]["WhiteBalance"]["YbGain"]["Max"].asFloat();
					timg__GetOptionsResponse.ImagingOptions->WhiteBalance->YbGain->Max = YbGainMax;
				}
			}
		}


	}
	return SOAP_OK;
}


/** Auto-test server operation __timg__Move */
int __timg__Move(struct soap *soap, _timg__Move *timg__Move, _timg__MoveResponse &timg__MoveResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__Move" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__Stop */
int __timg__Stop(struct soap *soap, _timg__Stop *timg__Stop, _timg__StopResponse &timg__StopResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__Stop" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetStatus */
int __timg__GetStatus(struct soap *soap, _timg__GetStatus *timg__GetStatus, _timg__GetStatusResponse &timg__GetStatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetStatus" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetMoveOptions */
int __timg__GetMoveOptions(struct soap *soap, _timg__GetMoveOptions *timg__GetMoveOptions, _timg__GetMoveOptionsResponse &timg__GetMoveOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetMoveOptions" << std::endl;
	std::cout <<"__timg__GetMoveOptions VideoSourceToken:" << timg__GetMoveOptions->VideoSourceToken << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetPresets */
int __timg__GetPresets(struct soap *soap, _timg__GetPresets *timg__GetPresets, _timg__GetPresetsResponse &timg__GetPresetsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetPresets" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__GetCurrentPreset */
int __timg__GetCurrentPreset(struct soap *soap, _timg__GetCurrentPreset *timg__GetCurrentPreset, _timg__GetCurrentPresetResponse &timg__GetCurrentPresetResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__GetCurrentPreset" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __timg__SetCurrentPreset */
int __timg__SetCurrentPreset(struct soap *soap, _timg__SetCurrentPreset *timg__SetCurrentPreset, _timg__SetCurrentPresetResponse &timg__SetCurrentPresetResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__timg__SetCurrentPreset" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetServiceCapabilities */
int __tmd__GetServiceCapabilities(struct soap *soap, _tmd__GetServiceCapabilities *tmd__GetServiceCapabilities, _tmd__GetServiceCapabilitiesResponse &tmd__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__GetServiceCapabilities" << std::endl;

	std::string dataResponse = R"({
								"GetServiceCapabilitiesResponse": {
									"Capabilities": {
										"VideoSources": 2,
										"VideoOutputs": 0,
										"AudioSources": 0,
										"AudioOutputs": 0,
										"RelayOutputs": 0,
										"SerialPorts": 0,
										"DigitalInputs": 0,
										"DigitalInputOptions": false
									}
								}
							})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"].isNull())
	{
		tmd__GetServiceCapabilitiesResponse.Capabilities = soap_new_tmd__Capabilities(soap);
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["VideoSources"].isNull())
		{
			int VideoSources = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["VideoSources"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->VideoSources = VideoSources;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["VideoOutputs"].isNull())
		{
			int VideoOutputs = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["VideoOutputs"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->VideoOutputs = VideoOutputs;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["AudioSources"].isNull())
		{
			int AudioSources = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["AudioSources"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->AudioSources = AudioSources;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["AudioOutputs"].isNull())
		{
			int AudioOutputs = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["AudioOutputs"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->AudioOutputs = AudioOutputs;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["RelayOutputs"].isNull())
		{
			int RelayOutputs = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["RelayOutputs"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->RelayOutputs = RelayOutputs;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["SerialPorts"].isNull())
		{
			int SerialPorts = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["SerialPorts"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->SerialPorts = SerialPorts;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["DigitalInputs"].isNull())
		{
			int DigitalInputs = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["DigitalInputs"].asInt();
			tmd__GetServiceCapabilitiesResponse.Capabilities->DigitalInputs = DigitalInputs;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["DigitalInputOptions"].isNull())
		{
			bool DigitalInputOptions = root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["DigitalInputOptions"].asBool();
			tmd__GetServiceCapabilitiesResponse.Capabilities->DigitalInputOptions = DigitalInputOptions;
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetRelayOutputOptions */
int __tmd__GetRelayOutputOptions(struct soap *soap, _tmd__GetRelayOutputOptions *tmd__GetRelayOutputOptions, _tmd__GetRelayOutputOptionsResponse &tmd__GetRelayOutputOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetAudioSources */
int __tmd__GetAudioSources(struct soap *soap, tmd__Get *tmd__GetAudioSources, tmd__GetResponse &tmd__GetAudioSourcesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__GetAudioSources" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetAudioOutputs */
int __tmd__GetAudioOutputs(struct soap *soap, tmd__Get *tmd__GetAudioOutputs, tmd__GetResponse &tmd__GetAudioOutputsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetVideoSources */
int __tmd__GetVideoSources(struct soap *soap, tmd__Get *tmd__GetVideoSources, tmd__GetResponse &tmd__GetVideoSourcesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__GetVideoSources" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetVideoOutputs */
int __tmd__GetVideoOutputs(struct soap *soap, _tmd__GetVideoOutputs *tmd__GetVideoOutputs, _tmd__GetVideoOutputsResponse &tmd__GetVideoOutputsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetVideoSourceConfiguration */
int __tmd__GetVideoSourceConfiguration(struct soap *soap, _tmd__GetVideoSourceConfiguration *tmd__GetVideoSourceConfiguration, _tmd__GetVideoSourceConfigurationResponse &tmd__GetVideoSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__GetVideoSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetVideoOutputConfiguration */
int __tmd__GetVideoOutputConfiguration(struct soap *soap, _tmd__GetVideoOutputConfiguration *tmd__GetVideoOutputConfiguration, _tmd__GetVideoOutputConfigurationResponse &tmd__GetVideoOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetAudioSourceConfiguration */
int __tmd__GetAudioSourceConfiguration(struct soap *soap, _tmd__GetAudioSourceConfiguration *tmd__GetAudioSourceConfiguration, _tmd__GetAudioSourceConfigurationResponse &tmd__GetAudioSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetAudioOutputConfiguration */
int __tmd__GetAudioOutputConfiguration(struct soap *soap, _tmd__GetAudioOutputConfiguration *tmd__GetAudioOutputConfiguration, _tmd__GetAudioOutputConfigurationResponse &tmd__GetAudioOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetVideoSourceConfiguration */
int __tmd__SetVideoSourceConfiguration(struct soap *soap, _tmd__SetVideoSourceConfiguration *tmd__SetVideoSourceConfiguration, _tmd__SetVideoSourceConfigurationResponse &tmd__SetVideoSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__SetVideoSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetVideoOutputConfiguration */
int __tmd__SetVideoOutputConfiguration(struct soap *soap, _tmd__SetVideoOutputConfiguration *tmd__SetVideoOutputConfiguration, _tmd__SetVideoOutputConfigurationResponse &tmd__SetVideoOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetAudioSourceConfiguration */
int __tmd__SetAudioSourceConfiguration(struct soap *soap, _tmd__SetAudioSourceConfiguration *tmd__SetAudioSourceConfiguration, _tmd__SetAudioSourceConfigurationResponse &tmd__SetAudioSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__SetAudioSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetAudioOutputConfiguration */
int __tmd__SetAudioOutputConfiguration(struct soap *soap, _tmd__SetAudioOutputConfiguration *tmd__SetAudioOutputConfiguration, _tmd__SetAudioOutputConfigurationResponse &tmd__SetAudioOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetVideoSourceConfigurationOptions */
int __tmd__GetVideoSourceConfigurationOptions(struct soap *soap, _tmd__GetVideoSourceConfigurationOptions *tmd__GetVideoSourceConfigurationOptions, _tmd__GetVideoSourceConfigurationOptionsResponse &tmd__GetVideoSourceConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tmd__GetVideoSourceConfigurationOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetVideoOutputConfigurationOptions */
int __tmd__GetVideoOutputConfigurationOptions(struct soap *soap, _tmd__GetVideoOutputConfigurationOptions *tmd__GetVideoOutputConfigurationOptions, _tmd__GetVideoOutputConfigurationOptionsResponse &tmd__GetVideoOutputConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetAudioSourceConfigurationOptions */
int __tmd__GetAudioSourceConfigurationOptions(struct soap *soap, _tmd__GetAudioSourceConfigurationOptions *tmd__GetAudioSourceConfigurationOptions, _tmd__GetAudioSourceConfigurationOptionsResponse &tmd__GetAudioSourceConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetAudioOutputConfigurationOptions */
int __tmd__GetAudioOutputConfigurationOptions(struct soap *soap, _tmd__GetAudioOutputConfigurationOptions *tmd__GetAudioOutputConfigurationOptions, _tmd__GetAudioOutputConfigurationOptionsResponse &tmd__GetAudioOutputConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetRelayOutputs */
int __tmd__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs *tds__GetRelayOutputs, _tds__GetRelayOutputsResponse &tds__GetRelayOutputsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetRelayOutputSettings */
int __tmd__SetRelayOutputSettings(struct soap *soap, _tmd__SetRelayOutputSettings *tmd__SetRelayOutputSettings, _tmd__SetRelayOutputSettingsResponse &tmd__SetRelayOutputSettingsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetRelayOutputState */
int __tmd__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState *tds__SetRelayOutputState, _tds__SetRelayOutputStateResponse &tds__SetRelayOutputStateResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetDigitalInputs */
int __tmd__GetDigitalInputs(struct soap *soap, _tmd__GetDigitalInputs *tmd__GetDigitalInputs, _tmd__GetDigitalInputsResponse &tmd__GetDigitalInputsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetDigitalInputConfigurationOptions */
int __tmd__GetDigitalInputConfigurationOptions(struct soap *soap, _tmd__GetDigitalInputConfigurationOptions *tmd__GetDigitalInputConfigurationOptions, _tmd__GetDigitalInputConfigurationOptionsResponse &tmd__GetDigitalInputConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetDigitalInputConfigurations */
int __tmd__SetDigitalInputConfigurations(struct soap *soap, _tmd__SetDigitalInputConfigurations *tmd__SetDigitalInputConfigurations, _tmd__SetDigitalInputConfigurationsResponse &tmd__SetDigitalInputConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetSerialPorts */
int __tmd__GetSerialPorts(struct soap *soap, _tmd__GetSerialPorts *tmd__GetSerialPorts, _tmd__GetSerialPortsResponse &tmd__GetSerialPortsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetSerialPortConfiguration */
int __tmd__GetSerialPortConfiguration(struct soap *soap, _tmd__GetSerialPortConfiguration *tmd__GetSerialPortConfiguration, _tmd__GetSerialPortConfigurationResponse &tmd__GetSerialPortConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SetSerialPortConfiguration */
int __tmd__SetSerialPortConfiguration(struct soap *soap, _tmd__SetSerialPortConfiguration *tmd__SetSerialPortConfiguration, _tmd__SetSerialPortConfigurationResponse &tmd__SetSerialPortConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__GetSerialPortConfigurationOptions */
int __tmd__GetSerialPortConfigurationOptions(struct soap *soap, _tmd__GetSerialPortConfigurationOptions *tmd__GetSerialPortConfigurationOptions, _tmd__GetSerialPortConfigurationOptionsResponse &tmd__GetSerialPortConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tmd__SendReceiveSerialCommand */
int __tmd__SendReceiveSerialCommand(struct soap *soap, _tmd__SendReceiveSerialCommand *tmd__SendReceiveSerialCommand, _tmd__SendReceiveSerialCommandResponse &tmd__SendReceiveSerialCommandResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetServiceCapabilities */
int __tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *tptz__GetServiceCapabilities, _tptz__GetServiceCapabilitiesResponse &tptz__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetServiceCapabilities" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetConfigurations */
int __tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *tptz__GetConfigurations, _tptz__GetConfigurationsResponse &tptz__GetConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetPresets */
int __tptz__GetPresets(struct soap *soap, _tptz__GetPresets *tptz__GetPresets, _tptz__GetPresetsResponse &tptz__GetPresetsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetPresets" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__SetPreset */
int __tptz__SetPreset(struct soap *soap, _tptz__SetPreset *tptz__SetPreset, _tptz__SetPresetResponse &tptz__SetPresetResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__RemovePreset */
int __tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *tptz__RemovePreset, _tptz__RemovePresetResponse &tptz__RemovePresetResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GotoPreset */
int __tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *tptz__GotoPreset, _tptz__GotoPresetResponse &tptz__GotoPresetResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetStatus */
int __tptz__GetStatus(struct soap *soap, _tptz__GetStatus *tptz__GetStatus, _tptz__GetStatusResponse &tptz__GetStatusResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetStatus" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetConfiguration */
int __tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *tptz__GetConfiguration, _tptz__GetConfigurationResponse &tptz__GetConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetNodes */
int __tptz__GetNodes(struct soap *soap, _tptz__GetNodes *tptz__GetNodes, _tptz__GetNodesResponse &tptz__GetNodesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetNodes" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetNode */
int __tptz__GetNode(struct soap *soap, _tptz__GetNode *tptz__GetNode, _tptz__GetNodeResponse &tptz__GetNodeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetNode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__SetConfiguration */
int __tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *tptz__SetConfiguration, _tptz__SetConfigurationResponse &tptz__SetConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__SetConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetConfigurationOptions */
int __tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *tptz__GetConfigurationOptions, _tptz__GetConfigurationOptionsResponse &tptz__GetConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetConfigurationOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GotoHomePosition */
int __tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *tptz__GotoHomePosition, _tptz__GotoHomePositionResponse &tptz__GotoHomePositionResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GotoHomePosition" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__SetHomePosition */
int __tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *tptz__SetHomePosition, _tptz__SetHomePositionResponse &tptz__SetHomePositionResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__SetHomePosition" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__ContinuousMove */
int __tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *tptz__ContinuousMove, _tptz__ContinuousMoveResponse &tptz__ContinuousMoveResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__ContinuousMove" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__RelativeMove */
int __tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *tptz__RelativeMove, _tptz__RelativeMoveResponse &tptz__RelativeMoveResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__RelativeMove" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__SendAuxiliaryCommand */
int __tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand, _tptz__SendAuxiliaryCommandResponse &tptz__SendAuxiliaryCommandResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__SendAuxiliaryCommand" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__AbsoluteMove */
int __tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *tptz__AbsoluteMove, _tptz__AbsoluteMoveResponse &tptz__AbsoluteMoveResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__AbsoluteMove" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GeoMove */
int __tptz__GeoMove(struct soap *soap, _tptz__GeoMove *tptz__GeoMove, _tptz__GeoMoveResponse &tptz__GeoMoveResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GeoMove" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__Stop */
int __tptz__Stop(struct soap *soap, _tptz__Stop *tptz__Stop, _tptz__StopResponse &tptz__StopResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__Stop" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetPresetTours */
int __tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *tptz__GetPresetTours, _tptz__GetPresetToursResponse &tptz__GetPresetToursResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetPresetTours" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetPresetTour */
int __tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *tptz__GetPresetTour, _tptz__GetPresetTourResponse &tptz__GetPresetTourResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetPresetTour" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetPresetTourOptions */
int __tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *tptz__GetPresetTourOptions, _tptz__GetPresetTourOptionsResponse &tptz__GetPresetTourOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetPresetTourOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__CreatePresetTour */
int __tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *tptz__CreatePresetTour, _tptz__CreatePresetTourResponse &tptz__CreatePresetTourResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__CreatePresetTour" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__ModifyPresetTour */
int __tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *tptz__ModifyPresetTour, _tptz__ModifyPresetTourResponse &tptz__ModifyPresetTourResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__ModifyPresetTour" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__OperatePresetTour */
int __tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *tptz__OperatePresetTour, _tptz__OperatePresetTourResponse &tptz__OperatePresetTourResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__OperatePresetTour" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__RemovePresetTour */
int __tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *tptz__RemovePresetTour, _tptz__RemovePresetTourResponse &tptz__RemovePresetTourResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__RemovePresetTour" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__GetCompatibleConfigurations */
int __tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations, _tptz__GetCompatibleConfigurationsResponse &tptz__GetCompatibleConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__GetCompatibleConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __tptz__MoveAndStartTracking */
int __tptz__MoveAndStartTracking(struct soap *soap, _tptz__MoveAndStartTracking *tptz__MoveAndStartTracking, _tptz__MoveAndStartTrackingResponse &tptz__MoveAndStartTrackingResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__tptz__MoveAndStartTracking" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetServiceCapabilities */
int __trt__GetServiceCapabilities(struct soap *soap, _trt__GetServiceCapabilities *trt__GetServiceCapabilities, _trt__GetServiceCapabilitiesResponse &trt__GetServiceCapabilitiesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetServiceCapabilities" << std::endl;
	std::string dataResponse = R"({
									"GetServiceCapabilitiesResponse": {
										"Capabilities": {
											"SnapshotUri": true,
											"Rotation": false,
											"VideoSourceMode": true,
											"OSD": false,
											"TemporaryOSDText": false,
											"EXICompression": false,
											"ProfileCapabilities": {
												"MaximumNumberOfProfiles": 6
											},
											"StreamingCapabilities": {
												"RTPMulticast": true,
												"RTP_TCP": true,
												"RTP_RTSP_TCP": true,
												"NonAggregateControl": true,
												"NoRTSPStreaming": true
											}
										}
									}
								})";
	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"].isNull())
	{
		trt__GetServiceCapabilitiesResponse.Capabilities = soap_new_trt__Capabilities(soap);
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["SnapshotUri"].isNull())
		{
			bool *SnapshotUri = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["SnapshotUri"].asBool());
			trt__GetServiceCapabilitiesResponse.Capabilities->SnapshotUri = SnapshotUri;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Rotation"].isNull())
		{
			bool *Rotation = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["Rotation"].asBool());
			trt__GetServiceCapabilitiesResponse.Capabilities->Rotation = Rotation;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["VideoSourceMode"].isNull())
		{
			bool *VideoSourceMode = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["VideoSourceMode"].asBool());
			trt__GetServiceCapabilitiesResponse.Capabilities->VideoSourceMode = VideoSourceMode;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["OSD"].isNull())
		{
			bool *OSD = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["OSD"].asBool());
			trt__GetServiceCapabilitiesResponse.Capabilities->OSD = OSD;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["TemporaryOSDText"].isNull())
		{
			bool *TemporaryOSDText = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["TemporaryOSDText"].asBool());
			trt__GetServiceCapabilitiesResponse.Capabilities->TemporaryOSDText = TemporaryOSDText;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["EXICompression"].isNull())
		{
			bool *EXICompression = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["EXICompression"].asBool());
			trt__GetServiceCapabilitiesResponse.Capabilities->EXICompression = EXICompression;
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["ProfileCapabilities"].isNull())
		{
			trt__GetServiceCapabilitiesResponse.Capabilities->ProfileCapabilities = soap_new_trt__ProfileCapabilities(soap);
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["ProfileCapabilities"]["MaximumNumberOfProfiles"].isNull())
			{
				int *MaximumNumberOfProfiles = new int(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["ProfileCapabilities"]["MaximumNumberOfProfiles"].asInt());
				trt__GetServiceCapabilitiesResponse.Capabilities->ProfileCapabilities->MaximumNumberOfProfiles = MaximumNumberOfProfiles;
			}
		}
		if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"].isNull())
		{
			trt__GetServiceCapabilitiesResponse.Capabilities->StreamingCapabilities = soap_new_trt__StreamingCapabilities(soap);
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["RTPMulticast"].isNull())
			{
				bool *RTPMulticast = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["RTPMulticast"].asBool());
				trt__GetServiceCapabilitiesResponse.Capabilities->StreamingCapabilities->RTPMulticast = RTPMulticast;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["RTP_TCP"].isNull())
			{
				bool *RTP_USCORETCP  = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["RTP_TCP"].asBool());
				trt__GetServiceCapabilitiesResponse.Capabilities->StreamingCapabilities->RTP_USCORETCP  = RTP_USCORETCP;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["RTP_RTSP_TCP"].isNull())
			{
				bool *RTP_USCORERTSP_USCORETCP  = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["RTP_RTSP_TCP"].asBool());
				trt__GetServiceCapabilitiesResponse.Capabilities->StreamingCapabilities->RTP_USCORERTSP_USCORETCP  = RTP_USCORERTSP_USCORETCP;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["NonAggregateControl"].isNull())
			{
				bool *NonAggregateControl  = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["NonAggregateControl"].asBool());
				trt__GetServiceCapabilitiesResponse.Capabilities->StreamingCapabilities->NonAggregateControl  = NonAggregateControl;
			}
			if(!root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["NoRTSPStreaming"].isNull())
			{
				bool *NoRTSPStreaming  = new bool(root_dataResponse["GetServiceCapabilitiesResponse"]["Capabilities"]["StreamingCapabilities"]["NoRTSPStreaming"].asBool());
				trt__GetServiceCapabilitiesResponse.Capabilities->StreamingCapabilities->NoRTSPStreaming  = NoRTSPStreaming;
			}
		}
	}
	
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoSources */
int __trt__GetVideoSources(struct soap *soap, _trt__GetVideoSources *trt__GetVideoSources, _trt__GetVideoSourcesResponse &trt__GetVideoSourcesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoSources" << std::endl;
	std::string dataResponse = R"({
									"GetVideoSourcesResponse": {
										"VideoSources": [{
											"Framerate": 25.000000,
											"Resolution": {
												"Width": 1920,
												"Height": 1080
											}
										},
										{
											"Framerate": 25.000000,
											"Resolution": {
												"Width": 1920,
												"Height": 1080
											}
										}]
									}
								})";
	std::string dataResponse1 = R"({
									"GetVideoSourcesResponse": {
										"VideoSources": [{
											"Framerate": 25.000000,
											"Resolution": {
												"Width": 1920,
												"Height": 1080
											}
										}]
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoSourcesResponse"]["VideoSources"].isNull())
	{
		Json::Value arrayVideoSources = root_dataResponse["GetVideoSourcesResponse"]["VideoSources"];
		for(unsigned int i = 0; i < arrayVideoSources.size(); i++)
		{
			trt__GetVideoSourcesResponse.VideoSources.push_back(soap_new_tt__VideoSource(soap));
			//---------------------------------------
			//GetVideoSourcesResponse token - auto generate 
			trt__GetVideoSourcesResponse.VideoSources.back()->token = sha1(SourceId_Id[i]);
			//---------------------------------------
			if(!arrayVideoSources[i]["Framerate"].isNull())
			{
				float Framerate = arrayVideoSources[i]["Framerate"].asFloat();
				trt__GetVideoSourcesResponse.VideoSources.back()->Framerate = Framerate;
			}
			if(!arrayVideoSources[i]["Resolution"].isNull())
			{
				trt__GetVideoSourcesResponse.VideoSources.back()->Resolution = soap_new_tt__VideoResolution(soap);
				if(!arrayVideoSources[i]["Resolution"]["Width"].isNull())
				{
					int Width = arrayVideoSources[i]["Resolution"]["Width"].asInt();
					trt__GetVideoSourcesResponse.VideoSources.back()->Resolution->Width = Width;
				}
				if(!arrayVideoSources[i]["Resolution"]["Height"].isNull())
				{
					int Height = arrayVideoSources[i]["Resolution"]["Height"].asInt();
					trt__GetVideoSourcesResponse.VideoSources.back()->Resolution->Height = Height;
				}
			}


			if(!arrayVideoSources[i]["Imaging"].isNull())
			{
				trt__GetVideoSourcesResponse.VideoSources.back()->Imaging = soap_new_tt__ImagingSettings(soap);
				if(!arrayVideoSources[i]["Imaging"]["BacklightCompensation"].isNull())
				{
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->BacklightCompensation = soap_new_tt__BacklightCompensation(soap);
					if(!arrayVideoSources[i]["Imaging"]["BacklightCompensation"]["Mode"].isNull())
					{
						if(arrayVideoSources[i]["Imaging"]["BacklightCompensation"]["Mode"].asString() == "ON")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->BacklightCompensation->Mode = tt__BacklightCompensationMode__ON;
						}
						if(arrayVideoSources[i]["Imaging"]["BacklightCompensation"]["Mode"].asString() == "OFF")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->BacklightCompensation->Mode = tt__BacklightCompensationMode__OFF;
						}
					}
					if(!arrayVideoSources[i]["Imaging"]["BacklightCompensation"]["Level"].isNull())
					{
						float BacklightCompensationLevel = arrayVideoSources[i]["Imaging"]["BacklightCompensation"]["Level"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->BacklightCompensation->Level = BacklightCompensationLevel;
					}
				}
				if(!arrayVideoSources[i]["Imaging"]["Brightness"].isNull())
				{
					float *Brightness = new float(arrayVideoSources[i]["Imaging"]["Brightness"].asFloat());
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Brightness = Brightness;
				}
				if(!arrayVideoSources[i]["Imaging"]["ColorSaturation"].isNull())
				{
					float *ColorSaturation = new float(arrayVideoSources[i]["Imaging"]["ColorSaturation"].asFloat());
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->ColorSaturation = ColorSaturation;
				}
				if(!arrayVideoSources[i]["Imaging"]["Contrast"].isNull())
				{
					float *Contrast = new float(arrayVideoSources[i]["Imaging"]["Contrast"].asFloat());
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Contrast = Contrast;
				}


				if(!arrayVideoSources[i]["Imaging"]["Exposure"].isNull())
				{
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure = soap_new_tt__Exposure(soap);
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["Mode"].isNull())
					{
						if(arrayVideoSources[i]["Imaging"]["Exposure"]["Mode"].asString() == "AUTO")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->Mode = tt__ExposureMode__AUTO;
						}
						if(arrayVideoSources[i]["Imaging"]["Exposure"]["Mode"].asString() == "MANUAL")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->Mode = tt__ExposureMode__MANUAL;
						}
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["MinExposureTime"].isNull())
					{
						float MinExposureTime = arrayVideoSources[i]["Imaging"]["Exposure"]["MinExposureTime"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->MinExposureTime = MinExposureTime;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["MaxExposureTime"].isNull())
					{
						float MaxExposureTime = arrayVideoSources[i]["Imaging"]["Exposure"]["MaxExposureTime"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->MaxExposureTime = MaxExposureTime;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["MinGain"].isNull())
					{
						float MinGain = arrayVideoSources[i]["Imaging"]["Exposure"]["MinGain"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->MinGain = MinGain;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["MaxGain"].isNull())
					{
						float MaxGain = arrayVideoSources[i]["Imaging"]["Exposure"]["MaxGain"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->MaxGain = MaxGain;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["MinIris"].isNull())
					{
						float MinIris = arrayVideoSources[i]["Imaging"]["Exposure"]["MinIris"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->MinIris = MinIris;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["MaxIris"].isNull())
					{
						float MaxIris = arrayVideoSources[i]["Imaging"]["Exposure"]["MaxIris"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->MaxIris = MaxIris;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["ExposureTime"].isNull())
					{
						float ExposureTime = arrayVideoSources[i]["Imaging"]["Exposure"]["ExposureTime"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->ExposureTime = ExposureTime;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["Gain"].isNull())
					{
						float Gain = arrayVideoSources[i]["Imaging"]["Exposure"]["Gain"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->Gain = Gain;
					}
					if(!arrayVideoSources[i]["Imaging"]["Exposure"]["Iris"].isNull())
					{
						float Iris = arrayVideoSources[i]["Imaging"]["Exposure"]["Iris"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Exposure->Iris = Iris;
					}
				}
				if(!arrayVideoSources[i]["Imaging"]["Focus"].isNull())
				{
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Focus = soap_new_tt__FocusConfiguration(soap);
					if(!arrayVideoSources[i]["Imaging"]["Focus"]["Mode"].isNull())
					{
						if(arrayVideoSources[i]["Imaging"]["Focus"]["Mode"].asString() == "AUTO")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Focus->AutoFocusMode = tt__AutoFocusMode__AUTO;
						}
						if(arrayVideoSources[i]["Imaging"]["Focus"]["Mode"].asString() == "MANUAL")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Focus->AutoFocusMode = tt__AutoFocusMode__MANUAL;
						}
					}
					if(!arrayVideoSources[i]["Imaging"]["Focus"]["DefaultSpeed"].isNull())
					{
						float DefaultSpeed = arrayVideoSources[i]["Imaging"]["Focus"]["DefaultSpeed"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Focus->DefaultSpeed = DefaultSpeed;
					}
					if(!arrayVideoSources[i]["Imaging"]["Focus"]["NearLimit"].isNull())
					{
						float NearLimit = arrayVideoSources[i]["Imaging"]["Focus"]["NearLimit"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Focus->NearLimit = NearLimit;
					}
					if(!arrayVideoSources[i]["Imaging"]["Focus"]["FarLimit"].isNull())
					{
						float FarLimit = arrayVideoSources[i]["Imaging"]["Focus"]["FarLimit"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Focus->FarLimit = FarLimit;
					}
					
				}
				if(!arrayVideoSources[i]["Imaging"]["IrCutFilter"].isNull())
				{
					if(arrayVideoSources[i]["Imaging"]["IrCutFilter"].asString() == "ON")
					{
						tt__IrCutFilterMode *b = new tt__IrCutFilterMode(tt__IrCutFilterMode__ON);
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->IrCutFilter = b;
					}
					if(arrayVideoSources[i]["Imaging"]["IrCutFilter"].asString() == "OFF")
					{
						tt__IrCutFilterMode *b = new tt__IrCutFilterMode(tt__IrCutFilterMode__OFF);
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->IrCutFilter = b;
					}
					if(arrayVideoSources[i]["Imaging"]["IrCutFilter"].asString() == "AUTO")
					{
						tt__IrCutFilterMode *c = new tt__IrCutFilterMode(tt__IrCutFilterMode__AUTO);
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->IrCutFilter = c;
					}
				}
				if(!arrayVideoSources[i]["Imaging"]["Sharpness"].isNull())
				{
					float *Sharpness = new float(arrayVideoSources[i]["Imaging"]["Sharpness"].asFloat());
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->Sharpness = Sharpness;
				}
				if(!arrayVideoSources[i]["Imaging"]["WideDynamicRange"].isNull())
				{
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WideDynamicRange = soap_new_tt__WideDynamicRange(soap);
					if(!arrayVideoSources[i]["Imaging"]["WideDynamicRange"]["Mode"].isNull())
					{
						if(arrayVideoSources[i]["Imaging"]["WideDynamicRange"]["Mode"].asString() == "ON")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WideDynamicRange->Mode = tt__WideDynamicMode__ON;
						}
						if(arrayVideoSources[i]["Imaging"]["WideDynamicRange"]["Mode"].asString() == "OFF")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WideDynamicRange->Mode = tt__WideDynamicMode__OFF;
						}
					}
					if(!arrayVideoSources[i]["Imaging"]["WideDynamicRange"]["Level"].isNull())
					{
						float WideDynamicRangeLevel = arrayVideoSources[i]["Imaging"]["WideDynamicRange"]["Level"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WideDynamicRange->Level = WideDynamicRangeLevel;
					}
				}
				if(!arrayVideoSources[i]["Imaging"]["WhiteBalance"].isNull())
				{
					trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WhiteBalance = soap_new_tt__WhiteBalance(soap);
					if(!arrayVideoSources[i]["Imaging"]["WhiteBalance"]["Mode"].isNull())
					{
						if(arrayVideoSources[i]["Imaging"]["WhiteBalance"]["Mode"].asString() == "AUTO")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WhiteBalance->Mode = tt__WhiteBalanceMode__AUTO;
						}
						if(arrayVideoSources[i]["Imaging"]["WhiteBalance"]["Mode"].asString() == "MANUAL")
						{
							trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WhiteBalance->Mode = tt__WhiteBalanceMode__MANUAL;
						}
					}
					if(!arrayVideoSources[i]["Imaging"]["WhiteBalance"]["CrGain"].isNull())
					{
						float WhiteBalanceCrGain = arrayVideoSources[i]["Imaging"]["WhiteBalance"]["CrGain"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WhiteBalance->CrGain = WhiteBalanceCrGain;
					}
					if(!arrayVideoSources[i]["Imaging"]["WhiteBalance"]["CbGain"].isNull())
					{
						float WhiteBalanceCbGain = arrayVideoSources[i]["Imaging"]["WhiteBalance"]["CbGain"].asFloat();
						trt__GetVideoSourcesResponse.VideoSources.back()->Imaging->WhiteBalance->CbGain = WhiteBalanceCbGain;
					}
				}
			}


		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioSources */
int __trt__GetAudioSources(struct soap *soap, _trt__GetAudioSources *trt__GetAudioSources, _trt__GetAudioSourcesResponse &trt__GetAudioSourcesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioSources" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioOutputs */
int __trt__GetAudioOutputs(struct soap *soap, _trt__GetAudioOutputs *trt__GetAudioOutputs, _trt__GetAudioOutputsResponse &trt__GetAudioOutputsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__CreateProfile */
int __trt__CreateProfile(struct soap *soap, _trt__CreateProfile *trt__CreateProfile, _trt__CreateProfileResponse &trt__CreateProfileResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__CreateProfile" << std::endl;
	std::cout << "__trt__CreateProfile name: " << trt__CreateProfile->Name << std::endl;
	std::cout << "__trt__CreateProfile Token: " << trt__CreateProfile->Token << std::endl;


	trt__CreateProfileResponse.Profile = soap_new_tt__Profile(soap);
	std::string profileId = trt__CreateProfile->Name + std::to_string(time(NULL));	//add timestamp
	trt__CreateProfileResponse.Profile->token = sha1(profileId);
	trt__CreateProfileResponse.Profile->Name = trt__CreateProfile->Name;
	std::cout << "__trt__CreateProfileResponse profileId: " << profileId << std::endl;
	std::cout << "__trt__CreateProfileResponse Token: " << trt__CreateProfileResponse.Profile->token << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetProfile */
int __trt__GetProfile(struct soap *soap, _trt__GetProfile *trt__GetProfile, _trt__GetProfileResponse &trt__GetProfileResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetProfile" << std::endl;
	std::cout << "__trt__GetProfile token: " << trt__GetProfile->ProfileToken << std::endl;


	std::string dataResponse;
	httplib::Client cli(scheme_host_port);
	//POST API to get get URI
	for(unsigned int i = 0; i < ProfileId.size(); i++)
	{
		if(trt__GetProfile->ProfileToken == sha1(ProfileId[i]))
		{
			Json::Value dataJson;
			dataJson["ProfileToken"] = ProfileId[i];

			Json::StyledWriter StyledWriter;
			std::string data = StyledWriter.write(dataJson);
			// std::cout << data;
			auto res = cli.Post("/dvr/v1.0/GetProfile", data, "text/plain");
			dataResponse = res->body;
			std::cout << dataResponse << std::endl;
			break;
		}
	}

	std::string dataResponse1 = R"({
    "GetProfileResponse": {
						"Profile": {
							"Name": "MJPEG",
							"VideoSourceConfiguration": {
								"Name": "video source configuration 0",
								"UseCount": 5,
								"SourceToken": "a8e142d5-dae2-49f8-9714-fdd0ededcb22",
								"Bounds": {
									"x": 0,
									"y": 0,
									"height": 1080,
									"width": 1920
								}
							},
							"VideoEncoderConfiguration": {
								"Name": "encoder0",
								"UseCount": 1,
								"Encoding": "JPEG",
								"Resolution": {
									"Width": 800,
									"Height": 600
								},
								"Quality": 10,
								"RateControl": {
									"FrameRateLimit": 2,
									"EncodingInterval": 1,
									"BitrateLimit": 6144
								},
								"Multicast": {
									"Address": {
										"Type": "IPv4",
										"IPv4Address": "0.0.0.0"
									},
									"Port": 0,
									"TTL": 5,
									"AutoStart": false
								},
								"SessionTimeout": "PT0H0M30S"
							}
						}
					}
				})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetProfileResponse"]["Profile"].isNull())
	{
		trt__GetProfileResponse.Profile = soap_new_tt__Profile(soap);
		//---------------------------------------
		//Profile token - auto generate
		trt__GetProfileResponse.Profile->token = sha1(root_dataResponse["GetProfileResponse"]["Profile"]["token"].asString());
		//---------------------------------------
		if(!root_dataResponse["GetProfileResponse"]["Profile"]["fixed"].isNull())
		{
			bool *Profilefixed = new bool(root_dataResponse["GetProfileResponse"]["Profile"]["fixed"].asBool());
			trt__GetProfileResponse.Profile->fixed = Profilefixed;
		}
		if(!root_dataResponse["GetProfileResponse"]["Profile"]["Name"].isNull())
		{
			std::string ProfileName = root_dataResponse["GetProfileResponse"]["Profile"]["Name"].asString();
			trt__GetProfileResponse.Profile->Name = ProfileName;
		}
		if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"].isNull())
		{
			trt__GetProfileResponse.Profile->VideoSourceConfiguration = soap_new_tt__VideoSourceConfiguration(soap);
			//---------------------------------------
			//VideoSourceConfiguration token - auto generate
			trt__GetProfileResponse.Profile->VideoSourceConfiguration->token = sha1(root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["token"].asString());
			//---------------------------------------
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Name"].isNull())
			{
				std::string VideoSourceName = root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Name"].asString();
				trt__GetProfileResponse.Profile->VideoSourceConfiguration->Name = VideoSourceName;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["UseCount"].isNull())
			{
				int VideoSourceUseCount = root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["UseCount"].asInt();
				trt__GetProfileResponse.Profile->VideoSourceConfiguration->UseCount = VideoSourceUseCount;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["ViewMode"].isNull())
			{
				std::string *VideoSourceViewMode = new std::string(root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["ViewMode"].asString());
				trt__GetProfileResponse.Profile->VideoSourceConfiguration->ViewMode = VideoSourceViewMode;
			}
			//---------------------------------------
			//VideoSourceConfiguration SourceToken - auto generate
			trt__GetProfileResponse.Profile->VideoSourceConfiguration->SourceToken = sha1(root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["SourceToken"].asString());
			//---------------------------------------
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"].isNull())
			{
				trt__GetProfileResponse.Profile->VideoSourceConfiguration->Bounds =  soap_new_tt__IntRectangle(soap);
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["x"].isNull())
				{
					int VideoSourceBoundsx = root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["x"].asInt();
					trt__GetProfileResponse.Profile->VideoSourceConfiguration->Bounds->x = VideoSourceBoundsx;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["y"].isNull())
				{
					int VideoSourceBoundsy = root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["y"].asInt();
					trt__GetProfileResponse.Profile->VideoSourceConfiguration->Bounds->y = VideoSourceBoundsy;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["width"].isNull())
				{
					int VideoSourceBoundswidth = root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["width"].asInt();
					trt__GetProfileResponse.Profile->VideoSourceConfiguration->Bounds->width = VideoSourceBoundswidth;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["height"].isNull())
				{
					int VideoSourceBoundsheight = root_dataResponse["GetProfileResponse"]["Profile"]["VideoSourceConfiguration"]["Bounds"]["height"].asInt();
					trt__GetProfileResponse.Profile->VideoSourceConfiguration->Bounds->height = VideoSourceBoundsheight;
				}
			}
		}
		if(!root_dataResponse["GetProfileResponse"]["Profile"]["AudioSourceConfiguration"].isNull())
		{
			trt__GetProfileResponse.Profile->AudioSourceConfiguration = soap_new_tt__AudioSourceConfiguration(soap);
			//---------------------------------------
			//AudioSourceConfiguration token - auto generate
			//---------------------------------------
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["AudioSourceConfiguration"]["Name"].isNull())
			{
				std::string AudioSourceName = root_dataResponse["GetProfileResponse"]["Profile"]["AudioSourceConfiguration"]["Name"].asString();
				trt__GetProfileResponse.Profile->AudioSourceConfiguration->Name = AudioSourceName;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["AudioSourceConfiguration"]["UseCount"].isNull())
			{
				int AudioSourceUseCount = root_dataResponse["GetProfileResponse"]["Profile"]["AudioSourceConfiguration"]["UseCount"].asInt();
				trt__GetProfileResponse.Profile->AudioSourceConfiguration->UseCount = AudioSourceUseCount;
			}
			//---------------------------------------
			//AudioSourceConfiguration SourceToken - auto generate
			//---------------------------------------
		}
		if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"].isNull())
		{
			trt__GetProfileResponse.Profile->VideoEncoderConfiguration = soap_new_tt__VideoEncoderConfiguration(soap);
			//---------------------------------------
			//VideoEncoderConfiguration token - auto generate
			trt__GetProfileResponse.Profile->VideoEncoderConfiguration->token = sha1(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["token"].asString());
			//---------------------------------------
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Name"].isNull())
			{
				std::string VideoEncoderName = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Name"].asString();
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Name = VideoEncoderName;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["UseCount"].isNull())
			{
				int VideoEncoderUseCount = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["UseCount"].asInt();
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->UseCount = VideoEncoderUseCount;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["GuaranteedFrameRate"].isNull())
			{
				bool *VideoEncoderGuaranteedFrameRate = new bool(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["GuaranteedFrameRate"].asBool());
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->GuaranteedFrameRate = VideoEncoderGuaranteedFrameRate;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Encoding"].isNull())
			{
				if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Encoding"].asString() == "JPEG")
				{
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Encoding = tt__VideoEncoding__JPEG;
				}
				if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Encoding"].asString() == "MPEG4")
				{
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Encoding = tt__VideoEncoding__MPEG4;
				}
				if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Encoding"].asString() == "H264")
				{
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Encoding = tt__VideoEncoding__H264;
				}
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Resolution"].isNull())
			{
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Resolution = soap_new_tt__VideoResolution(soap);
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Resolution"]["Width"].isNull())
				{
					int VideoEncoderWidth = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Resolution"]["Width"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Resolution->Width = VideoEncoderWidth;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Resolution"]["Height"].isNull())
				{
					int VideoEncoderHeight = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Resolution"]["Height"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Resolution->Height = VideoEncoderHeight;
				}
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Quality"].isNull())
			{
				float VideoEncoderQuality = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Quality"].asFloat();
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Quality = VideoEncoderQuality;
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"].isNull())
			{
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->RateControl = soap_new_tt__VideoRateControl(soap);
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"]["FrameRateLimit"].isNull())
				{
					int VideoEncoderFrameRateLimit = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"]["FrameRateLimit"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->RateControl->FrameRateLimit = VideoEncoderFrameRateLimit;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"]["EncodingInterval"].isNull())
				{
					int VideoEncoderEncodingInterval = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"]["EncodingInterval"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->RateControl->EncodingInterval = VideoEncoderEncodingInterval;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"]["BitrateLimit"].isNull())
				{
					int VideoEncoderBitrateLimit = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["RateControl"]["BitrateLimit"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->RateControl->BitrateLimit = VideoEncoderBitrateLimit;
				}
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["MPEG4"].isNull())
			{
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->MPEG4 = soap_new_tt__Mpeg4Configuration(soap);
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["MPEG4"]["GovLength"].isNull())
				{
					int MPEG4GovLength = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["MPEG4"]["GovLength"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->MPEG4->GovLength = MPEG4GovLength;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["MPEG4"]["Mpeg4Profile"].isNull())
				{
					if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["MPEG4"]["Mpeg4Profile"].asString() == "SP")
					{
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__SP;
					}
					else if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["MPEG4"]["Mpeg4Profile"].asString() == "ASP")
					{
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__ASP;
					}
				}
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"].isNull())
			{
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->H264 = soap_new_tt__H264Configuration(soap);
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["GovLength"].isNull())
				{
					int H264GovLength = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["GovLength"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->H264->GovLength = H264GovLength;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["H264Profile"].isNull())
				{
					if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "Baseline")
					{
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__Baseline;
					}
					else if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "Main")
					{
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__Main;
					}
					else if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "Extended")
					{
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__Extended;
					}
					else if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "High")
					{
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__High;
					}
				}
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"].isNull())
			{
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast = soap_new_tt__MulticastConfiguration(soap);
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"].isNull())
				{
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->Address = soap_new_tt__IPAddress(soap);
					if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["Type"].isNull())
					{
						if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["Type"].asString() == "IPv4")
						{
							trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->Address->Type = tt__IPType__IPv4;
						}
						if(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["Type"].asString() == "IPv6")
						{
							trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->Address->Type = tt__IPType__IPv6;
						}
					}
					if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv4Address"].isNull())
					{
						std::string *VideoEncoderIPv4Address = new std::string(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv4Address"].asString());
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->Address->IPv4Address = VideoEncoderIPv4Address;
					}
					if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv6Address"].isNull())
					{
						std::string *VideoEncoderIPv6Address = new std::string(root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv6Address"].asString());
						trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->Address->IPv6Address = VideoEncoderIPv6Address;
					}
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Port"].isNull())
				{
					int VideoEncoderMulticastPort = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["Port"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->Port = VideoEncoderMulticastPort;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["TTL"].isNull())
				{
					int VideoEncoderMulticastTTL = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["TTL"].asInt();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->TTL = VideoEncoderMulticastTTL;
				}
				if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["AutoStart"].isNull())
				{
					bool VideoEncoderMulticastAutoStart = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["Multicast"]["AutoStart"].asBool();
					trt__GetProfileResponse.Profile->VideoEncoderConfiguration->Multicast->AutoStart = VideoEncoderMulticastAutoStart;
				}
			}
			if(!root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["SessionTimeout"].isNull())
			{
				std::string VideoEncoderSessionTimeout = root_dataResponse["GetProfileResponse"]["Profile"]["VideoEncoderConfiguration"]["SessionTimeout"].asString();
				trt__GetProfileResponse.Profile->VideoEncoderConfiguration->SessionTimeout = VideoEncoderSessionTimeout;
			}
		}
	}

	return SOAP_OK;
}


/** Auto-test server operation __trt__GetProfiles */
int __trt__GetProfiles(struct soap *soap, _trt__GetProfiles *trt__GetProfiles, _trt__GetProfilesResponse &trt__GetProfilesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetProfiles" << std::endl;
	int err = soap_verify(soap);
	if(err != SOAP_OK)
	{
		return err;
	}


	std::string dataResponse;
	if (auto res = httplib::Client(scheme_host_port).Get("/dvr/v1.0/GetProfiles")) {
		dataResponse = res->body;
	} else {
		std::cout << "Status: " << res.error() << std::endl;
	}



std::string dataResponse1 = R"({
								"GetProfilesResponse":{
									"Profiles":[
										{
											"token":"0-0",
											"Name":"profile-0-0",
											"VideoSourceConfiguration":{
												"token":"0",
												"Name":"0",
												"UseCount": 5,
												"Bounds":{
													"x":0,
													"y":0,
													"width":2064,
													"height":1544
												}
											},
											"VideoEncoderConfiguration":{
												"token":"0",
												"Name":"H264-ENC",
												"UseCount": 1,
												"Encoding":"JPEG",
												"Resolution":{
													"Width":1920,
													"Height":1080
												},
												"Quality":10,
												"RateControl":{
													"FrameRateLimit":25,
													"EncodingInterval":1,
													"BitrateLimit":6144
												},
												"Multicast":{
													"Address":{
														"Type":"IPv4",
														"IPv4Address":"0.0.0.0",
														"IPv6Address":""
													},
													"Port":8556,
													"TTL": 5,
													"AutoStart": false
												},
												"SessionTimeout": "PT0H0M30S"
											}
										},
										{
											"token":"1-1",
											"Name":"profile-1-1",
											"VideoSourceConfiguration":{
												"token":"0",
												"Name":"1",
												"UseCount": 5,
												"Bounds":{
													"x":0,
													"y":0,
													"width":2432,
													"height":2056
												}
											},
											"VideoEncoderConfiguration":{
												"token":"1",
												"Name":"H264-ENC",
												"UseCount": 1,
												"Encoding":"H264",
												"Resolution":{
													"Width":1920,
													"Height":1080
												},
												"Quality":10,
												"RateControl":{
													"FrameRateLimit":25,
													"EncodingInterval":1,
													"BitrateLimit":2560
												},
												"H264": {
													"GovLength": 20,
													"H264Profile": "Main"
												},
												"Multicast":{
													"Address":{
														"Type":"IPv4",
														"IPv4Address":"0.0.0.0",
														"IPv6Address":""
													},
													"Port":8556
													"TTL": 5,
													"AutoStart": false
												},
												"SessionTimeout": "PT0H0M30S"
											}
										}
									]
								}
							})";


	std::string dataResponse2 = R"({
									"GetProfilesResponse": {
										"Profiles": [
											{
												"token": "profiletoken1",
												"Name": "MJPEG",
												"VideoSourceConfiguration": {
													"token": "60cf04e1-c0d6-41b5-ba6c-087098f68685",
													"Name": "video source configuration 0",
													"UseCount": 5,
													"SourceToken": "a8e142d5-dae2-49f8-9714-fdd0ededcb22",
													"Bounds": {
														"x": 0,
														"y": 0,
														"height": 1080,
														"width": 1920
													}
												},
												"VideoEncoderConfiguration": {
													"token": "VideoEncodertoken1",
													"Name": "encoder0",
													"UseCount": 1,
													"Encoding": "JPEG",
													"Resolution": {
														"Width": 1024,
														"Height": 768
													},
													"Quality": 10,
													"RateControl": {
														"FrameRateLimit": 2,
														"EncodingInterval": 1,
														"BitrateLimit": 6144
													},
													"Multicast": {
														"Address": {
															"Type": "IPv4",
															"IPv4Address": "0.0.0.0"
														},
														"Port": 0,
														"TTL": 5,
														"AutoStart": false
													},
													"SessionTimeout": "PT0H0M30S"
												}
											}
										]
									}
								})";


	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetProfilesResponse"]["Profiles"].isNull())
	{
		// ProfileId.clear();
		// SourceId.clear();
		// SourceId_Id.clear();
		// EncoderId.clear();
		Json::Value arrayProfiles = root_dataResponse["GetProfilesResponse"]["Profiles"];
		for(unsigned int i = 0; i<arrayProfiles.size(); i++)
		{
			trt__GetProfilesResponse.Profiles.push_back(soap_new_tt__Profile(soap));
			//---------------------------------------
			//Profiles token - auto generate
			if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["token"].isNull())
			{
				// ProfileId.push_back(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["token"].asString());
				// trt__GetProfilesResponse.Profiles.back()->token = "34918c37-2f8c-4eb0-913b-96257fab204c";
				trt__GetProfilesResponse.Profiles.back()->token = sha1(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["token"].asString());
			}
			//---------------------------------------
			if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["fixed"].isNull())
			{
				bool *Profilesfixed = new bool(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["fixed"].asBool());
				trt__GetProfilesResponse.Profiles.back()->fixed = Profilesfixed;
			}
			if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["Name"].isNull())
			{
				std::string ProfilesName = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["Name"].asString();
				trt__GetProfilesResponse.Profiles.back()->Name = ProfilesName;
			}
			if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"].isNull())
			{
				trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration = soap_new_tt__VideoSourceConfiguration(soap);
				//---------------------------------------
				//VideoSourceConfiguration token - auto generate
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["token"].isNull())
				{
					// SourceId.push_back(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["token"].asString());
					trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->token = sha1(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["token"].asString());
					// trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->token = "60cf04e1-c0d6-41b5-ba6c-087098f68685";
				}
				
				//---------------------------------------
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Name"].isNull())
				{
					std::string VideoSourceName = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Name"].asString();
					trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->Name = VideoSourceName;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["UseCount"].isNull())
				{
					int VideoSourceUseCount = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["UseCount"].asInt();
					trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->UseCount = VideoSourceUseCount;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["ViewMode"].isNull())
				{
					std::string *VideoSourceViewMode = new std::string(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["ViewMode"].asString());
					trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->ViewMode = VideoSourceViewMode;
				}
				//---------------------------------------
				//VideoSourceConfiguration SourceToken - auto generate 
				trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->SourceToken = sha1(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["token"].asString() + ExpandSourceId);
				//---------------------------------------
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"].isNull())
				{
					trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->Bounds =  soap_new_tt__IntRectangle(soap);
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["x"].isNull())
					{
						int VideoSourceBoundsx = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["x"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->Bounds->x = VideoSourceBoundsx;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["y"].isNull())
					{
						int VideoSourceBoundsy = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["y"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->Bounds->y = VideoSourceBoundsy;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["width"].isNull())
					{
						int VideoSourceBoundswidth = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["width"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->Bounds->width = VideoSourceBoundswidth;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["height"].isNull())
					{
						int VideoSourceBoundsheight = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoSourceConfiguration"]["Bounds"]["height"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoSourceConfiguration->Bounds->height = VideoSourceBoundsheight;
					}
				}
			}
			if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["AudioSourceConfiguration"].isNull())
			{
				trt__GetProfilesResponse.Profiles.back()->AudioSourceConfiguration = soap_new_tt__AudioSourceConfiguration(soap);
				//---------------------------------------
				//AudioSourceConfiguration token - auto generate
				//---------------------------------------
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["AudioSourceConfiguration"]["Name"].isNull())
				{
					std::string AudioSourceName = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["AudioSourceConfiguration"]["Name"].asString();
					trt__GetProfilesResponse.Profiles.back()->AudioSourceConfiguration->Name = AudioSourceName;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["AudioSourceConfiguration"]["UseCount"].isNull())
				{
					int AudioSourceUseCount = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["AudioSourceConfiguration"]["UseCount"].asInt();
					trt__GetProfilesResponse.Profiles.back()->AudioSourceConfiguration->UseCount = AudioSourceUseCount;
				}
				//---------------------------------------
				//AudioSourceConfiguration SourceToken - auto generate
				//---------------------------------------
			}
			if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"].isNull())
			{
				trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration = soap_new_tt__VideoEncoderConfiguration(soap);
				//---------------------------------------
				//VideoEncoderConfiguration token - auto generate 
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["token"].isNull())
				{
					// SourceId.push_back(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["token"].asString());
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->token = sha1(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["token"].asString());
					
				}
				//---------------------------------------
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Name"].isNull())
				{
					std::string VideoEncoderName = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Name"].asString();
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Name = VideoEncoderName;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["UseCount"].isNull())
				{
					int VideoEncoderUseCount = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["UseCount"].asInt();
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->UseCount = VideoEncoderUseCount;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["GuaranteedFrameRate"].isNull())
				{
					bool *VideoEncoderGuaranteedFrameRate = new bool(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["GuaranteedFrameRate"].asBool());
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->GuaranteedFrameRate = VideoEncoderGuaranteedFrameRate;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Encoding"].isNull())
				{
					if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Encoding"].asString() == "JPEG")
					{
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Encoding = tt__VideoEncoding__JPEG;
					}
					if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Encoding"].asString() == "MPEG4")
					{
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Encoding = tt__VideoEncoding__MPEG4;
					}
					if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Encoding"].asString() == "H264")
					{
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Encoding = tt__VideoEncoding__H264;
					}
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Resolution"].isNull())
				{
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Resolution = soap_new_tt__VideoResolution(soap);
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Resolution"]["Width"].isNull())
					{
						int VideoEncoderWidth = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Resolution"]["Width"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Resolution->Width = VideoEncoderWidth;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Resolution"]["Height"].isNull())
					{
						int VideoEncoderHeight = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Resolution"]["Height"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Resolution->Height = VideoEncoderHeight;
					}
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Quality"].isNull())
				{
					float VideoEncoderQuality = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Quality"].asFloat();
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Quality = VideoEncoderQuality;
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"].isNull())
				{
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->RateControl = soap_new_tt__VideoRateControl(soap);
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"]["FrameRateLimit"].isNull())
					{
						int VideoEncoderFrameRateLimit = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"]["FrameRateLimit"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->RateControl->FrameRateLimit = VideoEncoderFrameRateLimit;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"]["EncodingInterval"].isNull())
					{
						int VideoEncoderEncodingInterval = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"]["EncodingInterval"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->RateControl->EncodingInterval = VideoEncoderEncodingInterval;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"]["BitrateLimit"].isNull())
					{
						int VideoEncoderBitrateLimit = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["RateControl"]["BitrateLimit"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->RateControl->BitrateLimit = VideoEncoderBitrateLimit;
					}
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["MPEG4"].isNull())
				{
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->MPEG4 = soap_new_tt__Mpeg4Configuration(soap);
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["MPEG4"]["GovLength"].isNull())
					{
						int MPEG4GovLength = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["MPEG4"]["GovLength"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->MPEG4->GovLength = MPEG4GovLength;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["MPEG4"]["Mpeg4Profile"].isNull())
					{
						if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["MPEG4"]["Mpeg4Profile"].asString() == "SP")
						{
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__SP;
						}
						else if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["MPEG4"]["Mpeg4Profile"].asString() == "ASP")
						{
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__ASP;
						}
					}
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"].isNull())
				{
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->H264 = soap_new_tt__H264Configuration(soap);
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["GovLength"].isNull())
					{
						int H264GovLength = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["GovLength"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->H264->GovLength = H264GovLength;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["H264Profile"].isNull())
					{
						if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "Baseline")
						{
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__Baseline;
						}
						else if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "Main")
						{
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__Main;
						}
						else if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "Extended")
						{
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__Extended;
						}
						else if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["H264"]["H264Profile"].asString() == "High")
						{
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->H264->H264Profile = tt__H264Profile__High;
						}
					}
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"].isNull())
				{
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast = soap_new_tt__MulticastConfiguration(soap);
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"].isNull())
					{
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->Address = soap_new_tt__IPAddress(soap);
						if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["Type"].isNull())
						{
							if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["Type"].asString() == "IPv4")
							{
								trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->Address->Type = tt__IPType__IPv4;
							}
							if(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["Type"].asString() == "IPv6")
							{
								trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->Address->Type = tt__IPType__IPv6;
							}
						}
						if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv4Address"].isNull())
						{
							std::string *VideoEncoderIPv4Address = new std::string(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv4Address"].asString());
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->Address->IPv4Address = VideoEncoderIPv4Address;
						}
						if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv6Address"].isNull())
						{
							std::string *VideoEncoderIPv6Address = new std::string(root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Address"]["IPv6Address"].asString());
							trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->Address->IPv6Address = VideoEncoderIPv6Address;
						}
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Port"].isNull())
					{
						int VideoEncoderMulticastPort = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["Port"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->Port = VideoEncoderMulticastPort;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["TTL"].isNull())
					{
						int VideoEncoderMulticastTTL = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["TTL"].asInt();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->TTL = VideoEncoderMulticastTTL;
					}
					if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["AutoStart"].isNull())
					{
						bool VideoEncoderMulticastAutoStart = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["Multicast"]["AutoStart"].asBool();
						trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->Multicast->AutoStart = VideoEncoderMulticastAutoStart;
					}
				}
				if(!root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["SessionTimeout"].isNull())
				{
					std::string VideoEncoderSessionTimeout = root_dataResponse["GetProfilesResponse"]["Profiles"][i]["VideoEncoderConfiguration"]["SessionTimeout"].asString();
					trt__GetProfilesResponse.Profiles.back()->VideoEncoderConfiguration->SessionTimeout = VideoEncoderSessionTimeout;
				}
			}
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddVideoEncoderConfiguration */
int __trt__AddVideoEncoderConfiguration(struct soap *soap, _trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration, _trt__AddVideoEncoderConfigurationResponse &trt__AddVideoEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddVideoEncoderConfiguration" << std::endl;
	std::cout << "__trt__AddVideoEncoderConfiguration ProfileToken: " << trt__AddVideoEncoderConfiguration->ProfileToken << std::endl;
	std::cout << "__trt__AddVideoEncoderConfiguration ConfigurationToken: " << trt__AddVideoEncoderConfiguration->ConfigurationToken << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddVideoSourceConfiguration */
int __trt__AddVideoSourceConfiguration(struct soap *soap, _trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration, _trt__AddVideoSourceConfigurationResponse &trt__AddVideoSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddVideoSourceConfiguration" << std::endl;
	std::cout << "__trt__AddVideoSourceConfiguration ProfileToken: " << trt__AddVideoSourceConfiguration->ProfileToken << std::endl;
	std::cout << "__trt__AddVideoSourceConfiguration ConfigurationToken: " << trt__AddVideoSourceConfiguration->ConfigurationToken << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddAudioEncoderConfiguration */
int __trt__AddAudioEncoderConfiguration(struct soap *soap, _trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration, _trt__AddAudioEncoderConfigurationResponse &trt__AddAudioEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddAudioEncoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddAudioSourceConfiguration */
int __trt__AddAudioSourceConfiguration(struct soap *soap, _trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration, _trt__AddAudioSourceConfigurationResponse &trt__AddAudioSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddAudioSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddPTZConfiguration */
int __trt__AddPTZConfiguration(struct soap *soap, _trt__AddPTZConfiguration *trt__AddPTZConfiguration, _trt__AddPTZConfigurationResponse &trt__AddPTZConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddPTZConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddVideoAnalyticsConfiguration */
int __trt__AddVideoAnalyticsConfiguration(struct soap *soap, _trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration, _trt__AddVideoAnalyticsConfigurationResponse &trt__AddVideoAnalyticsConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddVideoAnalyticsConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddMetadataConfiguration */
int __trt__AddMetadataConfiguration(struct soap *soap, _trt__AddMetadataConfiguration *trt__AddMetadataConfiguration, _trt__AddMetadataConfigurationResponse &trt__AddMetadataConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddMetadataConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddAudioOutputConfiguration */
int __trt__AddAudioOutputConfiguration(struct soap *soap, _trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration, _trt__AddAudioOutputConfigurationResponse &trt__AddAudioOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddAudioOutputConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__AddAudioDecoderConfiguration */
int __trt__AddAudioDecoderConfiguration(struct soap *soap, _trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration, _trt__AddAudioDecoderConfigurationResponse &trt__AddAudioDecoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__AddAudioDecoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveVideoEncoderConfiguration */
int __trt__RemoveVideoEncoderConfiguration(struct soap *soap, _trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration, _trt__RemoveVideoEncoderConfigurationResponse &trt__RemoveVideoEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveVideoEncoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveVideoSourceConfiguration */
int __trt__RemoveVideoSourceConfiguration(struct soap *soap, _trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration, _trt__RemoveVideoSourceConfigurationResponse &trt__RemoveVideoSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveVideoSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveAudioEncoderConfiguration */
int __trt__RemoveAudioEncoderConfiguration(struct soap *soap, _trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration, _trt__RemoveAudioEncoderConfigurationResponse &trt__RemoveAudioEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveAudioEncoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveAudioSourceConfiguration */
int __trt__RemoveAudioSourceConfiguration(struct soap *soap, _trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration, _trt__RemoveAudioSourceConfigurationResponse &trt__RemoveAudioSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveAudioSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemovePTZConfiguration */
int __trt__RemovePTZConfiguration(struct soap *soap, _trt__RemovePTZConfiguration *trt__RemovePTZConfiguration, _trt__RemovePTZConfigurationResponse &trt__RemovePTZConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemovePTZConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveVideoAnalyticsConfiguration */
int __trt__RemoveVideoAnalyticsConfiguration(struct soap *soap, _trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration, _trt__RemoveVideoAnalyticsConfigurationResponse &trt__RemoveVideoAnalyticsConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveVideoAnalyticsConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveMetadataConfiguration */
int __trt__RemoveMetadataConfiguration(struct soap *soap, _trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration, _trt__RemoveMetadataConfigurationResponse &trt__RemoveMetadataConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveMetadataConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveAudioOutputConfiguration */
int __trt__RemoveAudioOutputConfiguration(struct soap *soap, _trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration, _trt__RemoveAudioOutputConfigurationResponse &trt__RemoveAudioOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveAudioOutputConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__RemoveAudioDecoderConfiguration */
int __trt__RemoveAudioDecoderConfiguration(struct soap *soap, _trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration, _trt__RemoveAudioDecoderConfigurationResponse &trt__RemoveAudioDecoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__RemoveAudioDecoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__DeleteProfile */
int __trt__DeleteProfile(struct soap *soap, _trt__DeleteProfile *trt__DeleteProfile, _trt__DeleteProfileResponse &trt__DeleteProfileResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__DeleteProfile" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoSourceConfigurations */
int __trt__GetVideoSourceConfigurations(struct soap *soap, _trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations, _trt__GetVideoSourceConfigurationsResponse &trt__GetVideoSourceConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoSourceConfigurations" << std::endl;

	std::string dataResponse = R"({
							"GetVideoSourceConfigurationsResponse": {
								"Configurations": [{
									"token": "60cf04e1-c0d6-41b5-ba6c-087098f68685",
									"Name": "video source configuration 0",
									"UseCount": 5,
									"SourceToken": "a8e142d5-dae2-49f8-9714-fdd0ededcb22",
									"Bounds": {
										"height": 1080,
										"width": 1920,
										"y": 0,
										"x": 0
									}
								}]
							}
						})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoSourceConfigurationsResponse"]["Configurations"].isNull())
	{
		Json::Value arrayConfigurations = root_dataResponse["GetVideoSourceConfigurationsResponse"]["Configurations"];
		for(unsigned int i = 0; i < arrayConfigurations.size(); i++)
		{
			trt__GetVideoSourceConfigurationsResponse.Configurations.push_back(soap_new_tt__VideoSourceConfiguration(soap));
			if(!arrayConfigurations[i]["token"].isNull())
			{
				std::string token = arrayConfigurations[i]["token"].asString();
				trt__GetVideoSourceConfigurationsResponse.Configurations.back()->token = token;
			}
			if(!arrayConfigurations[i]["Name"].isNull())
			{
				std::string Name = arrayConfigurations[i]["Name"].asString();
				trt__GetVideoSourceConfigurationsResponse.Configurations.back()->Name = Name;
			}
			if(!arrayConfigurations[i]["UseCount"].isNull())
			{
				int UseCount = arrayConfigurations[i]["UseCount"].asInt();
				trt__GetVideoSourceConfigurationsResponse.Configurations.back()->UseCount = UseCount;
			}
			if(!arrayConfigurations[i]["ViewMode"].isNull())
			{
				std::string *ViewMode = new std::string (arrayConfigurations[i]["ViewMode"].asString());
				trt__GetVideoSourceConfigurationsResponse.Configurations.back()->ViewMode = ViewMode;
			}
			if(!arrayConfigurations[i]["SourceToken"].isNull())
			{
				std::string SourceToken = arrayConfigurations[i]["SourceToken"].asString();
				trt__GetVideoSourceConfigurationsResponse.Configurations.back()->SourceToken = SourceToken;
			}
			if(!arrayConfigurations[i]["Bounds"].isNull())
			{
				trt__GetVideoSourceConfigurationsResponse.Configurations.back()->Bounds = soap_new_tt__IntRectangle(soap);
				if(!arrayConfigurations[i]["Bounds"]["height"].isNull())
				{
					int height = arrayConfigurations[i]["Bounds"]["height"].asInt();
					trt__GetVideoSourceConfigurationsResponse.Configurations.back()->Bounds->height = height;
				}
				if(!arrayConfigurations[i]["Bounds"]["x"].isNull())
				{
					int x = arrayConfigurations[i]["Bounds"]["x"].asInt();
					trt__GetVideoSourceConfigurationsResponse.Configurations.back()->Bounds->x = x;
				}
				if(!arrayConfigurations[i]["Bounds"]["width"].isNull())
				{
					int width = arrayConfigurations[i]["Bounds"]["width"].asInt();
					trt__GetVideoSourceConfigurationsResponse.Configurations.back()->Bounds->width = width;
				}
				if(!arrayConfigurations[i]["Bounds"]["y"].isNull())
				{
					int y = arrayConfigurations[i]["Bounds"]["y"].asInt();
					trt__GetVideoSourceConfigurationsResponse.Configurations.back()->Bounds->y = y;
				}
			}

		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoEncoderConfigurations */
int __trt__GetVideoEncoderConfigurations(struct soap *soap, _trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations, _trt__GetVideoEncoderConfigurationsResponse &trt__GetVideoEncoderConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoEncoderConfigurations" << std::endl;
	
	
	std::string dataResponse;
	if (auto res = httplib::Client(scheme_host_port).Get("/dvr/v1.0/GetVideoEncoderConfigurations")) {
		dataResponse = res->body;
		std::cout << dataResponse << std::endl;
	} else {
		std::cout << "Status: " << res.error() << std::endl;
	}
	
	
	std::string dataResponse1 = R"({
									"GetVideoEncoderConfigurationsResponse": {
										"Configurations": [
											{
												"token": "afsdfqwertergdfg",
												"Name": "encoder0",
												"UseCount": 1,
												"Encoding": "JPEG",
												"Resolution": {
													"Width": 1024,
													"Height": 768
												},
												"Quality": 10,
												"RateControl": {
													"FrameRateLimit": 2,
													"EncodingInterval": 1,
													"BitrateLimit": 6144
												},
												"Multicast": {
													"Address": {
														"Type": "IPv4",
														"IPv4Address": "0.0.0.0"
													},
													"Port": 0,
													"TTL": 5,
													"AutoStart": false
												},
												"SessionTimeout": "PT0H0M30S"
											},
											{
												"Name": "H.264",
												"UseCount": 1,
												"Encoding": "H264",
												"Resolution": {
													"Width": 1280,
													"Height": 1024
												},
												"Quality": 10,
												"RateControl": {
													"FrameRateLimit": 25,
													"EncodingInterval": 1,
													"BitrateLimit": 2560
												},
												"H264": {
													"GovLength": 20,
													"H264Profile": "Main"
												},
												"Multicast": {
													"Address": {
														"Type": "IPv4",
														"IPv4Address": "0.0.0.0"
													},
													"Port": 0,
													"TTL": 5,
													"AutoStart": false
												},
												"SessionTimeout": "PT0H0M30S"
											},
											{
												"Name": "encoder3",
												"UseCount": 1,
												"Encoding": "H264",
												"Resolution": {
													"Width": 800,
													"Height": 600
												},
												"Quality": 10,
												"RateControl": {
													"FrameRateLimit": 20,
													"EncodingInterval": 1,
													"BitrateLimit": 2048
												},
												"H264": {
													"GovLength": 20,
													"H264Profile": "Main"
												},
												"Multicast": {
													"Address": {
														"Type": "IPv4",
														"IPv4Address": "0.0.0.0"
													},
													"Port": 0,
													"TTL": 5,
													"AutoStart": false
												},
												"SessionTimeout": "PT0H0M30S"
											}
										]
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"].isNull())
	{
		Json::Value arrayConfigurations = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"];
		for(unsigned int i = 0; i < arrayConfigurations.size(); i++)
		{
			trt__GetVideoEncoderConfigurationsResponse.Configurations.push_back(soap_new_tt__VideoEncoderConfiguration(soap));
			//---------------------------------------
			//Profiles token - auto generate
			trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->token = sha1(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["token"].asString());
			//---------------------------------------
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Name"].isNull())
			{
				std::string EncoderConfigurationsName = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Name"].asString();
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Name = EncoderConfigurationsName;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["UseCount"].isNull())
			{
				int EncoderConfigurationsUseCount = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["UseCount"].asInt();
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->UseCount = EncoderConfigurationsUseCount;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["GuaranteedFrameRate"].isNull())
			{
				bool *EncoderConfigurationsGuaranteedFrameRate = new bool(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["GuaranteedFrameRate"].asBool());
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->GuaranteedFrameRate = EncoderConfigurationsGuaranteedFrameRate;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Encoding"].isNull())
			{
				if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Encoding"].asString() == "JPEG")
				{
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Encoding = tt__VideoEncoding__JPEG;
				}
				if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Encoding"].asString() == "MPEG4")
				{
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Encoding = tt__VideoEncoding__MPEG4;
				}
				if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Encoding"].asString() == "H264")
				{
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Encoding = tt__VideoEncoding__H264;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Resolution"].isNull())
			{
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Resolution = soap_new_tt__VideoResolution(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Resolution"]["Width"].isNull())
				{
					int EncoderConfigurationsResolutionWidth = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Resolution"]["Width"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Resolution->Width = EncoderConfigurationsResolutionWidth;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Resolution"]["Height"].isNull())
				{
					int EncoderConfigurationsResolutionHeight = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Resolution"]["Height"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Resolution->Height = EncoderConfigurationsResolutionHeight;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Quality"].isNull())
			{
				float EncoderConfigurationsQuality = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Quality"].asFloat();
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Quality = EncoderConfigurationsQuality;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"].isNull())
			{
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->RateControl = soap_new_tt__VideoRateControl(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"]["FrameRateLimit"].isNull())
				{
					int EncoderConfigurationsFrameRateLimit = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"]["FrameRateLimit"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->RateControl->FrameRateLimit = EncoderConfigurationsFrameRateLimit;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"]["EncodingInterval"].isNull())
				{
					int EncoderConfigurationsEncodingInterval = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"]["EncodingInterval"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->RateControl->EncodingInterval = EncoderConfigurationsEncodingInterval;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"]["BitrateLimit"].isNull())
				{
					int EncoderConfigurationsBitrateLimit = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["RateControl"]["BitrateLimit"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->RateControl->BitrateLimit = EncoderConfigurationsBitrateLimit;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["MPEG4"].isNull())
			{
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->MPEG4 = soap_new_tt__Mpeg4Configuration(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["MPEG4"]["GovLength"].isNull())
				{
					int EncoderConfigurationsGovLength = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["MPEG4"]["GovLength"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->MPEG4->GovLength = EncoderConfigurationsGovLength;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["MPEG4"]["Mpeg4Profile"].isNull())
				{
					if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["MPEG4"]["Mpeg4Profile"].asString() == "SP")
					{
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__SP;
					}
					if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["MPEG4"]["Mpeg4Profile"].asString() == "ASP")
					{
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__ASP;
					}
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"].isNull())
			{
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->H264 = soap_new_tt__H264Configuration(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["GovLength"].isNull())
				{
					int EncoderConfigurationsGovLength = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["GovLength"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->H264->GovLength = EncoderConfigurationsGovLength;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["H264Profile"].isNull())
				{
					if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["H264Profile"].asString() == "Baseline")
					{
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->H264->H264Profile = tt__H264Profile__Baseline;
					}
					if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["H264Profile"].asString() == "Main")
					{
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->H264->H264Profile = tt__H264Profile__Main;
					}
					if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["H264Profile"].asString() == "Extended")
					{
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->H264->H264Profile = tt__H264Profile__Extended;
					}
					if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["H264"]["H264Profile"].asString() == "High")
					{
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->H264->H264Profile = tt__H264Profile__High;
					}
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"].isNull())
			{
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast = soap_new_tt__MulticastConfiguration(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"].isNull())
				{
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->Address = soap_new_tt__IPAddress(soap);
					if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["Type"].isNull())
					{
						if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["Type"] == "IPv4")
						{
							trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->Address->Type = tt__IPType__IPv4;
						}
						if(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["Type"] == "IPv6")
						{
							trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->Address->Type = tt__IPType__IPv6;
						}
					}
					if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["IPv4Address"].isNull())
					{
						std::string *IPv4Address = new std::string(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["IPv4Address"].asString());
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->Address->IPv4Address = IPv4Address;
					}
					if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["IPv6Address"].isNull())
					{
						std::string *IPv6Address = new std::string(root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Address"]["IPv6Address"].asString());
						trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->Address->IPv6Address = IPv6Address;
					}
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Port"].isNull())
				{
					int  MulticastPort = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["Port"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->Port = MulticastPort;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["TTL"].isNull())
				{
					int  MulticastTTL = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["TTL"].asInt();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->TTL = MulticastTTL;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["AutoStart"].isNull())
				{
					bool  MulticastAutoStart = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["Multicast"]["AutoStart"].asBool();
					trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->Multicast->AutoStart = MulticastAutoStart;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["SessionTimeout"].isNull())
			{
				std::string SessionTimeout = root_dataResponse["GetVideoEncoderConfigurationsResponse"]["Configurations"][i]["SessionTimeout"].asString();
				trt__GetVideoEncoderConfigurationsResponse.Configurations.back()->SessionTimeout = SessionTimeout;
			}
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioSourceConfigurations */
int __trt__GetAudioSourceConfigurations(struct soap *soap, _trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations, _trt__GetAudioSourceConfigurationsResponse &trt__GetAudioSourceConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioSourceConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioEncoderConfigurations */
int __trt__GetAudioEncoderConfigurations(struct soap *soap, _trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations, _trt__GetAudioEncoderConfigurationsResponse &trt__GetAudioEncoderConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioEncoderConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoAnalyticsConfigurations */
int __trt__GetVideoAnalyticsConfigurations(struct soap *soap, _trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations, _trt__GetVideoAnalyticsConfigurationsResponse &trt__GetVideoAnalyticsConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoAnalyticsConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetMetadataConfigurations */
int __trt__GetMetadataConfigurations(struct soap *soap, _trt__GetMetadataConfigurations *trt__GetMetadataConfigurations, _trt__GetMetadataConfigurationsResponse &trt__GetMetadataConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetMetadataConfigurations" << std::endl;

	std::string dataResponse = R"({
									"GetMetadataConfigurationsResponse": {
										"Configurations": [{
											"CompressionType": "0000a",
											"token": "0000a",
											"Name": "MetadataConfig_Channel1",
											"UseCount": 2,
											"PTZStatus": {
												"Status": false,
												"Position": false
											},
											"Analytics": true,
											"Multicast": {
												"Address": {
													"Type": "IPv4",
													"IPv4Address": "224.2.0.0"
												},
												"Port": 40020,
												"TTL": 64,
												"AutoStart": false
											},
											"SessionTimeout": "PT60S"
										}]
									}
								})";


	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetMetadataConfigurationsResponse"]["Configurations"].isNull())
	{
		Json::Value arrayConfigurations = root_dataResponse["GetMetadataConfigurationsResponse"]["Configurations"];
		for(unsigned int i = 0; i < arrayConfigurations.size(); i++)
		{
			trt__GetMetadataConfigurationsResponse.Configurations.push_back(soap_new_tt__MetadataConfiguration(soap));
			if(!arrayConfigurations[i]["token"].isNull())
			{
				std::string token = arrayConfigurations[i]["token"].asString();
				trt__GetMetadataConfigurationsResponse.Configurations.back()->token = sha1(token);
			}
			if(!arrayConfigurations[i]["Name"].isNull())
			{
				std::string Name = arrayConfigurations[i]["Name"].asString();
				trt__GetMetadataConfigurationsResponse.Configurations.back()->Name = Name;
			}
			if(!arrayConfigurations[i]["UseCount"].isNull())
			{
				int UseCount = arrayConfigurations[i]["UseCount"].asInt();
				trt__GetMetadataConfigurationsResponse.Configurations.back()->UseCount = UseCount;
			}
			if(!arrayConfigurations[i]["CompressionType"].isNull())
			{
				std::string *CompressionType = new std::string(arrayConfigurations[i]["CompressionType"].asString());
				trt__GetMetadataConfigurationsResponse.Configurations.back()->CompressionType = CompressionType;
			}
			if(!arrayConfigurations[i]["GeoLocation"].isNull())
			{
				bool *GeoLocation = new bool(arrayConfigurations[i]["GeoLocation"].asBool());
				trt__GetMetadataConfigurationsResponse.Configurations.back()->GeoLocation = GeoLocation;
			}
			if(!arrayConfigurations[i]["ShapePolygon"].isNull())
			{
				bool *ShapePolygon = new bool(arrayConfigurations[i]["ShapePolygon"].asBool());
				trt__GetMetadataConfigurationsResponse.Configurations.back()->ShapePolygon = ShapePolygon;
			}
			if(!arrayConfigurations[i]["PTZStatus"].isNull())
			{
				trt__GetMetadataConfigurationsResponse.Configurations.back()->PTZStatus = soap_new_tt__PTZFilter(soap);
				if(!arrayConfigurations[i]["PTZStatus"]["Status"].isNull())
				{
					bool Status = arrayConfigurations[i]["PTZStatus"]["Status"].asBool();
					trt__GetMetadataConfigurationsResponse.Configurations.back()->PTZStatus->Status = Status;
				}
				if(!arrayConfigurations[i]["PTZStatus"]["Position"].isNull())
				{
					bool Position = arrayConfigurations[i]["PTZStatus"]["Position"].asBool();
					trt__GetMetadataConfigurationsResponse.Configurations.back()->PTZStatus->Position = Position;
				}
			}
			if(!arrayConfigurations[i]["Analytics"].isNull())
			{
				bool *Analytics = new bool(arrayConfigurations[i]["Analytics"].asBool());
				trt__GetMetadataConfigurationsResponse.Configurations.back()->Analytics = Analytics;
			}
			if(!arrayConfigurations[i]["Multicast"].isNull())
			{
				trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast = soap_new_tt__MulticastConfiguration(soap);
				if(!arrayConfigurations[i]["Multicast"]["Address"].isNull())
				{
					trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->Address = soap_new_tt__IPAddress(soap);
					if(!arrayConfigurations[i]["Multicast"]["Address"]["Type"].isNull())
					{
						if(arrayConfigurations[i]["Multicast"]["Address"]["Type"].asString() == "IPv4")
						{
							trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->Address->Type = tt__IPType__IPv4;
							std::string *IPv4Address = new std::string(arrayConfigurations[i]["Multicast"]["Address"]["IPv4Address"].asString());
							trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->Address->IPv4Address = IPv4Address;
						}
						else if(arrayConfigurations[i]["Multicast"]["Address"]["Type"].asString() == "IPv6")
						{
							trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->Address->Type = tt__IPType__IPv6;
							std::string *IPv6Address = new std::string(arrayConfigurations[i]["Multicast"]["Address"]["IPv6Address"].asString());
							trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->Address->IPv6Address = IPv6Address;
						}
					}
				}
				if(!arrayConfigurations[i]["Multicast"]["Port"].isNull())
				{
					int Port = arrayConfigurations[i]["Multicast"]["Port"].asInt();
					trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->Port = Port;
				}
				if(!arrayConfigurations[i]["Multicast"]["TTL"].isNull())
				{
					int TTL = arrayConfigurations[i]["Multicast"]["TTL"].asInt();
					trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->TTL = TTL;
				}
				if(!arrayConfigurations[i]["Multicast"]["AutoStart"].isNull())
				{
					bool AutoStart = arrayConfigurations[i]["Multicast"]["AutoStart"].asBool();
					trt__GetMetadataConfigurationsResponse.Configurations.back()->Multicast->AutoStart = AutoStart;
				}
			}
			if(!arrayConfigurations[i]["SessionTimeout"].isNull())
			{
				std::string SessionTimeout = arrayConfigurations[i]["SessionTimeout"].asString();
				trt__GetMetadataConfigurationsResponse.Configurations.back()->SessionTimeout = SessionTimeout;
			}


		}

	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioOutputConfigurations */
int __trt__GetAudioOutputConfigurations(struct soap *soap, _trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations, _trt__GetAudioOutputConfigurationsResponse &trt__GetAudioOutputConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioOutputConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioDecoderConfigurations */
int __trt__GetAudioDecoderConfigurations(struct soap *soap, _trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations, _trt__GetAudioDecoderConfigurationsResponse &trt__GetAudioDecoderConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioDecoderConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoSourceConfiguration */
int __trt__GetVideoSourceConfiguration(struct soap *soap, _trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration, _trt__GetVideoSourceConfigurationResponse &trt__GetVideoSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoSourceConfiguration" << std::endl;
	std::cout << "__trt__GetVideoSourceConfiguration ConfigurationToken: " << trt__GetVideoSourceConfiguration->ConfigurationToken << std::endl;
	std::string dataResponse = R"({
									"GetVideoSourceConfigurationResponse": {
										"Configuration": {
											"Name": "video source configuration 0",
											"UseCount": 5,
											"SourceToken": "a8e142d5-dae2-49f8-9714-fdd0ededcb22",
											"Bounds": {
												"height": 1080,
												"width": 1920,
												"y": 0,
												"x": 0
											}
										}
									}
								})";

	
	trt__GetVideoSourceConfigurationResponse.Configuration = soap_new_tt__VideoSourceConfiguration(soap);
	trt__GetVideoSourceConfigurationResponse.Configuration->Name = "video source configuration 0";
	trt__GetVideoSourceConfigurationResponse.Configuration->UseCount = 5;
	trt__GetVideoSourceConfigurationResponse.Configuration->SourceToken = "a8e142d5-dae2-49f8-9714-fdd0ededcb22";
	trt__GetVideoSourceConfigurationResponse.Configuration->Bounds = soap_new_tt__IntRectangle(soap);
	trt__GetVideoSourceConfigurationResponse.Configuration->Bounds->height = 1080;
	trt__GetVideoSourceConfigurationResponse.Configuration->Bounds->width = 1920;
	trt__GetVideoSourceConfigurationResponse.Configuration->Bounds->x = 0;
	trt__GetVideoSourceConfigurationResponse.Configuration->Bounds->y = 0;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoEncoderConfiguration */
int __trt__GetVideoEncoderConfiguration(struct soap *soap, _trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration, _trt__GetVideoEncoderConfigurationResponse &trt__GetVideoEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoEncoderConfiguration" << std::endl;
	std::cout << "__trt__GetVideoEncoderConfiguration ConfigurationToken: " << trt__GetVideoEncoderConfiguration->ConfigurationToken << std::endl;


	std::string dataResponse;
	httplib::Client cli(scheme_host_port);
	//POST API to get get URI
	for(unsigned int i = 0; i < EncoderId.size(); i++)
	{
		if(trt__GetVideoEncoderConfiguration->ConfigurationToken == sha1(EncoderId[i]))
		{
			Json::Value dataJson;
			dataJson["ConfigurationToken"] = EncoderId[i];

			Json::StyledWriter StyledWriter;
			std::string data = StyledWriter.write(dataJson);
			// std::cout << data;
			auto res = cli.Post("/dvr/v1.0/GetVideoEncoderConfiguration", data, "text/plain");
			dataResponse = res->body;
			std::cout << dataResponse << std::endl;
			break;
		}
	}



	std::string dataResponse1 = R"({
									"GetVideoEncoderConfigurationResponse": {
										"Configuration": {
											"Name": "encoder0",
											"UseCount": 1,
											"Encoding": "JPEG",
											"Resolution": {
												"Width": 1024,
												"Height": 768
											},
											"Quality": 10,
											"RateControl": {
												"FrameRateLimit": 2,
												"EncodingInterval": 1,
												"BitrateLimit": 6144
											},
											"Multicast": {
												"Address": {
													"Type": "IPv4",
													"IPv4Address": "0.0.0.0"
												},
												"Port": 0,
												"TTL": 5,
												"AutoStart": false
											},
											"SessionTimeout": "PT0H0M30S"
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"].isNull())
	{
		
		trt__GetVideoEncoderConfigurationResponse.Configuration = soap_new_tt__VideoEncoderConfiguration(soap);
		//---------------------------------------
		//Profiles token - auto generate
		trt__GetVideoEncoderConfigurationResponse.Configuration->token = sha1(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["token"].asString());
		//---------------------------------------
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Name"].isNull())
		{
			std::string EncoderConfigurationName = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Name"].asString();
			trt__GetVideoEncoderConfigurationResponse.Configuration->Name = EncoderConfigurationName;
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["UseCount"].isNull())
		{
			int EncoderConfigurationUseCount = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["UseCount"].asInt();
			trt__GetVideoEncoderConfigurationResponse.Configuration->UseCount = EncoderConfigurationUseCount;
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["GuaranteedFrameRate"].isNull())
		{
			bool *EncoderConfigurationGuaranteedFrameRate = new bool(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["GuaranteedFrameRate"].asBool());
			trt__GetVideoEncoderConfigurationResponse.Configuration->GuaranteedFrameRate = EncoderConfigurationGuaranteedFrameRate;
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Encoding"].isNull())
		{
			if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Encoding"].asString() == "JPEG")
			{
				trt__GetVideoEncoderConfigurationResponse.Configuration->Encoding = tt__VideoEncoding__JPEG;
			}
			if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Encoding"].asString() == "MPEG4")
			{
				trt__GetVideoEncoderConfigurationResponse.Configuration->Encoding = tt__VideoEncoding__MPEG4;
			}
			if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Encoding"].asString() == "H264")
			{
				trt__GetVideoEncoderConfigurationResponse.Configuration->Encoding = tt__VideoEncoding__H264;
			}
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Resolution"].isNull())
		{
			trt__GetVideoEncoderConfigurationResponse.Configuration->Resolution = soap_new_tt__VideoResolution(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Resolution"]["Width"].isNull())
			{
				int EncoderConfigurationResolutionWidth = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Resolution"]["Width"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->Resolution->Width = EncoderConfigurationResolutionWidth;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Resolution"]["Height"].isNull())
			{
				int EncoderConfigurationResolutionHeight = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Resolution"]["Height"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->Resolution->Height = EncoderConfigurationResolutionHeight;
			}
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Quality"].isNull())
		{
			float EncoderConfigurationQuality = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Quality"].asFloat();
			trt__GetVideoEncoderConfigurationResponse.Configuration->Quality = EncoderConfigurationQuality;
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"].isNull())
		{
			trt__GetVideoEncoderConfigurationResponse.Configuration->RateControl = soap_new_tt__VideoRateControl(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"]["FrameRateLimit"].isNull())
			{
				int EncoderConfigurationFrameRateLimit = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"]["FrameRateLimit"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->RateControl->FrameRateLimit = EncoderConfigurationFrameRateLimit;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"]["EncodingInterval"].isNull())
			{
				int EncoderConfigurationEncodingInterval = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"]["EncodingInterval"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->RateControl->EncodingInterval = EncoderConfigurationEncodingInterval;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"]["BitrateLimit"].isNull())
			{
				int EncoderConfigurationBitrateLimit = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["RateControl"]["BitrateLimit"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->RateControl->BitrateLimit = EncoderConfigurationBitrateLimit;
			}
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["MPEG4"].isNull())
		{
			trt__GetVideoEncoderConfigurationResponse.Configuration->MPEG4 = soap_new_tt__Mpeg4Configuration(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["MPEG4"]["GovLength"].isNull())
			{
				int EncoderConfigurationGovLength = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["MPEG4"]["GovLength"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->MPEG4->GovLength = EncoderConfigurationGovLength;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["MPEG4"]["Mpeg4Profile"].isNull())
			{
				if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["MPEG4"]["Mpeg4Profile"].asString() == "SP")
				{
					trt__GetVideoEncoderConfigurationResponse.Configuration->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__SP;
				}
				if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["MPEG4"]["Mpeg4Profile"].asString() == "ASP")
				{
					trt__GetVideoEncoderConfigurationResponse.Configuration->MPEG4->Mpeg4Profile = tt__Mpeg4Profile__ASP;
				}
			}
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"].isNull())
		{
			trt__GetVideoEncoderConfigurationResponse.Configuration->H264 = soap_new_tt__H264Configuration(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["GovLength"].isNull())
			{
				int EncoderConfigurationGovLength = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["GovLength"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->H264->GovLength = EncoderConfigurationGovLength;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["H264Profile"].isNull())
			{
				if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["H264Profile"].asString() == "Baseline")
				{
					trt__GetVideoEncoderConfigurationResponse.Configuration->H264->H264Profile = tt__H264Profile__Baseline;
				}
				if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["H264Profile"].asString() == "Main")
				{
					trt__GetVideoEncoderConfigurationResponse.Configuration->H264->H264Profile = tt__H264Profile__Main;
				}
				if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["H264Profile"].asString() == "Extended")
				{
					trt__GetVideoEncoderConfigurationResponse.Configuration->H264->H264Profile = tt__H264Profile__Extended;
				}
				if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["H264"]["H264Profile"].asString() == "High")
				{
					trt__GetVideoEncoderConfigurationResponse.Configuration->H264->H264Profile = tt__H264Profile__High;
				}
			}
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"].isNull())
		{
			trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast = soap_new_tt__MulticastConfiguration(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"].isNull())
			{
				trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->Address = soap_new_tt__IPAddress(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["Type"].isNull())
				{
					if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["Type"] == "IPv4")
					{
						trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->Address->Type = tt__IPType__IPv4;
					}
					if(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["Type"] == "IPv6")
					{
						trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->Address->Type = tt__IPType__IPv6;
					}
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["IPv4Address"].isNull())
				{
					std::string *IPv4Address = new std::string(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["IPv4Address"].asString());
					trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->Address->IPv4Address = IPv4Address;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["IPv6Address"].isNull())
				{
					std::string *IPv6Address = new std::string(root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Address"]["IPv6Address"].asString());
					trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->Address->IPv6Address = IPv6Address;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Port"].isNull())
			{
				int  MulticastPort = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["Port"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->Port = MulticastPort;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["TTL"].isNull())
			{
				int  MulticastTTL = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["TTL"].asInt();
				trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->TTL = MulticastTTL;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["AutoStart"].isNull())
			{
				bool  MulticastAutoStart = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["Multicast"]["AutoStart"].asBool();
				trt__GetVideoEncoderConfigurationResponse.Configuration->Multicast->AutoStart = MulticastAutoStart;
			}
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["SessionTimeout"].isNull())
		{
			std::string SessionTimeout = root_dataResponse["GetVideoEncoderConfigurationResponse"]["Configuration"]["SessionTimeout"].asString();
			trt__GetVideoEncoderConfigurationResponse.Configuration->SessionTimeout = SessionTimeout;
		}
	}



	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioSourceConfiguration */
int __trt__GetAudioSourceConfiguration(struct soap *soap, _trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration, _trt__GetAudioSourceConfigurationResponse &trt__GetAudioSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioEncoderConfiguration */
int __trt__GetAudioEncoderConfiguration(struct soap *soap, _trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration, _trt__GetAudioEncoderConfigurationResponse &trt__GetAudioEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioEncoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoAnalyticsConfiguration */
int __trt__GetVideoAnalyticsConfiguration(struct soap *soap, _trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration, _trt__GetVideoAnalyticsConfigurationResponse &trt__GetVideoAnalyticsConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoAnalyticsConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetMetadataConfiguration */
int __trt__GetMetadataConfiguration(struct soap *soap, _trt__GetMetadataConfiguration *trt__GetMetadataConfiguration, _trt__GetMetadataConfigurationResponse &trt__GetMetadataConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetMetadataConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioOutputConfiguration */
int __trt__GetAudioOutputConfiguration(struct soap *soap, _trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration, _trt__GetAudioOutputConfigurationResponse &trt__GetAudioOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioDecoderConfiguration */
int __trt__GetAudioDecoderConfiguration(struct soap *soap, _trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration, _trt__GetAudioDecoderConfigurationResponse &trt__GetAudioDecoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleVideoEncoderConfigurations */
int __trt__GetCompatibleVideoEncoderConfigurations(struct soap *soap, _trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations, _trt__GetCompatibleVideoEncoderConfigurationsResponse &trt__GetCompatibleVideoEncoderConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleVideoEncoderConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleVideoSourceConfigurations */
int __trt__GetCompatibleVideoSourceConfigurations(struct soap *soap, _trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations, _trt__GetCompatibleVideoSourceConfigurationsResponse &trt__GetCompatibleVideoSourceConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleVideoSourceConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleAudioEncoderConfigurations */
int __trt__GetCompatibleAudioEncoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations, _trt__GetCompatibleAudioEncoderConfigurationsResponse &trt__GetCompatibleAudioEncoderConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleAudioEncoderConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleAudioSourceConfigurations */
int __trt__GetCompatibleAudioSourceConfigurations(struct soap *soap, _trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations, _trt__GetCompatibleAudioSourceConfigurationsResponse &trt__GetCompatibleAudioSourceConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleAudioSourceConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleVideoAnalyticsConfigurations */
int __trt__GetCompatibleVideoAnalyticsConfigurations(struct soap *soap, _trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations, _trt__GetCompatibleVideoAnalyticsConfigurationsResponse &trt__GetCompatibleVideoAnalyticsConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleVideoAnalyticsConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleMetadataConfigurations */
int __trt__GetCompatibleMetadataConfigurations(struct soap *soap, _trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations, _trt__GetCompatibleMetadataConfigurationsResponse &trt__GetCompatibleMetadataConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleMetadataConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleAudioOutputConfigurations */
int __trt__GetCompatibleAudioOutputConfigurations(struct soap *soap, _trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations, _trt__GetCompatibleAudioOutputConfigurationsResponse &trt__GetCompatibleAudioOutputConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleAudioOutputConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetCompatibleAudioDecoderConfigurations */
int __trt__GetCompatibleAudioDecoderConfigurations(struct soap *soap, _trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations, _trt__GetCompatibleAudioDecoderConfigurationsResponse &trt__GetCompatibleAudioDecoderConfigurationsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetCompatibleAudioDecoderConfigurations" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetVideoSourceConfiguration */
int __trt__SetVideoSourceConfiguration(struct soap *soap, _trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration, _trt__SetVideoSourceConfigurationResponse &trt__SetVideoSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetVideoEncoderConfiguration */
int __trt__SetVideoEncoderConfiguration(struct soap *soap, _trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration, _trt__SetVideoEncoderConfigurationResponse &trt__SetVideoEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetVideoEncoderConfiguration" << std::endl;
	std::cout << "__trt__SetVideoEncoderConfiguration token: " << trt__SetVideoEncoderConfiguration->Configuration->token << std::endl;
	// std::cout << "__trt__SetVideoEncoderConfiguration __anyAttribute" << trt__SetVideoEncoderConfiguration->Configuration->__anyAttribute << std::endl;
	

	Json::Value dataJson;
	for(unsigned int i = 0; i < EncoderId.size(); i++)
	{
		if(trt__SetVideoEncoderConfiguration->Configuration->token == sha1(EncoderId[i]))
		{
			dataJson["Configuration"]["token"] = EncoderId[i];
			break;
		}
	}

	dataJson["Configuration"]["Name"] = trt__SetVideoEncoderConfiguration->Configuration->Name;
	dataJson["Configuration"]["UseCount"] = trt__SetVideoEncoderConfiguration->Configuration->UseCount;
	dataJson["Configuration"]["GuaranteedFrameRate"] = trt__SetVideoEncoderConfiguration->Configuration->GuaranteedFrameRate;
	
	dataJson["Configuration"]["UseCount"] = trt__SetVideoEncoderConfiguration->Configuration->UseCount;
	dataJson["Configuration"]["GuaranteedFrameRate"] = trt__SetVideoEncoderConfiguration->Configuration->GuaranteedFrameRate;
	switch (trt__SetVideoEncoderConfiguration->Configuration->Encoding)
	{
	case tt__VideoEncoding__JPEG:
		dataJson["Configuration"]["GuaranteedFrameRate"] = "JPEG";
		break;
	case tt__VideoEncoding__MPEG4:
		dataJson["Configuration"]["GuaranteedFrameRate"] = "MPEG4";
		break;
	case tt__VideoEncoding__H264:
		dataJson["Configuration"]["GuaranteedFrameRate"] = "H264";
		break;
	default:
		break;
	}
	dataJson["Configuration"]["Resolution"]["Width"] = trt__SetVideoEncoderConfiguration->Configuration->Resolution->Width;
	dataJson["Configuration"]["Resolution"]["Height"] = trt__SetVideoEncoderConfiguration->Configuration->Resolution->Height;

	dataJson["Configuration"]["Quality"] = trt__SetVideoEncoderConfiguration->Configuration->Quality;
	dataJson["Configuration"]["RateControl"]["FrameRateLimit"] = trt__SetVideoEncoderConfiguration->Configuration->RateControl->FrameRateLimit;
	dataJson["Configuration"]["RateControl"]["EncodingInterval"] = trt__SetVideoEncoderConfiguration->Configuration->RateControl->EncodingInterval;
	dataJson["Configuration"]["RateControl"]["BitrateLimit"] = trt__SetVideoEncoderConfiguration->Configuration->RateControl->BitrateLimit;
	if(trt__SetVideoEncoderConfiguration->Configuration->MPEG4)
	{
		dataJson["Configuration"]["MPEG4"]["GovLength"] = trt__SetVideoEncoderConfiguration->Configuration->MPEG4->GovLength;
		switch (trt__SetVideoEncoderConfiguration->Configuration->MPEG4->Mpeg4Profile)
		{
		case tt__Mpeg4Profile__SP:
			dataJson["Configuration"]["MPEG4"]["Mpeg4Profile"] = "tt__Mpeg4Profile__SP";
			break;
		case tt__Mpeg4Profile__ASP:
			dataJson["Configuration"]["MPEG4"]["Mpeg4Profile"] = "tt__Mpeg4Profile__ASP";
			break;
		default:
			break;
		}
	}
	
	if(trt__SetVideoEncoderConfiguration->Configuration->H264)
	{
		dataJson["Configuration"]["H264"]["GovLength"] = trt__SetVideoEncoderConfiguration->Configuration->H264->GovLength;
		switch (trt__SetVideoEncoderConfiguration->Configuration->H264->H264Profile)
		{
		case tt__H264Profile__Baseline:
			dataJson["Configuration"]["H264"]["H264Profile"] = "Baseline";
			break;
		case tt__H264Profile__Main:
			dataJson["Configuration"]["H264"]["H264Profile"] = "Main";
			break;
		case tt__H264Profile__Extended:
			dataJson["Configuration"]["H264"]["H264Profile"] = "Extended";
			break;
		case tt__H264Profile__High:
			dataJson["Configuration"]["H264"]["H264Profile"] = "High";
			break;
		default:
			break;
		}
	}
	
	if(trt__SetVideoEncoderConfiguration->Configuration->Multicast)
	{
		switch (trt__SetVideoEncoderConfiguration->Configuration->Multicast->Address->Type)
		{
		case tt__IPType__IPv4:
			dataJson["Configuration"]["Multicast"]["Address"]["Type"] = "IPv4";
			break;
		case tt__IPType__IPv6:
			dataJson["Configuration"]["Multicast"]["Address"]["Type"] = "IPv6";
			break;
		default:
			break;
		}
		dataJson["Configuration"]["Multicast"]["Address"]["IPv4Address"] = trt__SetVideoEncoderConfiguration->Configuration->Multicast->Address->IPv4Address;
		dataJson["Configuration"]["Multicast"]["Address"]["IPv6Address"] = trt__SetVideoEncoderConfiguration->Configuration->Multicast->Address->IPv6Address;
		dataJson["Configuration"]["Multicast"]["Port"] = trt__SetVideoEncoderConfiguration->Configuration->Multicast->Port;
		dataJson["Configuration"]["Multicast"]["TTL"] = trt__SetVideoEncoderConfiguration->Configuration->Multicast->TTL;
		dataJson["Configuration"]["Multicast"]["AutoStart"] = trt__SetVideoEncoderConfiguration->Configuration->Multicast->AutoStart;
		dataJson["Configuration"]["SessionTimeout"] = trt__SetVideoEncoderConfiguration->Configuration->SessionTimeout;
		dataJson["ForcePersistence"] = trt__SetVideoEncoderConfiguration->ForcePersistence;
	}
	

	Json::StyledWriter StyledWriter;
	std::string data = StyledWriter.write(dataJson);
	std::cout << data << std::endl;
	httplib::Client cli(scheme_host_port);
	auto res = cli.Post("/dvr/v1.0/SetVideoEncoderConfiguration", data, "text/plain");
	// dataResponse = res->body;

	return SOAP_OK;
}


/** Auto-test server operation __trt__SetAudioSourceConfiguration */
int __trt__SetAudioSourceConfiguration(struct soap *soap, _trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration, _trt__SetAudioSourceConfigurationResponse &trt__SetAudioSourceConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetAudioSourceConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetAudioEncoderConfiguration */
int __trt__SetAudioEncoderConfiguration(struct soap *soap, _trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration, _trt__SetAudioEncoderConfigurationResponse &trt__SetAudioEncoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetAudioEncoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetVideoAnalyticsConfiguration */
int __trt__SetVideoAnalyticsConfiguration(struct soap *soap, _trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration, _trt__SetVideoAnalyticsConfigurationResponse &trt__SetVideoAnalyticsConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetVideoAnalyticsConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetMetadataConfiguration */
int __trt__SetMetadataConfiguration(struct soap *soap, _trt__SetMetadataConfiguration *trt__SetMetadataConfiguration, _trt__SetMetadataConfigurationResponse &trt__SetMetadataConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetMetadataConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetAudioOutputConfiguration */
int __trt__SetAudioOutputConfiguration(struct soap *soap, _trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration, _trt__SetAudioOutputConfigurationResponse &trt__SetAudioOutputConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetAudioOutputConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetAudioDecoderConfiguration */
int __trt__SetAudioDecoderConfiguration(struct soap *soap, _trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration, _trt__SetAudioDecoderConfigurationResponse &trt__SetAudioDecoderConfigurationResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetAudioDecoderConfiguration" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoSourceConfigurationOptions */
int __trt__GetVideoSourceConfigurationOptions(struct soap *soap, _trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions, _trt__GetVideoSourceConfigurationOptionsResponse &trt__GetVideoSourceConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoSourceConfigurationOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoEncoderConfigurationOptions */
int __trt__GetVideoEncoderConfigurationOptions(struct soap *soap, _trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions, _trt__GetVideoEncoderConfigurationOptionsResponse &trt__GetVideoEncoderConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoEncoderConfigurationOptions" << std::endl;
	if(trt__GetVideoEncoderConfigurationOptions->ConfigurationToken)
	{
		std::cout << "__trt__GetVideoEncoderConfigurationOptions ConfigurationToken: " << *trt__GetVideoEncoderConfigurationOptions->ConfigurationToken << std::endl;
	}
	if(trt__GetVideoEncoderConfigurationOptions->ProfileToken)
	{
		std::cout << "__trt__GetVideoEncoderConfigurationOptions ProfileToken: " << *trt__GetVideoEncoderConfigurationOptions->ProfileToken << std::endl;
	}
	
	
	
	std::string dataResponse = R"({
									"GetVideoEncoderConfigurationOptionsResponse": {
										"Options": {
											"QualityRange": {
												"Min": 1,
												"Max": 100
											},
											"H264": {
												"ResolutionsAvailable": [
													{
														"Width": 1920,
														"Height": 1080
													},
													{
														"Width": 1280,
														"Height": 1024
													},
													{
														"Width": 1280,
														"Height": 960
													},
													{
														"Width": 1280,
														"Height": 720
													},
													{
														"Width": 1024,
														"Height": 768
													},
													{
														"Width": 800,
														"Height": 600
													},
													{
														"Width": 800,
														"Height": 448
													},
													{
														"Width": 720,
														"Height": 576
													},
													{
														"Width": 720,
														"Height": 480
													},
													{
														"Width": 640,
														"Height": 480
													},
													{
														"Width": 640,
														"Height": 360
													},
													{
														"Width": 320,
														"Height": 240
													}
												],
												"FrameRateRange": {
													"Min": 1,
													"Max": 25
												},
												"EncodingIntervalRange": {
													"Min": 1,
													"Max": 100
												}
											}
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"].isNull())
	{
		trt__GetVideoEncoderConfigurationOptionsResponse.Options = soap_new_tt__VideoEncoderConfigurationOptions(soap);
		if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["GuaranteedFrameRateSupported"].isNull())
		{
			bool *GuaranteedFrameRateSupported = new bool(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["GuaranteedFrameRateSupported"].asBool());
			trt__GetVideoEncoderConfigurationOptionsResponse.Options->GuaranteedFrameRateSupported = GuaranteedFrameRateSupported;
		}
		if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["QualityRange"].isNull())
		{
			trt__GetVideoEncoderConfigurationOptionsResponse.Options->QualityRange = soap_new_tt__IntRange(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["QualityRange"]["Min"].isNull())
			{
				int QualityRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["QualityRange"]["Min"].asInt();
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->QualityRange->Min = QualityRangeMin;
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["QualityRange"]["Max"].isNull())
			{
				int QualityRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["QualityRange"]["Max"].asInt();
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->QualityRange->Max = QualityRangeMax;
			}
		}
		//---------------------------------------------JPEG--------------------------------------------------
		if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"].isNull())
		{
			trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG = soap_new_tt__JpegOptions(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["ResolutionsAvailable"].isNull())
			{
				Json::Value arrayJPEGResolutions = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["ResolutionsAvailable"];
				for(unsigned int i = 0; i < arrayJPEGResolutions.size(); i++)
				{
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->ResolutionsAvailable.push_back(soap_new_tt__VideoResolution(soap));
					if(!arrayJPEGResolutions[i]["Width"].isNull())
					{
						int JPEGWidth = arrayJPEGResolutions[i]["Width"].asInt();
						trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->ResolutionsAvailable.back()->Width = JPEGWidth;
					}
					if(!arrayJPEGResolutions[i]["Height"].isNull())
					{
						int JPEGHeight = arrayJPEGResolutions[i]["Height"].asInt();
						trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->ResolutionsAvailable.back()->Height = JPEGHeight;
					}
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["FrameRateRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->FrameRateRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["FrameRateRange"]["Min"].isNull())
				{
					int JPEGFrameRateRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["FrameRateRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->FrameRateRange->Min = JPEGFrameRateRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["FrameRateRange"]["Max"].isNull())
				{
					int JPEGFrameRateRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["FrameRateRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->FrameRateRange->Max = JPEGFrameRateRangeMax;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["EncodingIntervalRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->EncodingIntervalRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["EncodingIntervalRange"]["Min"].isNull())
				{
					int JPEGEncodingIntervalRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["EncodingIntervalRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->EncodingIntervalRange->Min = JPEGEncodingIntervalRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["EncodingIntervalRange"]["Max"].isNull())
				{
					int JPEGEncodingIntervalRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["JPEG"]["EncodingIntervalRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->JPEG->EncodingIntervalRange->Max = JPEGEncodingIntervalRangeMax;
				}
			}
		}
		//---------------------------------------------MPEG4--------------------------------------------------
		if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"].isNull())
		{
			trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4 = soap_new_tt__Mpeg4Options(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["ResolutionsAvailable"].isNull())
			{
				Json::Value arrayMPEG4Resolutions = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["ResolutionsAvailable"];
				for(unsigned int i = 0; i < arrayMPEG4Resolutions.size(); i++)
				{
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->ResolutionsAvailable.push_back(soap_new_tt__VideoResolution(soap));
					if(!arrayMPEG4Resolutions[i]["Width"].isNull())
					{
						int MPEG4Width = arrayMPEG4Resolutions[i]["Width"].asInt();
						trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->ResolutionsAvailable.back()->Width = MPEG4Width;
					}
					if(!arrayMPEG4Resolutions[i]["Height"].isNull())
					{
						int MPEG4Height = arrayMPEG4Resolutions[i]["Height"].asInt();
						trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->ResolutionsAvailable.back()->Height = MPEG4Height;
					}
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["GovLengthRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->GovLengthRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["GovLengthRange"]["Min"].isNull())
				{
					int MPEG4GovLengthRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["GovLengthRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->GovLengthRange->Min = MPEG4GovLengthRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["GovLengthRange"]["Max"].isNull())
				{
					int MPEG4GovLengthRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["GovLengthRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->GovLengthRange->Max = MPEG4GovLengthRangeMax;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["FrameRateRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->FrameRateRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["FrameRateRange"]["Min"].isNull())
				{
					int MPEG4FrameRateRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["FrameRateRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->FrameRateRange->Min = MPEG4FrameRateRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["FrameRateRange"]["Max"].isNull())
				{
					int MPEG4FrameRateRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["FrameRateRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->FrameRateRange->Max = MPEG4FrameRateRangeMax;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["EncodingIntervalRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->EncodingIntervalRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["EncodingIntervalRange"]["Min"].isNull())
				{
					int MPEG4EncodingIntervalRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["EncodingIntervalRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->EncodingIntervalRange->Min = MPEG4EncodingIntervalRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["EncodingIntervalRange"]["Max"].isNull())
				{
					int MPEG4EncodingIntervalRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["EncodingIntervalRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->EncodingIntervalRange->Max = MPEG4EncodingIntervalRangeMax;
				}
			}
			// if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["Mpeg4ProfilesSupported"].isNull())
			// {
			// 	if(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["Mpeg4ProfilesSupported"].asString() == "SP")
			// 	{
			// 		trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->Mpeg4ProfilesSupported = tt__Mpeg4Profile__SP;
			// 	}
			// 	if(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["MPEG4"]["Mpeg4ProfilesSupported"].asString() == "ASP")
			// 	{
			// 		trt__GetVideoEncoderConfigurationOptionsResponse.Options->MPEG4->Mpeg4ProfilesSupported = tt__Mpeg4Profile__ASP;
			// 	}
			// }
		}
		//---------------------------------------------H264--------------------------------------------------
		if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"].isNull())
		{
			trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264 = soap_new_tt__H264Options(soap);
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["ResolutionsAvailable"].isNull())
			{
				Json::Value arrayH264Resolutions = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["ResolutionsAvailable"];
				for(unsigned int i = 0; i < arrayH264Resolutions.size(); i++)
				{
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->ResolutionsAvailable.push_back(soap_new_tt__VideoResolution(soap));
					if(!arrayH264Resolutions[i]["Width"].isNull())
					{
						int H264Width = arrayH264Resolutions[i]["Width"].asInt();
						trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->ResolutionsAvailable.back()->Width = H264Width;
					}
					if(!arrayH264Resolutions[i]["Height"].isNull())
					{
						int H264Height = arrayH264Resolutions[i]["Height"].asInt();
						trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->ResolutionsAvailable.back()->Height = H264Height;
					}
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["GovLengthRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->GovLengthRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["GovLengthRange"]["Min"].isNull())
				{
					int H264GovLengthRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["GovLengthRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->GovLengthRange->Min = H264GovLengthRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["GovLengthRange"]["Max"].isNull())
				{
					int H264GovLengthRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["GovLengthRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->GovLengthRange->Max = H264GovLengthRangeMax;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["FrameRateRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->FrameRateRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["FrameRateRange"]["Min"].isNull())
				{
					int H264FrameRateRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["FrameRateRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->FrameRateRange->Min = H264FrameRateRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["FrameRateRange"]["Max"].isNull())
				{
					int H264FrameRateRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["FrameRateRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->FrameRateRange->Max = H264FrameRateRangeMax;
				}
			}
			if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["EncodingIntervalRange"].isNull())
			{
				trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->EncodingIntervalRange = soap_new_tt__IntRange(soap);
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["EncodingIntervalRange"]["Min"].isNull())
				{
					int H264EncodingIntervalRangeMin = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["EncodingIntervalRange"]["Min"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->EncodingIntervalRange->Min = H264EncodingIntervalRangeMin;
				}
				if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["EncodingIntervalRange"]["Max"].isNull())
				{
					int H264EncodingIntervalRangeMax = root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["EncodingIntervalRange"]["Max"].asInt();
					trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->EncodingIntervalRange->Max = H264EncodingIntervalRangeMax;
				}
			}
			// if(!root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["H264ProfilesSupported"].isNull())
			// {
			// 	if(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["H264ProfilesSupported"].asString() == "Baseline")
			// 	{
			// 		trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->H264ProfilesSupported.push_back(tt__H264Profile__Baseline);
			// 	}
			// 	else if(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["H264ProfilesSupported"].asString() == "Main")
			// 	{
			// 		trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->H264ProfilesSupported.push_back(tt__H264Profile__Main);
			// 	}
			// 	else if(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["H264ProfilesSupported"].asString() == "Extended")
			// 	{
			// 		trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->H264ProfilesSupported.push_back(tt__H264Profile__Extended);
			// 	}
			// 	else if(root_dataResponse["GetVideoEncoderConfigurationOptionsResponse"]["Options"]["H264"]["H264ProfilesSupported"].asString() == "High")
			// 	{
			// 		trt__GetVideoEncoderConfigurationOptionsResponse.Options->H264->H264ProfilesSupported.push_back(tt__H264Profile__High);
			// 	}
			// }
		}

	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioSourceConfigurationOptions */
int __trt__GetAudioSourceConfigurationOptions(struct soap *soap, _trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions, _trt__GetAudioSourceConfigurationOptionsResponse &trt__GetAudioSourceConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioSourceConfigurationOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioEncoderConfigurationOptions */
int __trt__GetAudioEncoderConfigurationOptions(struct soap *soap, _trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions, _trt__GetAudioEncoderConfigurationOptionsResponse &trt__GetAudioEncoderConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioEncoderConfigurationOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetMetadataConfigurationOptions */
int __trt__GetMetadataConfigurationOptions(struct soap *soap, _trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions, _trt__GetMetadataConfigurationOptionsResponse &trt__GetMetadataConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetMetadataConfigurationOptions" << std::endl;
	std::cout << "__trt__GetMetadataConfigurationOptions ConfigurationToken: " << trt__GetMetadataConfigurationOptions->ConfigurationToken << std::endl;
	std::cout << "__trt__GetMetadataConfigurationOptions ProfileToken: " << trt__GetMetadataConfigurationOptions->ProfileToken << std::endl;

	std::string dataResponse = R"({
									"GetMetadataConfigurationOptionsResponse": {
										"Options": {
											"GeoLocation": false,
											"MaxContentFilterSize": 2,
											"PTZStatusFilterOptions": {
												"PanTiltStatusSupported": false,
												"ZoomStatusSupported": false,
												"PanTiltPositionSupported": false,
												"ZoomPositionSupported": false
											}
										}
									}
								})";


	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"].isNull())
	{
		trt__GetMetadataConfigurationOptionsResponse.Options = soap_new_tt__MetadataConfigurationOptions(soap);
		if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["GeoLocation"].isNull())
		{
			bool *GeoLocation = new bool(root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["GeoLocation"].asBool());
			trt__GetMetadataConfigurationOptionsResponse.Options->GeoLocation = GeoLocation;
		}
		if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["MaxContentFilterSize"].isNull())
		{
			int *MaxContentFilterSize = new int(root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["MaxContentFilterSize"].asInt());
			trt__GetMetadataConfigurationOptionsResponse.Options->MaxContentFilterSize = MaxContentFilterSize;
		}
		if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"].isNull())
		{
			trt__GetMetadataConfigurationOptionsResponse.Options->PTZStatusFilterOptions = soap_new_tt__PTZStatusFilterOptions(soap);
			if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["PanTiltStatusSupported"].isNull())
			{
				bool *PanTiltStatusSupported = new bool(root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["PanTiltStatusSupported"].asBool());
				trt__GetMetadataConfigurationOptionsResponse.Options->PTZStatusFilterOptions->PanTiltStatusSupported = PanTiltStatusSupported;
			}
			if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["ZoomStatusSupported"].isNull())
			{
				bool *ZoomStatusSupported = new bool(root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["ZoomStatusSupported"].asBool());
				trt__GetMetadataConfigurationOptionsResponse.Options->PTZStatusFilterOptions->ZoomStatusSupported = ZoomStatusSupported;
			}
			if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["PanTiltPositionSupported"].isNull())
			{
				bool *PanTiltPositionSupported = new bool(root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["PanTiltPositionSupported"].asBool());
				trt__GetMetadataConfigurationOptionsResponse.Options->PTZStatusFilterOptions->PanTiltPositionSupported = PanTiltPositionSupported;
			}
			if(!root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["ZoomPositionSupported"].isNull())
			{
				bool *ZoomPositionSupported = new bool(root_dataResponse["GetMetadataConfigurationOptionsResponse"]["Options"]["PTZStatusFilterOptions"]["ZoomPositionSupported"].asBool());
				trt__GetMetadataConfigurationOptionsResponse.Options->PTZStatusFilterOptions->ZoomPositionSupported = ZoomPositionSupported;
			}
		}


	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioOutputConfigurationOptions */
int __trt__GetAudioOutputConfigurationOptions(struct soap *soap, _trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions, _trt__GetAudioOutputConfigurationOptionsResponse &trt__GetAudioOutputConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetAudioOutputConfigurationOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetAudioDecoderConfigurationOptions */
int __trt__GetAudioDecoderConfigurationOptions(struct soap *soap, _trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions, _trt__GetAudioDecoderConfigurationOptionsResponse &trt__GetAudioDecoderConfigurationOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	std::cout << "__trt__GetAudioDecoderConfigurationOptions" << std::endl;
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetGuaranteedNumberOfVideoEncoderInstances */
int __trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap *soap, _trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances, _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse &trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetGuaranteedNumberOfVideoEncoderInstances" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetStreamUri */
int __trt__GetStreamUri(struct soap *soap, _trt__GetStreamUri *trt__GetStreamUri, _trt__GetStreamUriResponse &trt__GetStreamUriResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetStreamUri" << std::endl;
	std::cout << "__trt__GetStreamUri Stream: " << trt__GetStreamUri->StreamSetup->Stream << std::endl;
	std::cout << "__trt__GetStreamUri Transport Protocol: " << trt__GetStreamUri->StreamSetup->Transport->Protocol << std::endl;
	std::cout << "__trt__GetStreamUri ProfileToken: " << trt__GetStreamUri->ProfileToken << std::endl;
	
	// rtsp://192.168.1.192:554/cam/realmonitor?channel=1&subtype=0&unicast=true&proto=Onvif
	int err = soap_verify(soap);
	if(err != SOAP_OK)
	{
		return err;
	}

	std::string dataResponse;
	httplib::Client cli(scheme_host_port);
	//POST API to get get URI
	for(unsigned int i = 0; i < ProfileId.size(); i++)
	{
		if(trt__GetStreamUri->ProfileToken == sha1(ProfileId[i]))
		{
			Json::Value dataJson;
			dataJson["ProfileToken"] = ProfileId[i];
			switch (trt__GetStreamUri->StreamSetup->Stream)
			{
			case tt__StreamType__RTP_Unicast:
				dataJson["StreamSetup"]["Stream"] = "RTP-Unicast";
				break;
			case tt__StreamType__RTP_Multicast:
				dataJson["StreamSetup"]["Stream"] = "RTP-Multicast";
				break;
			default:
				break;
			}
			switch (trt__GetStreamUri->StreamSetup->Transport->Protocol)
			{
			case tt__TransportProtocol__UDP:
				dataJson["StreamSetup"]["Transport"]["Protocol"] = "UDP";
				break;
			case tt__TransportProtocol__TCP:
				dataJson["StreamSetup"]["Transport"]["Protocol"] = "TCP";
				break;
			case tt__TransportProtocol__RTSP:
				dataJson["StreamSetup"]["Transport"]["Protocol"] = "RTSP";
				break;
			case tt__TransportProtocol__HTTP:
				dataJson["StreamSetup"]["Transport"]["Protocol"] = "HTTP";
				break;
			default:
				break;
			}
			Json::StyledWriter StyledWriter;
			std::string data = StyledWriter.write(dataJson);
			std::cout << data;
			auto res = cli.Post("/dvr/v1.0/GetStreamUri", data, "text/plain");
			dataResponse = res->body;
			std::cout << dataResponse << std::endl;
			break;
		}
	}


	std::string dataResponse1 = R"({
									"GetStreamUriResponse": {
										"MediaUri": {
											"Uri": "rtsp://192.168.51.150:554/onvif/profile1/media.smp",
											"InvalidAfterConnect": false,
											"InvalidAfterReboot": true,
											"Timeout": "PT0H0M0S"
										}
									}
								})";
	
	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);

	if(!root_dataResponse["GetStreamUriResponse"]["MediaUri"].isNull())
	{
		trt__GetStreamUriResponse.MediaUri = soap_new_tt__MediaUri(soap);
		if(!root_dataResponse["GetStreamUriResponse"]["MediaUri"]["Uri"].isNull())
		{
			// std::string Uri = "rtsp://admin:L2A3A198@192.168.1.192:554/cam/realmonitor?channel=1&subtype=0&unicast=true&proto=Onvif";
			std::string Uri = root_dataResponse["GetStreamUriResponse"]["MediaUri"]["Uri"].asString();
			trt__GetStreamUriResponse.MediaUri->Uri = Uri;
		}
		if(!root_dataResponse["GetStreamUriResponse"]["MediaUri"]["InvalidAfterConnect"].isNull())
		{
			bool InvalidAfterConnect = root_dataResponse["GetStreamUriResponse"]["MediaUri"]["InvalidAfterConnect"].asBool();
			trt__GetStreamUriResponse.MediaUri->InvalidAfterConnect = InvalidAfterConnect;
		}
		if(!root_dataResponse["GetStreamUriResponse"]["MediaUri"]["InvalidAfterReboot"].isNull())
		{
			bool InvalidAfterReboot = root_dataResponse["GetStreamUriResponse"]["MediaUri"]["InvalidAfterReboot"].asBool();
			trt__GetStreamUriResponse.MediaUri->InvalidAfterReboot = InvalidAfterReboot;
		}
		if(!root_dataResponse["GetStreamUriResponse"]["MediaUri"]["Timeout"].isNull())
		{
			std::string Timeout = root_dataResponse["GetStreamUriResponse"]["MediaUri"]["Timeout"].asString();
			trt__GetStreamUriResponse.MediaUri->Timeout = Timeout;
		}
	}
	return SOAP_OK;
}


/** Auto-test server operation __trt__StartMulticastStreaming */
int __trt__StartMulticastStreaming(struct soap *soap, _trt__StartMulticastStreaming *trt__StartMulticastStreaming, _trt__StartMulticastStreamingResponse &trt__StartMulticastStreamingResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__StartMulticastStreaming" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__StopMulticastStreaming */
int __trt__StopMulticastStreaming(struct soap *soap, _trt__StopMulticastStreaming *trt__StopMulticastStreaming, _trt__StopMulticastStreamingResponse &trt__StopMulticastStreamingResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__StopMulticastStreaming" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetSynchronizationPoint */
int __trt__SetSynchronizationPoint(struct soap *soap, _trt__SetSynchronizationPoint *trt__SetSynchronizationPoint, _trt__SetSynchronizationPointResponse &trt__SetSynchronizationPointResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "SOAP_ENV__Fault_1" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetSnapshotUri */
int __trt__GetSnapshotUri(struct soap *soap, _trt__GetSnapshotUri *trt__GetSnapshotUri, _trt__GetSnapshotUriResponse &trt__GetSnapshotUriResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetSnapshotUri " << std::endl;
	std::cout << "__trt__GetSnapshotUri token: " << trt__GetSnapshotUri->ProfileToken << std::endl;
	int err = soap_verify(soap);
	if(err != SOAP_OK)
	{
		return err;
	}

	std::string dataResponse;
	httplib::Client cli(scheme_host_port);
	//POST API to get get URI
	for(unsigned int i = 0; i < ProfileId.size(); i++)
	{
		if(trt__GetSnapshotUri->ProfileToken == sha1(ProfileId[i]))
		{
			Json::Value dataJson;
			dataJson["ProfileToken"] = ProfileId[i];

			Json::StyledWriter StyledWriter;
			std::string data = StyledWriter.write(dataJson);
			// std::cout << data;
			auto res = cli.Post("/dvr/v1.0/GetSnapshotUri", data, "text/plain");
			dataResponse = res->body;
			std::cout << dataResponse << std::endl;
			break;
		}
	}

	//"Uri": "http://192.168.51.150/stw-cgi/video.cgi?msubmenu=snapshot&Profile=1&action=view",
	std::string dataResponse1 = R"({
									"GetSnapshotUriResponse": {
										"MediaUri": {
											"Uri": "http://192.168.51.90:8200/dvr/v1.0/GetSnapshot?profile=0-0",
											"InvalidAfterConnect": false,
											"InvalidAfterReboot": false,
											"Timeout": "PT0H0M0S"
										}
									}
								})";

	Json::Value root_dataResponse;
    Json::Reader reader;
	reader.parse(dataResponse, root_dataResponse);
	if(!root_dataResponse["GetSnapshotUriResponse"]["MediaUri"].isNull())
	{
		trt__GetSnapshotUriResponse.MediaUri = soap_new_tt__MediaUri(soap);
		if(!root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["Uri"].isNull())
		{
			std::string Uri = root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["Uri"].asString();
			trt__GetSnapshotUriResponse.MediaUri->Uri = Uri;
			std::cout << "URI: " << Uri << std::endl;
		}
		if(!root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["InvalidAfterConnect"].isNull())
		{
			bool InvalidAfterConnect = root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["InvalidAfterConnect"].asBool();
			trt__GetSnapshotUriResponse.MediaUri->InvalidAfterConnect = InvalidAfterConnect;
		}
		if(!root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["InvalidAfterReboot"].isNull())
		{
			bool InvalidAfterReboot = root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["InvalidAfterReboot"].asBool();
			trt__GetSnapshotUriResponse.MediaUri->InvalidAfterReboot = InvalidAfterReboot;
		}
		if(!root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["Timeout"].isNull())
		{
			std::string Timeout = root_dataResponse["GetSnapshotUriResponse"]["MediaUri"]["Timeout"].asString();
			trt__GetSnapshotUriResponse.MediaUri->Timeout = Timeout;
		}
	}

	return SOAP_OK;
}


/** Auto-test server operation __trt__GetVideoSourceModes */
int __trt__GetVideoSourceModes(struct soap *soap, _trt__GetVideoSourceModes *trt__GetVideoSourceModes, _trt__GetVideoSourceModesResponse &trt__GetVideoSourceModesResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetVideoSourceModes" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetVideoSourceMode */
int __trt__SetVideoSourceMode(struct soap *soap, _trt__SetVideoSourceMode *trt__SetVideoSourceMode, _trt__SetVideoSourceModeResponse &trt__SetVideoSourceModeResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetVideoSourceMode" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetOSDs */
int __trt__GetOSDs(struct soap *soap, _trt__GetOSDs *trt__GetOSDs, _trt__GetOSDsResponse &trt__GetOSDsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetOSDs" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetOSD */
int __trt__GetOSD(struct soap *soap, _trt__GetOSD *trt__GetOSD, _trt__GetOSDResponse &trt__GetOSDResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetOSD" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__GetOSDOptions */
int __trt__GetOSDOptions(struct soap *soap, _trt__GetOSDOptions *trt__GetOSDOptions, _trt__GetOSDOptionsResponse &trt__GetOSDOptionsResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__GetOSDOptions" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__SetOSD */
int __trt__SetOSD(struct soap *soap, _trt__SetOSD *trt__SetOSD, _trt__SetOSDResponse &trt__SetOSDResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__SetOSD" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__CreateOSD */
int __trt__CreateOSD(struct soap *soap, _trt__CreateOSD *trt__CreateOSD, _trt__CreateOSDResponse &trt__CreateOSDResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__CreateOSD" << std::endl;
	return SOAP_OK;
}


/** Auto-test server operation __trt__DeleteOSD */
int __trt__DeleteOSD(struct soap *soap, _trt__DeleteOSD *trt__DeleteOSD, _trt__DeleteOSDResponse &trt__DeleteOSDResponse)
{
	(void)soap; /* appease -Wall -Werror */
	/* Return response with default data and some values copied from the request */
	std::cout << "__trt__DeleteOSD" << std::endl;
	return SOAP_OK;
}